// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Prs2d_RadiusIndep_HeaderFile
#define _Prs2d_RadiusIndep_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Prs2d_RadiusIndep_HeaderFile
#include <Handle_Prs2d_RadiusIndep.hxx>
#endif

#ifndef _Standard_ShortReal_HeaderFile
#include <Standard_ShortReal.hxx>
#endif
#ifndef _TCollection_ExtendedString_HeaderFile
#include <TCollection_ExtendedString.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TShort_Array1OfShortReal_HeaderFile
#include <TShort_Array1OfShortReal.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Prs2d_TypeOfRadius_HeaderFile
#include <Prs2d_TypeOfRadius.hxx>
#endif
#ifndef _Graphic2d_Line_HeaderFile
#include <Graphic2d_Line.hxx>
#endif
#ifndef _Handle_Graphic2d_GraphicObject_HeaderFile
#include <Handle_Graphic2d_GraphicObject.hxx>
#endif
#ifndef _Handle_Graphic2d_Drawer_HeaderFile
#include <Handle_Graphic2d_Drawer.hxx>
#endif
#ifndef _Aspect_FStream_HeaderFile
#include <Aspect_FStream.hxx>
#endif
class Standard_ConstructionError;
class Graphic2d_GraphicObject;
class gp_Pnt2d;
class TCollection_ExtendedString;
class Graphic2d_Drawer;


//! Constructs the primitive Radius <br>
class Prs2d_RadiusIndep : public Graphic2d_Line {

public:

  //! Creates the radius of the circle <aCenter, aRad> passing through <br>
//!          the point <anAttachPnt1> on the circle <br>
  Standard_EXPORT   Prs2d_RadiusIndep(const Handle(Graphic2d_GraphicObject)& aGO,const gp_Pnt2d& anAttachPnt,const gp_Pnt2d& aCenter,const Standard_Real aRad,const TCollection_ExtendedString& aText,const Standard_Real aLength = 10.0,const Prs2d_TypeOfRadius aTypeRad = Prs2d_TOR_STANDARD,const Standard_Real aTxtScale = 1.0);
  //! allows to get the properties of the radius <br>
  Standard_EXPORT     void Values(gp_Pnt2d& anAttPnt,gp_Pnt2d& aCenter,Standard_Real& aRad,TCollection_ExtendedString& aText,Standard_Real& aLength,Prs2d_TypeOfRadius& aTypeRad,Standard_Real& aTxtScale) const;
  //! Defines the text <br>
  Standard_EXPORT     void SetText(const TCollection_ExtendedString& aTxt) ;
  //! Defines the scale factor of text <br>
  Standard_EXPORT     void SetTextScale(const Standard_Real aTxtScale) ;
  //! Sets the index of the font of this text to this dimension <br>
  Standard_EXPORT     void SetTextFont(const Standard_Integer aTF) ;
  //! Sets the index of the font of the symbol to this dimension <br>
  Standard_EXPORT     void SetFontOfSymb(const Standard_Integer aFS) ;
  //! Sets the flag for drawing additional symbol <br>
  Standard_EXPORT     void DrawSymbol(const Standard_Boolean isDraw) ;
  //! Sets the ASCII code of the symbol <br>
  Standard_EXPORT     void SetSymbolCode(const Standard_Integer aCode) ;
  //! Returns the index of the font of this text of this dimension <br>
  Standard_EXPORT     Standard_Integer TextFont() const;
  //! Returns the index of the font of the symbol of this dimension <br>
  Standard_EXPORT     Standard_Integer FontOfSymb() const;
  //! Return true if symbol is drawn, false - in otherwise <br>
  Standard_EXPORT     Standard_Boolean IsDrawSymbol() const;
  //! Return ASCII code of the symbol <br>
  Standard_EXPORT     Standard_Integer SymbolCode() const;
  
  Standard_EXPORT   virtual  void Save(Aspect_FStream& aFStream) const;




  DEFINE_STANDARD_RTTI(Prs2d_RadiusIndep)

protected:

  //! Draws the angle <me>. <br>
  Standard_EXPORT     void Draw(const Handle(Graphic2d_Drawer)& aDrawer) ;
  //! Draws element <anIndex> of the radius <me>. <br>
  Standard_EXPORT   virtual  void DrawElement(const Handle(Graphic2d_Drawer)& aDrawer,const Standard_Integer anIndex) ;
  //! Draws vertex <anIndex> of the radius <me>. <br>
  Standard_EXPORT   virtual  void DrawVertex(const Handle(Graphic2d_Drawer)& aDrawer,const Standard_Integer anIndex) ;
  //! Returns Standard_True if the radius <me> is picked, <br>
//!	    Standard_False if not. <br>
  Standard_EXPORT     Standard_Boolean Pick(const Standard_ShortReal X,const Standard_ShortReal Y,const Standard_ShortReal aPrecision,const Handle(Graphic2d_Drawer)& aDrawer) ;



private: 


Standard_ShortReal myX1;
Standard_ShortReal myY1;
Standard_ShortReal myX2;
Standard_ShortReal myY2;
Standard_ShortReal myTextScale;
TCollection_ExtendedString myText;
Standard_ShortReal myTextX;
Standard_ShortReal myTextY;
Standard_ShortReal myTextAng;
Standard_Boolean myInside;
TShort_Array1OfShortReal myXVert;
TShort_Array1OfShortReal myYVert;
Standard_Boolean myIsSymbol;
Standard_Integer mySymbCode;
Standard_Integer myTextFont;
Standard_Integer mySymbFont;
gp_Pnt2d myAttPnt;
gp_Pnt2d myCenter;
Standard_Real myRadius;
Standard_Real myLength;
Prs2d_TypeOfRadius myRadType;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
