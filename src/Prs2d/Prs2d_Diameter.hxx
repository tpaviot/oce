// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Prs2d_Diameter_HeaderFile
#define _Prs2d_Diameter_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Prs2d_Diameter_HeaderFile
#include <Handle_Prs2d_Diameter.hxx>
#endif

#ifndef _Standard_ShortReal_HeaderFile
#include <Standard_ShortReal.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _gp_Circ2d_HeaderFile
#include <gp_Circ2d.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Prs2d_Dimension_HeaderFile
#include <Prs2d_Dimension.hxx>
#endif
#ifndef _Handle_Graphic2d_GraphicObject_HeaderFile
#include <Handle_Graphic2d_GraphicObject.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Prs2d_TypeOfArrow_HeaderFile
#include <Prs2d_TypeOfArrow.hxx>
#endif
#ifndef _Prs2d_ArrowSide_HeaderFile
#include <Prs2d_ArrowSide.hxx>
#endif
#ifndef _Handle_Graphic2d_Drawer_HeaderFile
#include <Handle_Graphic2d_Drawer.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Aspect_FStream_HeaderFile
#include <Aspect_FStream.hxx>
#endif
class Standard_ConstructionError;
class Graphic2d_GraphicObject;
class gp_Pnt2d;
class gp_Circ2d;
class TCollection_ExtendedString;
class Graphic2d_Drawer;


//! Constructs the primitive Radius <br>
class Prs2d_Diameter : public Prs2d_Dimension {

public:

  //! Creates the radius of the circle passing through <br>
//!          the point <anAttachPnt> <br>
  Standard_EXPORT   Prs2d_Diameter(const Handle(Graphic2d_GraphicObject)& aGraphicObject,const gp_Pnt2d& anAttachPnt,const gp_Circ2d& aCircle,const TCollection_ExtendedString& aText,const Standard_Real aTxtScale = 10.0,const Standard_Real anArrAngle = 20.0,const Standard_Real anArrLength = 25.0,const Prs2d_TypeOfArrow anArrType = Prs2d_TOA_OPENED,const Prs2d_ArrowSide anArrow = Prs2d_AS_BOTHAR,const Standard_Boolean IsReverseArrow = Standard_False);
  //! allows to get the properties of the diameter <br>
  Standard_EXPORT     void Values(gp_Pnt2d& anAttPnt,gp_Circ2d& aCirc) const;
  
  Standard_EXPORT   virtual  void Save(Aspect_FStream& aFStream) const;




  DEFINE_STANDARD_RTTI(Prs2d_Diameter)

protected:

  //! Draws the angle <me>. <br>
  Standard_EXPORT     void Draw(const Handle(Graphic2d_Drawer)& aDrawer) ;
  //! Draws element <anIndex> of the diameter <me>. <br>
  Standard_EXPORT   virtual  void DrawElement(const Handle(Graphic2d_Drawer)& aDrawer,const Standard_Integer anIndex) ;
  //! Draws vertex <anIndex> of the diameter <me>. <br>
  Standard_EXPORT   virtual  void DrawVertex(const Handle(Graphic2d_Drawer)& aDrawer,const Standard_Integer anIndex) ;
  //! Returns Standard_True if the diameter <me> is picked, <br>
//!	    Standard_False if not. <br>
  Standard_EXPORT     Standard_Boolean Pick(const Standard_ShortReal X,const Standard_ShortReal Y,const Standard_ShortReal aPrecision,const Handle(Graphic2d_Drawer)& aDrawer) ;
  
      virtual  void CalcTxtPos(const Standard_Boolean theFromAbs = Standard_False) ;



private: 


Standard_ShortReal myX1;
Standard_ShortReal myY1;
Standard_ShortReal myX2;
Standard_ShortReal myY2;
gp_Pnt2d myPnt;
gp_Circ2d myCirc;
Standard_ShortReal myAppX1;
Standard_ShortReal myAppY1;
Standard_ShortReal myAppX2;
Standard_ShortReal myAppY2;
Standard_Boolean myInside;


};


#include <Prs2d_Diameter.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
