// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//#include <IFSelect_SelectList.ixx>

// ....    Instanciation avec "Handle(Entity)" qui offre ces deux methodes :
//   nb = ent->NbEntities()   et   ent_i = ent->InterfaceEntity(i)


IFSelect_SelectList::IFSelect_SelectList ()  {  }

    void IFSelect_SelectType::KeepInputEntity (Interface_EntityIterator& iter)
      {  iter.SelectType(STANDARD_TYPE(Entity));  }

    Standard_Integer IFSelect_SelectList::NbItems
  (const Handle(Standard_Transient)& ent)
{
  Handle(Entity) anent = Handle(Entity)::DownCast(ent);
  if (anent.IsNull()) return 0;
  return anent->NbEntities();
}

    Handle(Standard_Transient) IFSelect_SelectList::ListedEntity
  (const Standard_Integer num, const Handle(Standard_Transient)& ent)
{
  Handle(Entity) anent = Handle(Entity)::DownCast(ent);
  if (anent.IsNull()) Standard_OutOfRange::Raise
    ("IFSelect SelectType : ListedEntity");
  return anent->InterfacebEntity(num);
}


    TCollection_AsciiString  IFSelect_SelectList::ListLabel () const 
      {  return TCollection_AsciiString(STANDARD_TYPE(Entity)->Name());  }
