// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IFSelect_Functions_HeaderFile
#define _IFSelect_Functions_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Standard_Transient_HeaderFile
#include <Handle_Standard_Transient.hxx>
#endif
#ifndef _Handle_IFSelect_WorkSession_HeaderFile
#include <Handle_IFSelect_WorkSession.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfTransient_HeaderFile
#include <Handle_TColStd_HSequenceOfTransient.hxx>
#endif
#ifndef _Handle_IFSelect_Dispatch_HeaderFile
#include <Handle_IFSelect_Dispatch.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Standard_Transient;
class IFSelect_WorkSession;
class TColStd_HSequenceOfTransient;
class IFSelect_Dispatch;


//! Functions gives access to all the actions which can be <br>
//!           commanded with the resources provided by IFSelect : especially <br>
//!           WorkSession and various types of Selections and Dispatches <br>
//! <br>
//!           It works by adding functions by method Init <br>
class IFSelect_Functions  {
public:

  DEFINE_STANDARD_ALLOC

  //! Takes the name of an entity, either as argument, or (if <name> <br>
//!           is empty) on keybord, and returns the entity <br>
//!           name can be a label or a number (in alphanumeric), it is <br>
//!           searched by NumberFromLabel from WorkSession. <br>
//!           If <name> doesn't match en entity, a Null Handle is returned <br>
  Standard_EXPORT   static  Handle_Standard_Transient GiveEntity(const Handle(IFSelect_WorkSession)& WS,const Standard_CString name = "") ;
  //! Same as GetEntity, but returns the number in the model of the <br>
//!           entity. Returns 0 for null handle <br>
  Standard_EXPORT   static  Standard_Integer GiveEntityNumber(const Handle(IFSelect_WorkSession)& WS,const Standard_CString name = "") ;
  //! Computes a List of entities from a WorkSession and two idents, <br>
//!           first and second, as follows : <br>
//!           if <first> is a Number or Label of an entity : this entity <br>
//!           if <first> is the name of a Selection in <WS>, and <second> <br>
//!             not defined, the standard result of this Selection <br>
//!           if <first> is for a Selection and <second> is defined, the <br>
//!             standard result of this selection from the list computed <br>
//!             with <second> (an entity or a selection) <br>
//!           If <second> is erroneous, it is ignored <br>
  Standard_EXPORT   static  Handle_TColStd_HSequenceOfTransient GiveList(const Handle(IFSelect_WorkSession)& WS,const Standard_CString first = "",const Standard_CString second = "") ;
  //! Evaluates and returns a Dispatch, from data of a WorkSession <br>
//!           if <mode> is False, searches for exact name of Dispatch in WS <br>
//!           Else (D), allows a parameter between brackets : <br>
//!           ex.: dispatch_name(parameter) <br>
//!           The parameter can be: an integer for DispPerCount or DispPerFiles <br>
//!           or the name of a Signature for DispPerSignature <br>
//!           Returns Null Handle if not found not well evaluated <br>
  Standard_EXPORT   static  Handle_IFSelect_Dispatch GiveDispatch(const Handle(IFSelect_WorkSession)& WS,const Standard_CString name,const Standard_Boolean mode = Standard_True) ;
  //! Defines and loads all basic functions (as ActFunc) <br>
  Standard_EXPORT   static  void Init() ;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
