// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//#include <IFSelect_ModelModifier.ixx>
#include <Interface_Check.hxx>

IFSelect_ModelModifier::IFSelect_ModelModifier (const Standard_Boolean grf)
    : IFSelect_Modifier (grf)    {  }

    void  IFSelect_ModelModifier::Perform
  (IFSelect_ContextModif& ctx,
   const Handle(Interface_InterfaceModel)& target,
   const Handle(Interface_Protocol)& protocol,
   Interface_CopyTool& TC) const
{
  ctx.TraceModifier(this);
  Handle(Model) targ = Handle(Model)::DownCast(target);
  Handle(Proto) prot = Handle(Proto)::DownCast(protocol);
  if (targ.IsNull()) {
    ctx.CCheck()->AddFail("Model to Modify : unproper type");
    return;
  }
  PerformProtocol (ctx,targ,prot,TC);
}

    void  IFSelect_ModelModifier::PerformProtocol
  (IFSelect_ContextModif& ctx,
   const Handle(Model)& target,
   const Handle(Proto)& protocol,
   Interface_CopyTool& TC) const
{  ctx.SetProtocol(protocol);  Performing (ctx,target,TC);  }
