// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESDefs_AssociativityDef_HeaderFile
#define _IGESDefs_AssociativityDef_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESDefs_AssociativityDef_HeaderFile
#include <Handle_IGESDefs_AssociativityDef.hxx>
#endif

#ifndef _Handle_TColStd_HArray1OfInteger_HeaderFile
#include <Handle_TColStd_HArray1OfInteger.hxx>
#endif
#ifndef _Handle_IGESBasic_HArray1OfHArray1OfInteger_HeaderFile
#include <Handle_IGESBasic_HArray1OfHArray1OfInteger.hxx>
#endif
#ifndef _IGESData_IGESEntity_HeaderFile
#include <IGESData_IGESEntity.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class TColStd_HArray1OfInteger;
class IGESBasic_HArray1OfHArray1OfInteger;
class Standard_DimensionMismatch;
class Standard_OutOfRange;


//! defines IGES Associativity Definition Entity, Type <302> <br>
//!          Form <5001 - 9999> in package IGESDefs. <br>
//!          This class permits the preprocessor to define an <br>
//!          associativity schema. i.e., by using it preprocessor <br>
//!          defines the type of relationship. <br>
class IGESDefs_AssociativityDef : public IGESData_IGESEntity {

public:

  
  Standard_EXPORT   IGESDefs_AssociativityDef();
  //! This method is used to set the fields of the class <br>
//!           AssociativityDef <br>
//!       - requirements : Back Pointers requirements <br>
//!       - orders       : Class Orders <br>
//!       - numItems     : Number of Items per Class <br>
//!       - items        : Items in each class <br>
//! raises exception if lengths of the arrays are not the same. <br>
  Standard_EXPORT     void Init(const Handle(TColStd_HArray1OfInteger)& requirements,const Handle(TColStd_HArray1OfInteger)& orders,const Handle(TColStd_HArray1OfInteger)& numItems,const Handle(IGESBasic_HArray1OfHArray1OfInteger)& items) ;
  
  Standard_EXPORT     void SetFormNumber(const Standard_Integer form) ;
  //! returns the Number of class definitions <br>
  Standard_EXPORT     Standard_Integer NbClassDefs() const;
  //! returns 1 if the theBackPointerReqs(ClassNum) = 1 <br>
//! returns 0 if the theBackPointerReqs(ClassNum) = 2 <br>
//! raises exception if ClassNum <= 0 or ClassNum > NbClassDefs() <br>
  Standard_EXPORT     Standard_Boolean IsBackPointerReq(const Standard_Integer ClassNum) const;
  //! returns 1 or 2 <br>
//! raises exception if ClassNum <= 0 or ClassNum > NbClassDefs() <br>
  Standard_EXPORT     Standard_Integer BackPointerReq(const Standard_Integer ClassNum) const;
  //! returns 1 if theClassOrders(ClassNum) = 1 (ordered class) <br>
//! returns 0 if theClassOrders(ClassNum) = 2 (unordered class) <br>
//! raises exception if ClassNum <= 0 or ClassNum > NbClassDefs() <br>
  Standard_EXPORT     Standard_Boolean IsOrdered(const Standard_Integer ClassNum) const;
  //! returns 1 or 2 <br>
//! raises exception if ClassNum <= 0 or ClassNum > NbClassDefs() <br>
  Standard_EXPORT     Standard_Integer ClassOrder(const Standard_Integer ClassNum) const;
  //! returns no. of items per class entry <br>
//! raises exception if ClassNum <= 0 or ClassNum > NbClassDefs() <br>
  Standard_EXPORT     Standard_Integer NbItemsPerClass(const Standard_Integer ClassNum) const;
  //! returns ItemNum'th Item of ClassNum'th Class <br>
//! raises exception if <br>
//!      ClassNum <= 0 or ClassNum > NbClassDefs() <br>
//!      ItemNum <= 0 or ItemNum > NbItemsPerClass(ClassNum) <br>
  Standard_EXPORT     Standard_Integer Item(const Standard_Integer ClassNum,const Standard_Integer ItemNum) const;




  DEFINE_STANDARD_RTTI(IGESDefs_AssociativityDef)

protected:




private: 


Handle_TColStd_HArray1OfInteger theBackPointerReqs;
Handle_TColStd_HArray1OfInteger theClassOrders;
Handle_TColStd_HArray1OfInteger theNbItemsPerClass;
Handle_IGESBasic_HArray1OfHArray1OfInteger theItems;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
