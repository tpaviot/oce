// Created on: 1998-08-17
// Created by: Pavel DURANDIN
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <ShapeAnalysis_HSequenceOfFreeBounds.hxx>

//=======================================================================
//function : Shape
//purpose  : Returns shape
//=======================================================================

inline  TopoDS_Shape ShapeAnalysis_FreeBoundsProperties::Shape() const
{
  return myShape;
}

 
//=======================================================================
//function : IsLoaded
//purpose  : Returns True if shape is loaded 
//=======================================================================

inline  Standard_Boolean ShapeAnalysis_FreeBoundsProperties::IsLoaded() const
{
  return !(myShape.IsNull());
}

 
//=======================================================================
//function : Tolerance
//purpose  : Returns tolerance
//=======================================================================

inline  Standard_Real ShapeAnalysis_FreeBoundsProperties::Tolerance() const
{
  return myTolerance;
}

 
//=======================================================================
//function : NbFreeBounds
//purpose  : Returns number of free bounds
//=======================================================================

inline  Standard_Integer ShapeAnalysis_FreeBoundsProperties::NbFreeBounds() const
{
  return (myClosedFreeBounds->Length() + myOpenFreeBounds->Length());
}


//=======================================================================
//function : NbClosedFreeBounds
//purpose  : Returns number of closed free bounds
//=======================================================================

inline  Standard_Integer ShapeAnalysis_FreeBoundsProperties::NbClosedFreeBounds() const
{
  return myClosedFreeBounds->Length();
}


//=======================================================================
//function : NbOpenFreeBounds
//purpose  : Returns number of open free bounds
//=======================================================================

inline  Standard_Integer ShapeAnalysis_FreeBoundsProperties::NbOpenFreeBounds() const
{
  return myOpenFreeBounds->Length();
}


//=======================================================================
//function : ClosedFreeBounds
//purpose  : Returns all closed free bounds
//=======================================================================

inline  Handle(ShapeAnalysis_HSequenceOfFreeBounds) ShapeAnalysis_FreeBoundsProperties::ClosedFreeBounds() const
{
  return myClosedFreeBounds;
}

//=======================================================================
//function : OpenFreeBounds
//purpose  : Returns all open free bounds
//=======================================================================

inline  Handle(ShapeAnalysis_HSequenceOfFreeBounds) ShapeAnalysis_FreeBoundsProperties::OpenFreeBounds() const
{
  return myOpenFreeBounds;
}

//=======================================================================
//function : ClosedFreeBound
//purpose  : Returns properties of closed free bound specified by its rank
//           number
//=======================================================================

inline Handle(ShapeAnalysis_FreeBoundData) ShapeAnalysis_FreeBoundsProperties::ClosedFreeBound(const Standard_Integer index) const
{
  return myClosedFreeBounds->Value(index);
}

//=======================================================================
//function : OpenFreeBound
//purpose  : Returns properties of open free bound specified by its rank
//           number
//=======================================================================

inline Handle(ShapeAnalysis_FreeBoundData) ShapeAnalysis_FreeBoundsProperties::OpenFreeBound(const Standard_Integer index) const
{
  return myOpenFreeBounds->Value(index);
}


