// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//:pdn 05.01.99: renaming method ...Little to ...Small
#include <ShapeExtend.hxx>
#include <ShapeExtend_WireData.hxx>


//=======================================================================
//function : IsLoaded
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::IsLoaded() const
{
  return ! myWire.IsNull() && myWire->NbEdges() >0;
}

 
//=======================================================================
//function : IsReady
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::IsReady() const
{
  return IsLoaded() && !myFace.IsNull();
}

 
//=======================================================================
//function : Precision
//purpose  : 
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::Precision() const
{
  return myPrecision;
}

 
//=======================================================================
//function : WireData
//purpose  : 
//=======================================================================

inline const Handle(ShapeExtend_WireData)& ShapeAnalysis_Wire::WireData() const
{
  return myWire;
}

 
//=======================================================================
//function : NbEdges
//purpose  : 
//=======================================================================

inline Standard_Integer ShapeAnalysis_Wire::NbEdges() const
{
  return myWire.IsNull() ? 0 : myWire->NbEdges();
}

 
//=======================================================================
//function : Face
//purpose  : 
//=======================================================================

inline const TopoDS_Face& ShapeAnalysis_Wire::Face() const
{
  return myFace;
}

 
//=======================================================================
//function : Surface
//purpose  : 
//=======================================================================

inline const Handle(ShapeAnalysis_Surface)& ShapeAnalysis_Wire::Surface() const
{
  return mySurf;
}


//=======================================================================
//function : StatusOrder
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusOrder (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusOrder, Status );
}


//=======================================================================
//function : StatusConnected
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusConnected (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusConnected, Status );
}


//=======================================================================
//function : StatusEdgeCurves
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusEdgeCurves (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusEdgeCurves, Status );
}


//=======================================================================
//function : StatusDegenerated
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusDegenerated (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusDegenerated, Status );
}


//=======================================================================
//function : StatusClosed
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusClosed (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusClosed, Status );
}


//=======================================================================
//function : StatusSmall
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusSmall (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusSmall, Status );
}


//=======================================================================
//function : StatusSelfIntersection
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusSelfIntersection (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusSelfIntersection, Status );
}


//=======================================================================
//function : StatusLacking
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusLacking (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusLacking, Status );
}


//=======================================================================
//function : StatusGaps3d
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeAnalysis_Wire::StatusGaps3d(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusGaps3d, Status );
}


//=======================================================================
//function : StatusGaps2d
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeAnalysis_Wire::StatusGaps2d(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusGaps2d, Status );
}


//=======================================================================
//function : StatusCurveGaps
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeAnalysis_Wire::StatusCurveGaps(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusCurveGaps, Status );
}

//=======================================================================
//function : StatusLoop
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeAnalysis_Wire::StatusLoop(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatusLoop, Status );
}

//=======================================================================
//function : Status
//purpose  : 
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::LastCheckStatus (const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus ( myStatus, Status );
}


//=======================================================================
//function : MinDistance3d
//purpose  : 
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MinDistance3d() const
{
  return myMin3d;
}


//=======================================================================
//function : MinDistance2d
//purpose  : 
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MinDistance2d() const
{
  return myMin2d;
}


//=======================================================================
//function : MaxDistance3d
//purpose  : 
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MaxDistance3d() const
{
  return myMax3d;
}


//=======================================================================
//function : MaxDistance2d
//purpose  : 
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MaxDistance2d() const
{
  return myMax2d;
}
