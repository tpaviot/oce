// Created on: 2005-12-20
// Created by: Sergey KHROMOV
// Copyright (c) 2005-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



#include <BRep_Tool.hxx>

//=======================================================================
//function : BRepGProp_Face
//purpose  : Constructor. Initializes the object with IsUseSpan.
//=======================================================================

inline BRepGProp_Face::BRepGProp_Face(const Standard_Boolean IsUseSpan)
     : myIsUseSpan(IsUseSpan)
{
}

//=======================================================================
//function : BRepGProp_Face
//purpose  : Constructor.Initializes the object with the face and
//           IsUseSpan flan.
//=======================================================================

inline BRepGProp_Face::BRepGProp_Face(const TopoDS_Face      &F,
				      const Standard_Boolean  IsUseSpan)
     : myIsUseSpan(IsUseSpan)
{
  Load(F);
}

//=======================================================================
//function : NaturalRestriction
//purpose  : Returns Standard_True if the face is not trimmed.
//=======================================================================

inline Standard_Boolean BRepGProp_Face::NaturalRestriction() const
{
  return BRep_Tool::NaturalRestriction(mySurface.Face());
}

//=======================================================================
//function : Value2d
//purpose  : Returns the value of the boundary curve of the face.
//=======================================================================

inline gp_Pnt2d BRepGProp_Face::Value2d(const Standard_Real U) const
{
  return myCurve.Value(U);
}

//=======================================================================
//function : D12d
//purpose  : Returns the point of parameter U and the first derivative
//           at this point of a boundary curve.
//=======================================================================

inline void BRepGProp_Face::D12d(const Standard_Real  U,
				       gp_Pnt2d      &P,
				       gp_Vec2d      &V1) const
{
  myCurve.D1(U,P,V1);
}

//=======================================================================
//function : FirstParameter
//purpose  : Returns the parametric value of the start point of
//           the current arc of curve.
//=======================================================================

inline Standard_Real BRepGProp_Face::FirstParameter() const
{
  return myCurve.FirstParameter();
}

//=======================================================================
//function : LastParameter
//purpose  : Returns the parametric value of the end point of
//           the current arc of curve.
//=======================================================================

inline Standard_Real BRepGProp_Face::LastParameter() const
{
  return myCurve.LastParameter();
}
