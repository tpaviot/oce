// Created on: 1991-05-29
// Created by: Denis PASCAL
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//		<dp>


//=======================================================================
//function : GraphTools_ConnectedVerticesIterator
//purpose  : 
//=======================================================================

GraphTools_ConnectedVerticesIterator::GraphTools_ConnectedVerticesIterator () 
{}


//=======================================================================
//function : GraphTools_TopologicalSortIterator
//purpose  : 
//=======================================================================

GraphTools_ConnectedVerticesIterator::GraphTools_ConnectedVerticesIterator
  (const Graph& G)
{
  FromGraph (G);
}

//=======================================================================
//function : FromVertex
//purpose  : 
//=======================================================================

void GraphTools_ConnectedVerticesIterator::FromVertex
  (const Vertex& V)
{
  myIterator.FromVertex(V);
}


//=======================================================================
//function : GraphTools_ConnectedVerticesIterator
//purpose  : 
//=======================================================================
void GraphTools_ConnectedVerticesIterator::FromGraph  (const Graph& G)  
{
  for ( GIterator it (G); it.More(); it.Next() ) {
    myIterator.FromVertex(it.Value());
  }
}


//=======================================================================
//function : Perform
//purpose  : 
//=======================================================================

void GraphTools_ConnectedVerticesIterator::Perform
  (const Graph& G)
{
  myIterator.Perform(G);
}


//=======================================================================
//function : Reset
//purpose  : 
//=======================================================================

void GraphTools_ConnectedVerticesIterator::Reset ()
{
  myIterator.Reset();
}

//=======================================================================
//function : More
//purpose  : 
//=======================================================================
Standard_Boolean GraphTools_ConnectedVerticesIterator::More () const 
{
  return myIterator.More();
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================
void GraphTools_ConnectedVerticesIterator::Next () 
{
  myIterator.Next();
}


//=======================================================================
//function : NbVertices
//purpose  : 
//=======================================================================

Standard_Integer GraphTools_ConnectedVerticesIterator::NbVertices() const
{  
  return myIterator.NbVertices();
}


//=======================================================================
//function : Value
//purpose  : 
//=======================================================================
const Vertex& GraphTools_ConnectedVerticesIterator::Value 
  (const Standard_Integer I) const 
{
  return myIterator.Value(I);
}



















