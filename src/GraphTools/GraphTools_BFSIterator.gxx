// Created on: 1992-10-12
// Created by: Denis PASCAL
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_NoMoreObject.hxx>
#include <Standard_NoSuchObject.hxx>
#include <TColStd_QueueOfInteger.hxx>

//=======================================================================
//function : GraphTools_BFSIterator
//purpose  : 
//=======================================================================

GraphTools_BFSIterator::GraphTools_BFSIterator () {}


//=======================================================================
//function : Perform
//purpose  : 
//=======================================================================

void GraphTools_BFSIterator::Perform
  (const Graph& G, const Vertex& V)
{ 
  Standard_Integer index;
  myVisited.Clear();
  TColStd_QueueOfInteger myReady; 
 
  index = myVisited.Add(V);
  myReady.Push(index);
  while (!myReady.IsEmpty()) {
    Vertex w1 = myVisited (myReady.Front());
    myReady.Pop();
    for (VIterator it(G,w1); it.More(); it.Next()) {
      Vertex w2 = it.Value();
      if (!myVisited.Contains(w2)) {
	index = myVisited.Add(w2); 
	myReady.Push(index);
      }
    }
  }
  myCurrentIndex = 1;
}


//=======================================================================
//function : More
//purpose  : 
//=======================================================================

Standard_Boolean GraphTools_BFSIterator::More () const 
{
  return myCurrentIndex <= myVisited.Extent();
}


//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

void GraphTools_BFSIterator::Next () 
{
  myCurrentIndex++;
}


//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

const Vertex& GraphTools_BFSIterator::Value () const 
{
  return myVisited(myCurrentIndex);
}









