// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepToIGES_BRShell_HeaderFile
#define _BRepToIGES_BRShell_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _BRepToIGES_BREntity_HeaderFile
#include <BRepToIGES_BREntity.hxx>
#endif
#ifndef _Handle_IGESData_IGESEntity_HeaderFile
#include <Handle_IGESData_IGESEntity.hxx>
#endif
class BRepToIGES_BREntity;
class IGESData_IGESEntity;
class TopoDS_Shape;
class TopoDS_Shell;
class TopoDS_Face;


//! This class implements the transfer of Shape Entities from Geom <br>
//!          To IGES. These can be : <br>
//!            . Vertex <br>
//!            . Edge <br>
//!            . Wire <br>
class BRepToIGES_BRShell  : public BRepToIGES_BREntity {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   BRepToIGES_BRShell();
  
  Standard_EXPORT   BRepToIGES_BRShell(const BRepToIGES_BREntity& BR);
  //!  Transfert an Shape entity from TopoDS to IGES <br>
//!            This entity must be a Face or a Shell. <br>
//!            If this Entity could not be converted, this member returns a NullEntity. <br>
  Standard_EXPORT     Handle_IGESData_IGESEntity TransferShell(const TopoDS_Shape& start) ;
  //!  Transfert an Shell entity from TopoDS to IGES <br>
//!            If this Entity could not be converted, this member returns a NullEntity. <br>
  Standard_EXPORT     Handle_IGESData_IGESEntity TransferShell(const TopoDS_Shell& start) ;
  //!  Transfert a Face entity from TopoDS to IGES <br>
//!            If this Entity could not be converted, this member returns a NullEntity. <br>
  Standard_EXPORT     Handle_IGESData_IGESEntity TransferFace(const TopoDS_Face& start) ;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
