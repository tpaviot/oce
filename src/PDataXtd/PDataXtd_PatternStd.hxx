// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _PDataXtd_PatternStd_HeaderFile
#define _PDataXtd_PatternStd_HeaderFile

#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_PDataXtd_PatternStd_HeaderFile
#include <Handle_PDataXtd_PatternStd.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_PNaming_NamedShape_HeaderFile
#include <Handle_PNaming_NamedShape.hxx>
#endif
#ifndef _Handle_PDataStd_Real_HeaderFile
#include <Handle_PDataStd_Real.hxx>
#endif
#ifndef _Handle_PDataStd_Integer_HeaderFile
#include <Handle_PDataStd_Integer.hxx>
#endif
#ifndef _PDF_Attribute_HeaderFile
#include <PDF_Attribute.hxx>
#endif
class PNaming_NamedShape;
class PDataStd_Real;
class PDataStd_Integer;


class PDataXtd_PatternStd : public PDF_Attribute {

public:

  
  Standard_EXPORT   PDataXtd_PatternStd();
  
        void Signature(const Standard_Integer signature) ;
  
        void Axis1Reversed(const Standard_Boolean Axis1Reversed) ;
  
        void Axis2Reversed(const Standard_Boolean Axis2Reversed) ;
  
        void Axis1(const Handle(PNaming_NamedShape)& Axis1) ;
  
        void Axis2(const Handle(PNaming_NamedShape)& Axis2) ;
  
        void Value1(const Handle(PDataStd_Real)& Value1) ;
  
        void Value2(const Handle(PDataStd_Real)& Value2) ;
  
        void NbInstances1(const Handle(PDataStd_Integer)& NbInstances1) ;
  
        void NbInstances2(const Handle(PDataStd_Integer)& NbInstances2) ;
  
        void Mirror(const Handle(PNaming_NamedShape)& plane) ;
  
        Standard_Integer Signature() const;
  
        Standard_Boolean Axis1Reversed() const;
  
        Standard_Boolean Axis2Reversed() const;
  
        Handle_PNaming_NamedShape Axis1() const;
  
        Handle_PNaming_NamedShape Axis2() const;
  
        Handle_PDataStd_Real Value1() const;
  
        Handle_PDataStd_Real Value2() const;
  
        Handle_PDataStd_Integer NbInstances1() const;
  
        Handle_PDataStd_Integer NbInstances2() const;
  
        Handle_PNaming_NamedShape Mirror() const;

PDataXtd_PatternStd(const Storage_stCONSTclCOM& a) : PDF_Attribute(a)
{
  
}
    Standard_Integer _CSFDB_GetPDataXtd_PatternStdmySignature() const { return mySignature; }
    void _CSFDB_SetPDataXtd_PatternStdmySignature(const Standard_Integer p) { mySignature = p; }
    Standard_Boolean _CSFDB_GetPDataXtd_PatternStdmyAxis1Reversed() const { return myAxis1Reversed; }
    void _CSFDB_SetPDataXtd_PatternStdmyAxis1Reversed(const Standard_Boolean p) { myAxis1Reversed = p; }
    Standard_Boolean _CSFDB_GetPDataXtd_PatternStdmyAxis2Reversed() const { return myAxis2Reversed; }
    void _CSFDB_SetPDataXtd_PatternStdmyAxis2Reversed(const Standard_Boolean p) { myAxis2Reversed = p; }
    Handle(PNaming_NamedShape) _CSFDB_GetPDataXtd_PatternStdmyAxis1() const { return myAxis1; }
    void _CSFDB_SetPDataXtd_PatternStdmyAxis1(const Handle(PNaming_NamedShape)& p) { myAxis1 = p; }
    Handle(PNaming_NamedShape) _CSFDB_GetPDataXtd_PatternStdmyAxis2() const { return myAxis2; }
    void _CSFDB_SetPDataXtd_PatternStdmyAxis2(const Handle(PNaming_NamedShape)& p) { myAxis2 = p; }
    Handle(PDataStd_Real) _CSFDB_GetPDataXtd_PatternStdmyValue1() const { return myValue1; }
    void _CSFDB_SetPDataXtd_PatternStdmyValue1(const Handle(PDataStd_Real)& p) { myValue1 = p; }
    Handle(PDataStd_Real) _CSFDB_GetPDataXtd_PatternStdmyValue2() const { return myValue2; }
    void _CSFDB_SetPDataXtd_PatternStdmyValue2(const Handle(PDataStd_Real)& p) { myValue2 = p; }
    Handle(PDataStd_Integer) _CSFDB_GetPDataXtd_PatternStdmyNb1() const { return myNb1; }
    void _CSFDB_SetPDataXtd_PatternStdmyNb1(const Handle(PDataStd_Integer)& p) { myNb1 = p; }
    Handle(PDataStd_Integer) _CSFDB_GetPDataXtd_PatternStdmyNb2() const { return myNb2; }
    void _CSFDB_SetPDataXtd_PatternStdmyNb2(const Handle(PDataStd_Integer)& p) { myNb2 = p; }
    Handle(PNaming_NamedShape) _CSFDB_GetPDataXtd_PatternStdmyMirror() const { return myMirror; }
    void _CSFDB_SetPDataXtd_PatternStdmyMirror(const Handle(PNaming_NamedShape)& p) { myMirror = p; }



  DEFINE_STANDARD_RTTI(PDataXtd_PatternStd)

protected:




private: 


Standard_Integer mySignature;
Standard_Boolean myAxis1Reversed;
Standard_Boolean myAxis2Reversed;
Handle_PNaming_NamedShape myAxis1;
Handle_PNaming_NamedShape myAxis2;
Handle_PDataStd_Real myValue1;
Handle_PDataStd_Real myValue2;
Handle_PDataStd_Integer myNb1;
Handle_PDataStd_Integer myNb2;
Handle_PNaming_NamedShape myMirror;


};


#include <PDataXtd_PatternStd.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
