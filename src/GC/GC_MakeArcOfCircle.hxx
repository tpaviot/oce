// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GC_MakeArcOfCircle_HeaderFile
#define _GC_MakeArcOfCircle_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Geom_TrimmedCurve_HeaderFile
#include <Handle_Geom_TrimmedCurve.hxx>
#endif
#ifndef _GC_Root_HeaderFile
#include <GC_Root.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Geom_TrimmedCurve;
class StdFail_NotDone;
class gp_Circ;
class gp_Pnt;
class gp_Vec;


//! Implements construction algorithms for an <br>
//! arc of circle in 3D space. The result is a Geom_TrimmedCurve curve. <br>
//! A MakeArcOfCircle object provides a framework for: <br>
//! -   defining the construction of the arc of circle, <br>
//! -   implementing the construction algorithm, and <br>
//! -   consulting the results. In particular, the <br>
//!   Value function returns the constructed arc of circle. <br>
class GC_MakeArcOfCircle  : public GC_Root {
public:

  DEFINE_STANDARD_ALLOC

  //! Make an arc of circle (TrimmedCurve from Geom) from <br>
//!          a circle between two angles Alpha1 and Alpha2 <br>
//!          given in radiians. <br>
  Standard_EXPORT   GC_MakeArcOfCircle(const gp_Circ& Circ,const Standard_Real Alpha1,const Standard_Real Alpha2,const Standard_Boolean Sense);
  //! Make an arc of circle (TrimmedCurve from Geom) from <br>
//!          a circle between point <P> and the angle Alpha <br>
//!          given in radians. <br>
  Standard_EXPORT   GC_MakeArcOfCircle(const gp_Circ& Circ,const gp_Pnt& P,const Standard_Real Alpha,const Standard_Boolean Sense);
  //! Make an arc of circle (TrimmedCurve from Geom) from <br>
//!          a circle between two points P1 and P2. <br>
  Standard_EXPORT   GC_MakeArcOfCircle(const gp_Circ& Circ,const gp_Pnt& P1,const gp_Pnt& P2,const Standard_Boolean Sense);
  //! Make an arc of circle (TrimmedCurve from Geom) from <br>
//!          three points P1,P2,P3 between two points P1 and P2. <br>
  Standard_EXPORT   GC_MakeArcOfCircle(const gp_Pnt& P1,const gp_Pnt& P2,const gp_Pnt& P3);
  //! Make an arc of circle (TrimmedCurve from Geom) from <br>
//!          two points P1,P2 and the tangente to the solution at <br>
//!          the point P1. <br>
//! The orientation of the arc is: <br>
//! -   the sense determined by the order of the points P1, P3 and P2; <br>
//! -   the sense defined by the vector V; or <br>
//! -   for other syntaxes: <br>
//!   -   the sense of Circ if Sense is true, or <br>
//!   -   the opposite sense if Sense is false. <br>
//! Note: Alpha1, Alpha2 and Alpha are angle values, given in radians. <br>
//! Warning <br>
//! If an error occurs (that is, when IsDone returns <br>
//! false), the Status function returns: <br>
//! -   gce_ConfusedPoints if: <br>
//!   -   any 2 of the 3 points P1, P2 and P3 are coincident, or <br>
//!   -   P1 and P2 are coincident; or <br>
//! -   gce_IntersectionError if: <br>
//!   -   P1, P2 and P3 are collinear and not coincident, or <br>
//!   -   the vector defined by the points P1 and <br>
//!    P2 is collinear with the vector V. <br>
  Standard_EXPORT   GC_MakeArcOfCircle(const gp_Pnt& P1,const gp_Vec& V,const gp_Pnt& P2);
  //! Returns the constructed arc of circle. <br>
//! Exceptions StdFail_NotDone if no arc of circle is constructed. <br>
  Standard_EXPORT    const Handle_Geom_TrimmedCurve& Value() const;
  
  Standard_EXPORT    const Handle_Geom_TrimmedCurve& Operator() const;
Standard_EXPORT operator Handle_Geom_TrimmedCurve() const;





protected:





private:



Handle_Geom_TrimmedCurve TheArc;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
