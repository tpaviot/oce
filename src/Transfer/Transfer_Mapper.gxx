// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//#include <Transfer_Mapper.ixx>
#include <Standard_Integer.hxx>


Transfer_Mapper::Transfer_Mapper (const TheKey& akey)
    : theval (akey)
{ SetHashCode ( TheHasher::HashCode (akey, IntegerLast() ) ); }


    const TheKey&  Transfer_Mapper::Value () const
      {  return theval;  }

    Standard_Boolean  Transfer_Mapper::Equates
  (const Handle(Transfer_Finder)& other) const
{
  if (other.IsNull()) return Standard_False;
  if (GetHashCode() != other->GetHashCode()) return Standard_False;
  if (other->DynamicType() != DynamicType()) return Standard_False;
  Handle(Transfer_Mapper) another = Handle(Transfer_Mapper)::DownCast(other);
//  return (theval == another->Value());
  return  TheHasher::IsEqual (theval,another->Value());
}

    Handle(Standard_Type)  Transfer_Mapper::ValueType () const
      {  return TheInfo::Type(theval);  }

    Standard_CString  Transfer_Mapper::ValueTypeName () const
      {  return TheInfo::TypeName(theval);  }
