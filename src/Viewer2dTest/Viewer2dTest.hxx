// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Viewer2dTest_HeaderFile
#define _Viewer2dTest_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_TopTools_HArray1OfShape_HeaderFile
#include <Handle_TopTools_HArray1OfShape.hxx>
#endif
#ifndef _Handle_AIS2D_InteractiveObject_HeaderFile
#include <Handle_AIS2D_InteractiveObject.hxx>
#endif
#ifndef _AIS_KindOfInteractive_HeaderFile
#include <AIS_KindOfInteractive.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfTransient_HeaderFile
#include <Handle_TColStd_HArray1OfTransient.hxx>
#endif
#ifndef _Handle_V2d_Viewer_HeaderFile
#include <Handle_V2d_Viewer.hxx>
#endif
#ifndef _Handle_AIS2D_InteractiveContext_HeaderFile
#include <Handle_AIS2D_InteractiveContext.hxx>
#endif
#ifndef _Handle_V2d_View_HeaderFile
#include <Handle_V2d_View.hxx>
#endif
#ifndef _Handle_Viewer2dTest_EventManager_HeaderFile
#include <Handle_Viewer2dTest_EventManager.hxx>
#endif
class TopoDS_Shape;
class TopTools_HArray1OfShape;
class AIS2D_InteractiveObject;
class TColStd_HArray1OfTransient;
class V2d_Viewer;
class AIS2D_InteractiveContext;
class V2d_View;
class Viewer2dTest_EventManager;
class Draw_Interpretor;
class Viewer2dTest_EventManager;
class Viewer2dTest_DoubleMapOfInteractiveAndName;
class Viewer2dTest_DataMapOfText;
class Viewer2dTest_DoubleMapNodeOfDoubleMapOfInteractiveAndName;
class Viewer2dTest_DoubleMapIteratorOfDoubleMapOfInteractiveAndName;
class Viewer2dTest_DataMapNodeOfDataMapOfText;
class Viewer2dTest_DataMapIteratorOfDataMapOfText;



class Viewer2dTest  {
public:

  DEFINE_STANDARD_ALLOC

  
//!          implemented in Viewer2dTest_ViewerCommands.cxx <br>
  Standard_EXPORT   static  void ViewerInit(const Standard_Integer thePxLeft = 0,const Standard_Integer thePxTop = 0,const Standard_Integer thePxWidth = 0,const Standard_Integer thePxHeight = 0) ;
  //!  waits until a shape of type <aType> is picked in the AIS2D Viewer and returns it. <br>
//! if <aType> == TopAbs_Shape, any shape can be picked... <br>
//! MaxPick  is the Max number before exiting, if no pick is successfull <br>
  Standard_EXPORT   static  TopoDS_Shape PickShape(const TopAbs_ShapeEnum aType,const Standard_Integer MaxPick = 5) ;
  //! wait until the array is filled with picked shapes. <br>
//!          returns True if the array is filled. <br>
//!          exit if number of unsuccesfull picks =  <MaxPick> <br>
  Standard_EXPORT   static  Standard_Boolean PickShapes(const TopAbs_ShapeEnum aType,Handle(TopTools_HArray1OfShape)& thepicked,const Standard_Integer MaxPick = 5) ;
  //! waits until an interactive object of a given Type <br>
//!          and signature is picked (defaut values authorize <br>
//!          selection of any Interactive Object) <br>
//!          exit if number of unsuccesfull picks =  <MaxPick> <br>
  Standard_EXPORT   static  Handle_AIS2D_InteractiveObject PickObject(const AIS_KindOfInteractive Type = AIS_KOI_None,const Standard_Integer Signature = -1,const Standard_Integer MaxPick = 5) ;
  //! selection of several interactive objects. Number is given <br>
//!          by the size of <thepicked> <br>
//!          exit if number of unsuccesfull picks =  <MaxPick> <br>
  Standard_EXPORT   static  Standard_Boolean PickObjects(Handle(TColStd_HArray1OfTransient)& thepicked,const AIS_KindOfInteractive Type = AIS_KOI_None,const Standard_Integer Signature = -1,const Standard_Integer MaxPick = 5) ;
  
  Standard_EXPORT   static  void GetMousePosition(Standard_Integer& xpix,Standard_Integer& ypix) ;
  
  Standard_EXPORT   static  Handle_V2d_Viewer GetViewerFromContext() ;
  
  Standard_EXPORT   static  Handle_V2d_Viewer GetCollectorFromContext() ;
  
  Standard_EXPORT   static  Handle_AIS2D_InteractiveContext GetAIS2DContext() ;
  
  Standard_EXPORT   static  void SetAIS2DContext(const Handle(AIS2D_InteractiveContext)& aContext) ;
  
  Standard_EXPORT   static  Handle_V2d_View CurrentView() ;
  
  Standard_EXPORT   static  void CurrentView(const Handle(V2d_View)& aViou) ;
  
  Standard_EXPORT   static  void Clear() ;
  //!      puts  <aMgr>   as     current  eventmanager  (the <br>
//!          move,select,...will be applied to <aMgr> <br>
  Standard_EXPORT   static  void SetEventManager(const Handle(Viewer2dTest_EventManager)& aMgr) ;
  //! removes the last EventManager from the list. <br>
  Standard_EXPORT   static  void UnsetEventManager() ;
  //! clear the list of EventManagers and <br>
//!          sets the default EventManager as current <br>
  Standard_EXPORT   static  void ResetEventManager() ;
  
  Standard_EXPORT   static  Handle_Viewer2dTest_EventManager CurrentEventManager() ;
  
  Standard_EXPORT   static  void RemoveSelected() ;
  
  Standard_EXPORT   static  void StandardModeActivation(const Standard_Integer Mode) ;
  
  Standard_EXPORT   static  void Commands(Draw_Interpretor& theCommands) ;
  
  Standard_EXPORT   static  void MyCommands(Draw_Interpretor& theCommands) ;
  
  Standard_EXPORT   static  void GeneralCommands(Draw_Interpretor& theCommands) ;
  
  Standard_EXPORT   static  void ViewerCommands(Draw_Interpretor& theCommands) ;
  
  Standard_EXPORT   static  void DisplayCommands(Draw_Interpretor& theCommands) ;
  
  Standard_EXPORT   static  void ObjectCommands(Draw_Interpretor& theCommands) ;





protected:





private:




friend class Viewer2dTest_EventManager;
friend class Viewer2dTest_DoubleMapOfInteractiveAndName;
friend class Viewer2dTest_DataMapOfText;
friend class Viewer2dTest_DoubleMapNodeOfDoubleMapOfInteractiveAndName;
friend class Viewer2dTest_DoubleMapIteratorOfDoubleMapOfInteractiveAndName;
friend class Viewer2dTest_DataMapNodeOfDataMapOfText;
friend class Viewer2dTest_DataMapIteratorOfDataMapOfText;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
