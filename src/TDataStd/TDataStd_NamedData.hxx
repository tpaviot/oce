// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TDataStd_NamedData_HeaderFile
#define _TDataStd_NamedData_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_TDataStd_NamedData_HeaderFile
#include <Handle_TDataStd_NamedData.hxx>
#endif

#ifndef _Handle_TDataStd_HDataMapOfStringInteger_HeaderFile
#include <Handle_TDataStd_HDataMapOfStringInteger.hxx>
#endif
#ifndef _Handle_TDataStd_HDataMapOfStringReal_HeaderFile
#include <Handle_TDataStd_HDataMapOfStringReal.hxx>
#endif
#ifndef _Handle_TDataStd_HDataMapOfStringString_HeaderFile
#include <Handle_TDataStd_HDataMapOfStringString.hxx>
#endif
#ifndef _Handle_TDataStd_HDataMapOfStringByte_HeaderFile
#include <Handle_TDataStd_HDataMapOfStringByte.hxx>
#endif
#ifndef _Handle_TDataStd_HDataMapOfStringHArray1OfInteger_HeaderFile
#include <Handle_TDataStd_HDataMapOfStringHArray1OfInteger.hxx>
#endif
#ifndef _Handle_TDataStd_HDataMapOfStringHArray1OfReal_HeaderFile
#include <Handle_TDataStd_HDataMapOfStringHArray1OfReal.hxx>
#endif
#ifndef _TDF_Attribute_HeaderFile
#include <TDF_Attribute.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Byte_HeaderFile
#include <Standard_Byte.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfInteger_HeaderFile
#include <Handle_TColStd_HArray1OfInteger.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfReal_HeaderFile
#include <Handle_TColStd_HArray1OfReal.hxx>
#endif
#ifndef _Handle_TDF_Attribute_HeaderFile
#include <Handle_TDF_Attribute.hxx>
#endif
#ifndef _Handle_TDF_RelocationTable_HeaderFile
#include <Handle_TDF_RelocationTable.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class TDataStd_HDataMapOfStringInteger;
class TDataStd_HDataMapOfStringReal;
class TDataStd_HDataMapOfStringString;
class TDataStd_HDataMapOfStringByte;
class TDataStd_HDataMapOfStringHArray1OfInteger;
class TDataStd_HDataMapOfStringHArray1OfReal;
class Standard_GUID;
class TDF_Label;
class TCollection_ExtendedString;
class TColStd_DataMapOfStringInteger;
class TDataStd_DataMapOfStringReal;
class TDataStd_DataMapOfStringString;
class TDataStd_DataMapOfStringByte;
class TColStd_HArray1OfInteger;
class TDataStd_DataMapOfStringHArray1OfInteger;
class TColStd_HArray1OfReal;
class TDataStd_DataMapOfStringHArray1OfReal;
class TDF_Attribute;
class TDF_RelocationTable;


//! Contains a named data. <br>
class TDataStd_NamedData : public TDF_Attribute {

public:

  //! Static methods <br>
//!          ============== <br>//! Returns the ID of the named data attribute. <br>
  Standard_EXPORT   static const Standard_GUID& GetID() ;
  //! Finds or creates a named data attribute. <br>
  Standard_EXPORT   static  Handle_TDataStd_NamedData Set(const TDF_Label& label) ;
  
  Standard_EXPORT   TDataStd_NamedData();
  //! Returns true if at least one named integer value is <br>
//!          kept in the attribute. <br>
        Standard_Boolean HasIntegers() const;
  //! Returns true if the attribute contains specified by Name <br>
//!          integer value. <br>
  Standard_EXPORT     Standard_Boolean HasInteger(const TCollection_ExtendedString& theName) const;
  //! Returns the integer value specified by the Name. <br>
//!          It returns 0 if internal map doesn't contain the specified <br>
//!          integer (use HasInteger() to check before). <br>
  Standard_EXPORT     Standard_Integer GetInteger(const TCollection_ExtendedString& theName) ;
  //! Defines a named integer. <br>
//!          If the integer already exists, it changes its value to <theInteger>. <br>
  Standard_EXPORT     void SetInteger(const TCollection_ExtendedString& theName,const Standard_Integer theInteger) ;
  //! Returns the internal container of named integers. <br>
  Standard_EXPORT    const TColStd_DataMapOfStringInteger& GetIntegersContainer() ;
  //! Replace the container content by new content of the <theIntegers>. <br>
  Standard_EXPORT     void ChangeIntegers(const TColStd_DataMapOfStringInteger& theIntegers) ;
  //! Returns true if at least one named real value is <br>
//!          kept in the attribute. <br>
        Standard_Boolean HasReals() const;
  //! Returns true if the attribute contains a real specified by Name. <br>
  Standard_EXPORT     Standard_Boolean HasReal(const TCollection_ExtendedString& theName) const;
  //! Returns the named real. <br>
//!          It returns 0.0 if there is no such a named real <br>
//!          (use HasReal()). <br>
  Standard_EXPORT     Standard_Real GetReal(const TCollection_ExtendedString& theName) ;
  //! Defines a named real. <br>
//!          If the real already exists, it changes its value to <theReal>. <br>
  Standard_EXPORT     void SetReal(const TCollection_ExtendedString& theName,const Standard_Real theReal) ;
  //! Returns the internal container of named reals. <br>
  Standard_EXPORT    const TDataStd_DataMapOfStringReal& GetRealsContainer() ;
  //! Replace the container content by new content of the <theReals>. <br>
  Standard_EXPORT     void ChangeReals(const TDataStd_DataMapOfStringReal& theReals) ;
  //! Returns true if there are some named strings in the attribute. <br>
        Standard_Boolean HasStrings() const;
  //! Returns true if the attribute contains this named string. <br>
  Standard_EXPORT     Standard_Boolean HasString(const TCollection_ExtendedString& theName) const;
  //! Returns the named string. <br>
//!          It returns an empty string if there is no such a named string <br>
//!          (use HasString()). <br>
  Standard_EXPORT    const TCollection_ExtendedString& GetString(const TCollection_ExtendedString& theName) ;
  //! Defines a named string. <br>
//!          If the string already exists, it changes its value to <theString>. <br>
  Standard_EXPORT     void SetString(const TCollection_ExtendedString& theName,const TCollection_ExtendedString& theString) ;
  //! Returns the internal container of named strings. <br>
  Standard_EXPORT    const TDataStd_DataMapOfStringString& GetStringsContainer() ;
  //! Replace the container content by new content of the <theStrings>. <br>
  Standard_EXPORT     void ChangeStrings(const TDataStd_DataMapOfStringString& theStrings) ;
  //! Returns true if there are some named bytes in the attribute. <br>
        Standard_Boolean HasBytes() const;
  //! Returns true if the attribute contains this named byte. <br>
  Standard_EXPORT     Standard_Boolean HasByte(const TCollection_ExtendedString& theName) const;
  //! Returns the named byte. <br>
//!          It returns 0 if there is no such a named byte <br>
//!          (use HasByte()). <br>
  Standard_EXPORT     Standard_Byte GetByte(const TCollection_ExtendedString& theName) ;
  //! Defines a named byte. <br>
//!          If the byte already exists, it changes its value to <theByte>. <br>
  Standard_EXPORT     void SetByte(const TCollection_ExtendedString& theName,const Standard_Byte theByte) ;
  //! Returns the internal container of named bytes. <br>
  Standard_EXPORT    const TDataStd_DataMapOfStringByte& GetBytesContainer() ;
  //! Replace the container content by new content of the <theBytes>. <br>
  Standard_EXPORT     void ChangeBytes(const TDataStd_DataMapOfStringByte& theBytes) ;
  //! Returns true if there are some named arrays of integer values in the attribute. <br>
        Standard_Boolean HasArraysOfIntegers() const;
  //! Returns true if the attribute contains this named array of integer values. <br>
  Standard_EXPORT     Standard_Boolean HasArrayOfIntegers(const TCollection_ExtendedString& theName) const;
  //! Returns the named array of integer values. <br>
//!          It returns a NULL Handle if there is no such a named array of integers <br>
//!          (use HasArrayOfIntegers()). <br>
  Standard_EXPORT    const Handle_TColStd_HArray1OfInteger& GetArrayOfIntegers(const TCollection_ExtendedString& theName) ;
  //! Defines a named array of integer values. <br>
//!          If the array already exists, it changes its value to <theArrayOfIntegers>. <br>
  Standard_EXPORT     void SetArrayOfIntegers(const TCollection_ExtendedString& theName,const Handle(TColStd_HArray1OfInteger)& theArrayOfIntegers) ;
  //! Returns the internal container of named arrays of integer values. <br>
  Standard_EXPORT    const TDataStd_DataMapOfStringHArray1OfInteger& GetArraysOfIntegersContainer() ;
  //! Replace the container content by new content of the <theArraysOfIntegers>. <br>
  Standard_EXPORT     void ChangeArraysOfIntegers(const TDataStd_DataMapOfStringHArray1OfInteger& theArraysOfIntegers) ;
  //! Returns true if there are some named arrays of real values in the attribute. <br>
        Standard_Boolean HasArraysOfReals() const;
  //! Returns true if the attribute contains this named array of real values. <br>
  Standard_EXPORT     Standard_Boolean HasArrayOfReals(const TCollection_ExtendedString& theName) const;
  //! Returns the named array of real values. <br>
//!          It returns a NULL Handle if there is no such a named array of reals <br>
//!          (use HasArrayOfReals()). <br>
  Standard_EXPORT    const Handle_TColStd_HArray1OfReal& GetArrayOfReals(const TCollection_ExtendedString& theName) ;
  //! Defines a named array of real values. <br>
//!          If the array already exists, it changes its value to <theArrayOfReals>. <br>
  Standard_EXPORT     void SetArrayOfReals(const TCollection_ExtendedString& theName,const Handle(TColStd_HArray1OfReal)& theArrayOfReals) ;
  //! Returns the internal container of named arrays of real values. <br>
  Standard_EXPORT    const TDataStd_DataMapOfStringHArray1OfReal& GetArraysOfRealsContainer() ;
  //! Replace the container content by new content of the <theArraysOfReals>. <br>
  Standard_EXPORT     void ChangeArraysOfReals(const TDataStd_DataMapOfStringHArray1OfReal& theArraysOfReals) ;
  
  Standard_EXPORT    const Standard_GUID& ID() const;
  
  Standard_EXPORT     void Restore(const Handle(TDF_Attribute)& With) ;
  
  Standard_EXPORT     Handle_TDF_Attribute NewEmpty() const;
  
  Standard_EXPORT     void Paste(const Handle(TDF_Attribute)& Into,const Handle(TDF_RelocationTable)& RT) const;
  
  Standard_EXPORT   virtual  Standard_OStream& Dump(Standard_OStream& anOS) const;




  DEFINE_STANDARD_RTTI(TDataStd_NamedData)

protected:




private: 


Handle_TDataStd_HDataMapOfStringInteger myIntegers;
Handle_TDataStd_HDataMapOfStringReal myReals;
Handle_TDataStd_HDataMapOfStringString myStrings;
Handle_TDataStd_HDataMapOfStringByte myBytes;
Handle_TDataStd_HDataMapOfStringHArray1OfInteger myArraysOfIntegers;
Handle_TDataStd_HDataMapOfStringHArray1OfReal myArraysOfReals;


};


#include <TDataStd_NamedData.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
