// Created on: 1991-06-24
// Created by: Didier PIFFAULT
// Copyright (c) -1999 Matra Datavision
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
// Return the number of sections points in an interference.
//=======================================================================

inline Standard_Integer Intf_Interference::NbSectionPoints () const
{
  return mySPoins.Length();
}

//=======================================================================
// Give the section point of range Index in the interference.
//=======================================================================

inline const Intf_SectionPoint& Intf_Interference::PntValue (const Standard_Integer Index) const
{
  return mySPoins(Index);
}

//=======================================================================
// Return the number of sections lines in an interference.
//=======================================================================

inline Standard_Integer Intf_Interference::NbSectionLines () const
{
  return mySLines.Length();
}

//=======================================================================
// Give the section line of range Index in the interference.
//=======================================================================

inline const Intf_SectionLine& Intf_Interference::LineValue (const Standard_Integer Index) const
{
  return mySLines(Index);
}

//=======================================================================
// Return the number of sections TangentZones in an interference.
//=======================================================================

inline Standard_Integer Intf_Interference::NbTangentZones () const
{
  return myTZones.Length();
}

//=======================================================================
// Give the tangentzone of range Index in the interference.
//=======================================================================

inline const Intf_TangentZone& Intf_Interference::ZoneValue (const Standard_Integer Index) const
{
  return myTZones(Index);
}

//=======================================================================
//function : GetTolerance
//purpose  : 
//=======================================================================

inline Standard_Real Intf_Interference::GetTolerance () const
{
  return Tolerance;
}
