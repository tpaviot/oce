// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StdPrs_Curve_HeaderFile
#define _StdPrs_Curve_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Prs3d_Root_HeaderFile
#include <Prs3d_Root.hxx>
#endif
#ifndef _Handle_Prs3d_Presentation_HeaderFile
#include <Handle_Prs3d_Presentation.hxx>
#endif
#ifndef _Handle_Prs3d_Drawer_HeaderFile
#include <Handle_Prs3d_Drawer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Quantity_Length_HeaderFile
#include <Quantity_Length.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Prs3d_Presentation;
class Adaptor3d_Curve;
class Prs3d_Drawer;
class TColgp_SequenceOfPnt;


//! A framework to define display of lines, arcs of circles <br>
//! and conic sections. <br>
//! This is done with a fixed number of points, which can be modified. <br>
class StdPrs_Curve  : public Prs3d_Root {
public:

  DEFINE_STANDARD_ALLOC

  //! Adds to the presentation aPresentation the drawing of the curve aCurve. <br>
//!          The aspect is defined by LineAspect in aDrawer. <br>
//!          If drawCurve equals Standard_False the curve will not be displayed, <br>
//!          it is used if the curve is a part of some shape and PrimitiveArray <br>
//!          visualization approach is activated (it is activated by default). <br>
  Standard_EXPORT   static  void Add(const Handle(Prs3d_Presentation)& aPresentation,const Adaptor3d_Curve& aCurve,const Handle(Prs3d_Drawer)& aDrawer,const Standard_Boolean drawCurve = Standard_True) ;
  //! Adds to the presentation aPresentation the drawing of the curve aCurve. <br>
//!          The aspect is defined by LineAspect in aDrawer. <br>
//!          The drawing will be limited between the points of parameter U1 and U2. <br>
//!          If drawCurve equals Standard_False the curve will not be displayed, <br>
//!          it is used if the curve is a part of some shape and PrimitiveArray <br>
//!          visualization approach is activated (it is activated by default). <br>
  Standard_EXPORT   static  void Add(const Handle(Prs3d_Presentation)& aPresentation,const Adaptor3d_Curve& aCurve,const Standard_Real U1,const Standard_Real U2,const Handle(Prs3d_Drawer)& aDrawer,const Standard_Boolean drawCurve = Standard_True) ;
  //! adds to the presentation aPresentation the drawing of the curve aCurve. <br>
//!          The aspect is the current aspect. <br>
//!          aDeflection is used in the circle case. <br>
//!          Points give a sequence of curve points. <br>
//!          If drawCurve equals Standard_False the curve will not be displayed, <br>
//!          it is used if the curve is a part of some shape and PrimitiveArray <br>
//!          visualization approach is activated (it is activated by default). <br>
  Standard_EXPORT   static  void Add(const Handle(Prs3d_Presentation)& aPresentation,const Adaptor3d_Curve& aCurve,const Quantity_Length aDeflection,const Handle(Prs3d_Drawer)& aDrawer,TColgp_SequenceOfPnt& Points,const Standard_Boolean drawCurve = Standard_True) ;
  //! adds to the presentation aPresentation the drawing of the curve <br>
//!          aCurve. <br>
//!          The aspect is the current aspect. <br>
//!          The drawing will be limited between the points of parameter <br>
//!          U1 and U2. <br>
//!          aDeflection is used in the circle case. <br>
//!          Points give a sequence of curve points. <br>
//!          If drawCurve equals Standard_False the curve will not be displayed, <br>
//!          it is used if the curve is a part of some shape and PrimitiveArray <br>
//!          visualization approach is activated (it is activated by default). <br>
  Standard_EXPORT   static  void Add(const Handle(Prs3d_Presentation)& aPresentation,const Adaptor3d_Curve& aCurve,const Standard_Real U1,const Standard_Real U2,const Quantity_Length aDeflection,TColgp_SequenceOfPnt& Points,const Standard_Integer aNbPoints = 30,const Standard_Boolean drawCurve = Standard_True) ;
  //! returns true if the distance between the point (X,Y,Z) and the <br>
//!          drawing of the curve is less than aDistance. <br>
  Standard_EXPORT   static  Standard_Boolean Match(const Quantity_Length X,const Quantity_Length Y,const Quantity_Length Z,const Quantity_Length aDistance,const Adaptor3d_Curve& aCurve,const Handle(Prs3d_Drawer)& aDrawer) ;
  //! returns true if the distance between the point (X,Y,Z) and the <br>
//!          drawing of the curve is less than aDistance. <br>
  Standard_EXPORT   static  Standard_Boolean Match(const Quantity_Length X,const Quantity_Length Y,const Quantity_Length Z,const Quantity_Length aDistance,const Adaptor3d_Curve& aCurve,const Quantity_Length aDeflection,const Standard_Real aLimit,const Standard_Integer aNbPoints) ;
  //! returns true if the distance between the point (X,Y,Z) and the <br>
//!          drawing of the curve aCurve is less than aDistance. <br>
//!          The drawing is considered between the points <br>
//!          of parameter U1 and U2; <br>
  Standard_EXPORT   static  Standard_Boolean Match(const Quantity_Length X,const Quantity_Length Y,const Quantity_Length Z,const Quantity_Length aDistance,const Adaptor3d_Curve& aCurve,const Standard_Real U1,const Standard_Real U2,const Handle(Prs3d_Drawer)& aDrawer) ;
  //! returns true if the distance between the point (X,Y,Z) and the <br>
//!          drawing of the curve aCurve is less than aDistance. <br>
//!          The drawing is considered between the points <br>
//!          of parameter U1 and U2; <br>
  Standard_EXPORT   static  Standard_Boolean Match(const Quantity_Length X,const Quantity_Length Y,const Quantity_Length Z,const Quantity_Length aDistance,const Adaptor3d_Curve& aCurve,const Standard_Real U1,const Standard_Real U2,const Quantity_Length aDeflection,const Standard_Integer aNbPoints) ;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
