-- Created on: 1992-03-02
-- Created by: Laurent BUCHARD
-- Copyright (c) 1992-1999 Matra Datavision
-- Copyright (c) 1999-2012 OPEN CASCADE SAS
--
-- The content of this file is subject to the Open CASCADE Technology Public
-- License Version 6.5 (the "License"). You may not use the content of this file
-- except in compliance with the License. Please obtain a copy of the License
-- at http://www.opencascade.org and read it completely before using this file.
--
-- The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
-- main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
--
-- The Original Code and all software distributed under the License is
-- distributed on an "AS IS" basis, without warranty of any kind, and the
-- Initial Developer hereby disclaims all such warranties, including without
-- limitation, any warranties of merchantability, fitness for a particular
-- purpose or non-infringement. Please see the License for the specific terms
-- and conditions governing the rights and limitations under the License.




package IntImpParGen


    ---Purpose: Gives a generic algorithm to intersect Implicit Curves
    --          and Bounded Parametric Curves. 
    --      
    --  Level: Internal
    --
    -- All the methods of all the classes are Internal.
    

uses Standard, TColStd, gp, math, IntRes2d, StdFail

is 

    deferred class ImpTool;
    ---Purpose: Template class for an implicit  curve.
    
    deferred generic class ParTool;
    ---Purpose: Template class for a tool on a parameterised curve.
    
    generic class ImpParTool;
    ---Purpose: Math function, instantiated inside the Intersector.

    generic class Intersector,MyImpParTool;
    
    
    ---Purpose: Tool used by the package IntCurve and IntImpParGen
    
    DetermineTransition(Pos1  :          Position    from IntRes2d;
    	                Tan1  : in out   Vec2d       from gp;
			Norm1 :          Vec2d       from gp;
			Trans1: in out   Transition  from IntRes2d;
			Pos2  :          Position    from IntRes2d;
    	                Tan2  : in out   Vec2d       from gp;
			Norm2 :          Vec2d       from gp;
			Trans2: in out   Transition  from IntRes2d;
                        Tol   :          Real        from Standard);
			
    DetermineTransition(Pos1  :          Position    from IntRes2d;
    	                Tan1  : in out   Vec2d       from gp;
			Trans1: in out   Transition  from IntRes2d;
			Pos2  :          Position    from IntRes2d;
    	                Tan2  : in out   Vec2d       from gp;
			Trans2: in out   Transition  from IntRes2d;
                        Tol   :          Real        from Standard)
    returns Boolean from Standard;
			
    DeterminePosition(  Pos1  : in out   Position    from IntRes2d; 
                        Dom1  :          Domain      from IntRes2d;
			P1    :          Pnt2d       from gp;
			Tol   :          Real        from Standard);
			
    NormalizeOnDomain(  Par1  : in out   Real        from Standard;
                        Dom1  :          Domain      from IntRes2d)
			
           returns Real from Standard;
						

end IntImpParGen;

