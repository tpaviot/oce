// Created on: 1992-12-22
// Created by: Remi LEQUETTE
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : Empty constructor
//purpose  : 
//=======================================================================

inline TCollection_Sequence::TCollection_Sequence()
{
}

//=======================================================================
//function : Append 
//purpose  : Appends a Sequence to myself
//=======================================================================
inline void  TCollection_Sequence::Append (TCollection_Sequence& S)
{
  if (FirstItem == S.FirstItem) Assign(S);
  PAppend (S);
}

//=======================================================================
//function : Prepend 
//purpose  : Prepends a Sequence to myself
//=======================================================================
inline void TCollection_Sequence::Prepend (TCollection_Sequence& S)
{
  if (FirstItem == S.FirstItem) Assign(S);
  PPrepend (S);
}
//=======================================================================
//function : InsertBefore
//purpose  : Inserts an item before an index
//=======================================================================
inline void TCollection_Sequence::InsertBefore (const Standard_Integer Index,
						const SeqItem& I)
{
  InsertAfter(Index-1,I);
}

//=======================================================================
//function : InsertBefore
//purpose  : Inserts a Sequence before an index
//=======================================================================
inline void TCollection_Sequence::InsertBefore (const Standard_Integer Index,
					         TCollection_Sequence& S)
{
  InsertAfter(Index-1,S);
}

//=======================================================================
//function : InsertAfter
//purpose  : Inserts a Sequence after an index
//=======================================================================
inline void TCollection_Sequence::InsertAfter (const Standard_Integer Index,
					       TCollection_Sequence& S)
{
  PInsertAfter(Index,S);
}

//=======================================================================
//function : Split
//purpose  : Cuts a Sequence into two
//=======================================================================
inline void TCollection_Sequence::Split (const Standard_Integer Index,
					  TCollection_Sequence& S)
{
  S.Clear();
  PSplit(Index,S);
}







