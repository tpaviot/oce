// Created on: 1993-03-03
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : TCollection_HSet
//purpose  : 
//=======================================================================

TCollection_HSet::TCollection_HSet()
{
}

//=======================================================================
//function : Union
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::Union
       (const Handle(TCollection_HSet)& B) const
{
  Handle(TCollection_HSet) R = new TCollection_HSet();
  R->ChangeSet() = mySet;
  R->ChangeSet().Union(B->Set());
  return R;
}

//=======================================================================
//function : Intersection
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::Intersection
       (const Handle(TCollection_HSet)& B) const
{
  Handle(TCollection_HSet) R = new TCollection_HSet();
  R->ChangeSet() = mySet;
  R->ChangeSet().Intersection(B->Set());
  return R;
}

//=======================================================================
//function : Difference
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::Difference
       (const Handle(TCollection_HSet)& B) const
{
  Handle(TCollection_HSet) R = new TCollection_HSet();
  R->ChangeSet() = mySet;
  R->ChangeSet().Difference(B->Set());
  return R;
}

//=======================================================================
//function : ShallowCopy
//purpose  : 
//=======================================================================

Handle(TCollection_HSet) TCollection_HSet::ShallowCopy() const
{
  Handle(TCollection_HSet) S = new TCollection_HSet();
  S->ChangeSet() = mySet;
  return S;
}

//=======================================================================
//function : IsSameState
//purpose  : 
//=======================================================================

//Standard_Boolean TCollection_HSet::IsSameState
//  (const Handle(TCollection_HSet)& Other) const
//{
//  Handle(TCollection_HSet) S = Handle(TCollection_HSet)::DownCast(Other);
//  Standard_Boolean result = Standard_False;
//  if (!S.IsNull()) {
//    if (S->Extent() == Extent()) {
//      result = IsASubset(S);
//    }
//  }
//  return result;
//}
