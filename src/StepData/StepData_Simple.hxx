// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StepData_Simple_HeaderFile
#define _StepData_Simple_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_StepData_Simple_HeaderFile
#include <Handle_StepData_Simple.hxx>
#endif

#ifndef _StepData_FieldListN_HeaderFile
#include <StepData_FieldListN.hxx>
#endif
#ifndef _StepData_Described_HeaderFile
#include <StepData_Described.hxx>
#endif
#ifndef _Handle_StepData_ESDescr_HeaderFile
#include <Handle_StepData_ESDescr.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Interface_Check_HeaderFile
#include <Handle_Interface_Check.hxx>
#endif
class Interface_InterfaceMismatch;
class StepData_ESDescr;
class StepData_Field;
class StepData_FieldListN;
class Interface_Check;
class Interface_EntityIterator;


//! A Simple Entity is defined by a type (which can heve super <br>
//!           types) and a list of parameters <br>
class StepData_Simple : public StepData_Described {

public:

  //! Creates a Simple Entity <br>
  Standard_EXPORT   StepData_Simple(const Handle(StepData_ESDescr)& descr);
  //! Returns description, as for simple <br>
  Standard_EXPORT     Handle_StepData_ESDescr ESDescr() const;
  //! Returns the recorded StepType (TypeName of its ESDescr) <br>
  Standard_EXPORT     Standard_CString StepType() const;
  //! Returns False <br>
  Standard_EXPORT     Standard_Boolean IsComplex() const;
  //! Tells if a step type is matched by <me> <br>
//!           For a Simple Entity : own type or super type <br>
//!           For a Complex Entity : one of the members <br>
  Standard_EXPORT     Standard_Boolean Matches(const Standard_CString steptype) const;
  //! Returns a Simple Entity which matches with a Type in <me> : <br>
//!           For a Simple Entity : me if it matches, else a null handle <br>
//!           For a Complex Entity : the member which matches, else null <br>
  Standard_EXPORT     Handle_StepData_Simple As(const Standard_CString steptype) const;
  //! Tells if a Field brings a given name <br>
  Standard_EXPORT     Standard_Boolean HasField(const Standard_CString name) const;
  //! Returns a Field from its name; read-only <br>
  Standard_EXPORT    const StepData_Field& Field(const Standard_CString name) const;
  //! Returns a Field from its name; read or write <br>
  Standard_EXPORT     StepData_Field& CField(const Standard_CString name) ;
  //! Returns the count of fields <br>
  Standard_EXPORT     Standard_Integer NbFields() const;
  //! Returns a field from its rank, for read-only use <br>
  Standard_EXPORT    const StepData_Field& FieldNum(const Standard_Integer num) const;
  //! Returns a field from its rank, in order to modify it <br>
  Standard_EXPORT     StepData_Field& CFieldNum(const Standard_Integer num) ;
  //! Returns the entire field list, read-only <br>
  Standard_EXPORT    const StepData_FieldListN& Fields() const;
  //! Returns the entire field list, read or write <br>
  Standard_EXPORT     StepData_FieldListN& CFields() ;
  //! Fills a Check by using its Description <br>
  Standard_EXPORT     void Check(Handle(Interface_Check)& ach) const;
  //! Fills an EntityIterator with entities shared by <me> <br>
  Standard_EXPORT     void Shared(Interface_EntityIterator& list) const;




  DEFINE_STANDARD_RTTI(StepData_Simple)

protected:




private: 


StepData_FieldListN thefields;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
