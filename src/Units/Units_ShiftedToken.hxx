// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Units_ShiftedToken_HeaderFile
#define _Units_ShiftedToken_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Units_ShiftedToken_HeaderFile
#include <Handle_Units_ShiftedToken.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Units_Token_HeaderFile
#include <Units_Token.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Handle_Units_Dimensions_HeaderFile
#include <Handle_Units_Dimensions.hxx>
#endif
#ifndef _Handle_Units_Token_HeaderFile
#include <Handle_Units_Token.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Units_Dimensions;
class Units_Token;


//! The  ShiftedToken class  inherits   from Token and <br>
//!          describes tokens which have  a gap in  addition of <br>
//!          the  multiplicative factor.   This kind  of  token <br>
//!          allows  the  description of linear functions which <br>
//!          do not pass through the origin, of the form : <br>
//! <br>
//!           y = ax  +b <br>
//! <br>
//!          where <x> and  <y>  are the unknown variables, <a> <br>
//!          the mutiplicative factor, and <b> the gap relative <br>
//!          to the ordinate axis. <br>
//! <br>
//!          An example is the  tranlation between the  Celsius <br>
//!          and Fahrenheit degree of temperature. <br>
class Units_ShiftedToken : public Units_Token {

public:

  //! Creates and returns a  shifted   token.  <aword> is  a <br>
//!          string containing the   available word, <amean>  gives <br>
//!          the signification   of the   token,  <avalue> is   the <br>
//!          numeric value  of the  dimension, <amove> is  the gap, <br>
//!          and <adimensions> is  the dimension of the given  word <br>
//!          <aword>. <br>
  Standard_EXPORT   Units_ShiftedToken(const Standard_CString aword,const Standard_CString amean,const Standard_Real avalue,const Standard_Real amove,const Handle(Units_Dimensions)& adimensions);
  //! Creates and returns a  token, which is a ShiftedToken. <br>
  Standard_EXPORT   virtual  Handle_Units_Token Creates() const;
  //! Returns the gap <themove> <br>
  Standard_EXPORT     Standard_Real Move() const;
  //! This  virtual   method  is  called  by the Measurement <br>
//!          methods,  to   compute  the   measurement    during  a <br>
//!          conversion. <br>
  Standard_EXPORT   virtual  Standard_Real Multiplied(const Standard_Real avalue) const;
  //! This   virtual  method is  called  by  the Measurement <br>
//!          methods,   to   compute   the   measurement   during a <br>
//!          conversion. <br>
  Standard_EXPORT   virtual  Standard_Real Divided(const Standard_Real avalue) const;
  //! Destroies the Token <br>
  Standard_EXPORT   virtual  void Destroy() ;
~Units_ShiftedToken()
{
  Destroy();
}
  
  Standard_EXPORT   virtual  void Dump(const Standard_Integer ashift,const Standard_Integer alevel) const;



  DEFINE_STANDARD_RTTI(Units_ShiftedToken)

protected:




private: 


Standard_Real themove;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
