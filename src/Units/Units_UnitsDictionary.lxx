// Created on: 1992-06-24
// Created by: Gilles DEBARBOUILLE
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



#include <Units_QuantitiesSequence.hxx>
#include <Units_Quantity.hxx>
#include <Units_Explorer.hxx>

//=======================================================================
//function : Sequence
//purpose  : 
//=======================================================================

inline Handle(Units_QuantitiesSequence) Units_UnitsDictionary::Sequence() const
{
  return thequantitiessequence;
}

//=======================================================================
//function : Dump
//purpose  : 
//=======================================================================

inline void Units_UnitsDictionary::Dump(const Standard_Integer alevel) const
{
  Standard_Integer index;
  switch (alevel) {
  case 2: 
    if( !thequantitiessequence.IsNull() ) {
      for(index=1;index<=thequantitiessequence->Length();index++)
        thequantitiessequence->Value(index)->Dump(0,1);
    }
    break;
    
  case 1:
  default:
    Units_Explorer explorer(this);
    cout<<" UNITS DICTIONARY : "<<endl;
    for(;explorer.MoreQuantity();explorer.NextQuantity())
      {
	cout<<explorer.Quantity()<<endl;;
	for(; explorer.MoreUnit(); explorer.NextUnit())
	  cout<<"  "<<explorer.Unit()<<endl;
      }

  
  }
}
//=======================================================================
//function : Dump
//purpose  : 
//=======================================================================

inline void Units_UnitsDictionary::Dump(const Handle(Units_Dimensions)& adimensions) const
{
  Standard_Integer index;
  for(index=1;index<=thequantitiessequence->Length();index++)
    {
      if(thequantitiessequence->Value(index)->Dimensions()->IsEqual(adimensions))
	thequantitiessequence->Value(index)->Dump(0,1);
    }
}

