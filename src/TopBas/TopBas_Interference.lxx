// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : Intersection
//purpose  : 
//=======================================================================

inline void TopBas_Interference::Intersection(const TheSubShape& I)
{
  myIntersection = I;
}

//=======================================================================
//function : Boundary
//purpose  : 
//=======================================================================

inline void TopBas_Interference::Boundary(const TheShape& B)
{
  myBoundary = B;
}

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline void TopBas_Interference::Orientation(const TopAbs_Orientation Or)
{
  myOrientation = Or;
}

//=======================================================================
//function : Transition
//purpose  : 
//=======================================================================

inline void TopBas_Interference::Transition(const TopAbs_Orientation Or)
{
  myTransition = Or;
}

//=======================================================================
//function : BoundaryTransition
//purpose  : 
//=======================================================================

inline void TopBas_Interference::BoundaryTransition
  (const TopAbs_Orientation Or)
{
  myBTransition = Or;
}

//=======================================================================
//function : Intersection
//purpose  : 
//=======================================================================

inline const TheSubShape& TopBas_Interference::Intersection() const
{
  return myIntersection;
}

//=======================================================================
//function : ChangeIntersection
//purpose  : 
//=======================================================================

inline TheSubShape& TopBas_Interference::ChangeIntersection()
{
  return myIntersection;
}

//=======================================================================
//function : Boundary
//purpose  : 
//=======================================================================

inline const TheShape& TopBas_Interference::Boundary() const 
{
  return myBoundary;
}

//=======================================================================
//function : ChangeBoundary
//purpose  : 
//=======================================================================

inline TheShape& TopBas_Interference::ChangeBoundary() 
{
  return myBoundary;
}

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation TopBas_Interference::Orientation() const
{
  return myOrientation;
}

//=======================================================================
//function : Transition
//purpose  : 
//=======================================================================

inline TopAbs_Orientation TopBas_Interference::Transition() const
{
  return myTransition;
}

//=======================================================================
//function : BoundaryTransition
//purpose  : 
//=======================================================================

inline TopAbs_Orientation TopBas_Interference::BoundaryTransition() const
{
  return myBTransition;
}
