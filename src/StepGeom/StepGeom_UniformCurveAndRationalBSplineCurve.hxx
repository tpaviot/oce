// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StepGeom_UniformCurveAndRationalBSplineCurve_HeaderFile
#define _StepGeom_UniformCurveAndRationalBSplineCurve_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_StepGeom_UniformCurveAndRationalBSplineCurve_HeaderFile
#include <Handle_StepGeom_UniformCurveAndRationalBSplineCurve.hxx>
#endif

#ifndef _Handle_StepGeom_UniformCurve_HeaderFile
#include <Handle_StepGeom_UniformCurve.hxx>
#endif
#ifndef _Handle_StepGeom_RationalBSplineCurve_HeaderFile
#include <Handle_StepGeom_RationalBSplineCurve.hxx>
#endif
#ifndef _StepGeom_BSplineCurve_HeaderFile
#include <StepGeom_BSplineCurve.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_StepGeom_HArray1OfCartesianPoint_HeaderFile
#include <Handle_StepGeom_HArray1OfCartesianPoint.hxx>
#endif
#ifndef _StepGeom_BSplineCurveForm_HeaderFile
#include <StepGeom_BSplineCurveForm.hxx>
#endif
#ifndef _StepData_Logical_HeaderFile
#include <StepData_Logical.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfReal_HeaderFile
#include <Handle_TColStd_HArray1OfReal.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class StepGeom_UniformCurve;
class StepGeom_RationalBSplineCurve;
class TCollection_HAsciiString;
class StepGeom_HArray1OfCartesianPoint;
class TColStd_HArray1OfReal;



class StepGeom_UniformCurveAndRationalBSplineCurve : public StepGeom_BSplineCurve {

public:

  //! Returns a UniformCurveAndRationalBSplineCurve <br>
  Standard_EXPORT   StepGeom_UniformCurveAndRationalBSplineCurve();
  
  Standard_EXPORT   virtual  void Init(const Handle(TCollection_HAsciiString)& aName,const Standard_Integer aDegree,const Handle(StepGeom_HArray1OfCartesianPoint)& aControlPointsList,const StepGeom_BSplineCurveForm aCurveForm,const StepData_Logical aClosedCurve,const StepData_Logical aSelfIntersect) ;
  
  Standard_EXPORT   virtual  void Init(const Handle(TCollection_HAsciiString)& aName,const Standard_Integer aDegree,const Handle(StepGeom_HArray1OfCartesianPoint)& aControlPointsList,const StepGeom_BSplineCurveForm aCurveForm,const StepData_Logical aClosedCurve,const StepData_Logical aSelfIntersect,const Handle(StepGeom_UniformCurve)& aUniformCurve,const Handle(StepGeom_RationalBSplineCurve)& aRationalBSplineCurve) ;
  
  Standard_EXPORT   virtual  void Init(const Handle(TCollection_HAsciiString)& aName,const Standard_Integer aDegree,const Handle(StepGeom_HArray1OfCartesianPoint)& aControlPointsList,const StepGeom_BSplineCurveForm aCurveForm,const StepData_Logical aClosedCurve,const StepData_Logical aSelfIntersect,const Handle(TColStd_HArray1OfReal)& aWeightsData) ;
  
  Standard_EXPORT     void SetUniformCurve(const Handle(StepGeom_UniformCurve)& aUniformCurve) ;
  
  Standard_EXPORT     Handle_StepGeom_UniformCurve UniformCurve() const;
  
  Standard_EXPORT     void SetRationalBSplineCurve(const Handle(StepGeom_RationalBSplineCurve)& aRationalBSplineCurve) ;
  
  Standard_EXPORT     Handle_StepGeom_RationalBSplineCurve RationalBSplineCurve() const;
  
  Standard_EXPORT     void SetWeightsData(const Handle(TColStd_HArray1OfReal)& aWeightsData) ;
  
  Standard_EXPORT     Handle_TColStd_HArray1OfReal WeightsData() const;
  
  Standard_EXPORT     Standard_Real WeightsDataValue(const Standard_Integer num) const;
  
  Standard_EXPORT     Standard_Integer NbWeightsData() const;




  DEFINE_STANDARD_RTTI(StepGeom_UniformCurveAndRationalBSplineCurve)

protected:




private: 


Handle_StepGeom_UniformCurve uniformCurve;
Handle_StepGeom_RationalBSplineCurve rationalBSplineCurve;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
