// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _StdSelect_ViewerSelector3d_HeaderFile
#define _StdSelect_ViewerSelector3d_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_StdSelect_ViewerSelector3d_HeaderFile
#include <Handle_StdSelect_ViewerSelector3d.hxx>
#endif

#ifndef _Handle_Select3D_Projector_HeaderFile
#include <Handle_Select3D_Projector.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _StdSelect_SensitivityMode_HeaderFile
#include <StdSelect_SensitivityMode.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Graphic3d_Group_HeaderFile
#include <Handle_Graphic3d_Group.hxx>
#endif
#ifndef _Handle_Graphic3d_Structure_HeaderFile
#include <Handle_Graphic3d_Structure.hxx>
#endif
#ifndef _SelectMgr_ViewerSelector_HeaderFile
#include <SelectMgr_ViewerSelector.hxx>
#endif
#ifndef _Handle_SelectMgr_Selection_HeaderFile
#include <Handle_SelectMgr_Selection.hxx>
#endif
#ifndef _Handle_V3d_View_HeaderFile
#include <Handle_V3d_View.hxx>
#endif
class Select3D_Projector;
class Graphic3d_Group;
class Graphic3d_Structure;
class SelectMgr_Selection;
class V3d_View;
class TColgp_Array1OfPnt2d;


//! Selector Usable by Viewers from V3d <br>
//! <br>
class StdSelect_ViewerSelector3d : public SelectMgr_ViewerSelector {

public:

  //! Constructs an empty 3D selector object. <br>
  Standard_EXPORT   StdSelect_ViewerSelector3d();
  //! Constructs a 3D selector object defined by the projector aProj. <br>
  Standard_EXPORT   StdSelect_ViewerSelector3d(const Handle(Select3D_Projector)& aProj);
  //! Processes the projection of the sensitive  primitives <br>
//!          in the active view ; to be done before the selection action... <br>
  Standard_EXPORT     void Convert(const Handle(SelectMgr_Selection)& aSelection) ;
  //! Sets the new projector aProj to replace the one used at construction time. <br>
  Standard_EXPORT     void Set(const Handle(Select3D_Projector)& aProj) ;
  //! Sets the selection sensitivity mode. SM_WINDOW mode <br>
//! uses the specified pixel tolerance to compute the sensitivity <br>
//! value, SM_VIEW mode allows to define the sensitivity manually. <br>
  Standard_EXPORT     void SetSensitivityMode(const StdSelect_SensitivityMode aMode) ;
  //! Returns the selection sensitivity mode. <br>
        StdSelect_SensitivityMode SensitivityMode() const;
  //! Sets the pixel tolerance aTolerance. <br>
  Standard_EXPORT     void SetPixelTolerance(const Standard_Integer aTolerance) ;
  //! Returns the pixel tolerance. <br>
        Standard_Integer PixelTolerance() const;
  //! Picks the sensitive entity at the pixel coordinates of <br>
//! the mouse Xpix and Ypix.   The selector looks for touched areas and owners. <br>
  Standard_EXPORT     void Pick(const Standard_Integer XPix,const Standard_Integer YPix,const Handle(V3d_View)& aView) ;
  //! Picks the sensitive entity according to the minimum <br>
//! and maximum pixel values XPMin, YPMin, XPMax <br>
//! and YPMax   defining a 2D area for selection in the 3D view aView. <br>
  Standard_EXPORT     void Pick(const Standard_Integer XPMin,const Standard_Integer YPMin,const Standard_Integer XPMax,const Standard_Integer YPMax,const Handle(V3d_View)& aView) ;
  //! pick action  - input pixel values for polyline selection for selection. <br>
  Standard_EXPORT     void Pick(const TColgp_Array1OfPnt2d& Polyline,const Handle(V3d_View)& aView) ;
  //! Returns the current Projector. <br>
       const Handle_Select3D_Projector& Projector() const;
  //! Puts back the address of the current projector in sensitive primitives... <br>
  Standard_EXPORT     void ReactivateProjector() ;
  //! Displays sensitive areas found in the view aView. <br>
  Standard_EXPORT     void DisplayAreas(const Handle(V3d_View)& aView) ;
  //! Clears the view aView of sensitive areas found in it. <br>
  Standard_EXPORT     void ClearAreas(const Handle(V3d_View)& aView) ;
  //! Displays the selection aSel found in the view aView. <br>
  Standard_EXPORT     void DisplaySensitive(const Handle(V3d_View)& aView) ;
  
  Standard_EXPORT     void ClearSensitive(const Handle(V3d_View)& aView) ;
  
  Standard_EXPORT     void DisplaySensitive(const Handle(SelectMgr_Selection)& aSel,const Handle(V3d_View)& aView,const Standard_Boolean ClearOthers = Standard_True) ;
  
  Standard_EXPORT     void DisplayAreas(const Handle(SelectMgr_Selection)& aSel,const Handle(V3d_View)& aView,const Standard_Boolean ClearOthers = Standard_True) ;




  DEFINE_STANDARD_RTTI(StdSelect_ViewerSelector3d)

protected:




private: 

  
  Standard_EXPORT     Standard_Boolean UpdateProj(const Handle(V3d_View)& aView) ;
  
  Standard_EXPORT     void ComputeSensitivePrs(const Handle(SelectMgr_Selection)& aSel) ;
  
  Standard_EXPORT     void ComputeAreasPrs(const Handle(SelectMgr_Selection)& aSel) ;

Handle_Select3D_Projector myprj;
Standard_Real mycoeff[14];
Standard_Real myprevcoeff[14];
Standard_Real mycenter[2];
Standard_Real myprevcenter[2];
Standard_Real mylastzoom;
StdSelect_SensitivityMode mysensmode;
Standard_Integer mypixtol;
Standard_Boolean myupdatetol;
Handle_Graphic3d_Group myareagroup;
Handle_Graphic3d_Group mysensgroup;
Handle_Graphic3d_Structure mystruct;


};


#include <StdSelect_ViewerSelector3d.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
