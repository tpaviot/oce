// Created on: 1993-07-15
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
//function : Face
//purpose  : 
//=======================================================================

inline const TopoDS_Face&  DBRep_Face::Face()const 
{
  return myFace;
}


//=======================================================================
//function : Face
//purpose  : 
//=======================================================================

 inline void  DBRep_Face::Face(const TopoDS_Face& F)
{
  myFace = F;
}


//=======================================================================
//function : NbIsos
//purpose  : 
//=======================================================================

 inline Standard_Integer  DBRep_Face::NbIsos()const 
{
  return myTypes.Upper();
}


//=======================================================================
//function : Iso
//purpose  : 
//=======================================================================

 inline void  DBRep_Face::Iso(const Standard_Integer I, 
			      const GeomAbs_IsoType T, 
			      const Standard_Real Par, 
			      const Standard_Real T1, 
			      const Standard_Real T2)
{
  myTypes(I) = (Standard_Integer) T;
  myParams(3*I - 2) = Par;
  myParams(3*I - 1) = T1;
  myParams(3*I)     = T2;
}


//=======================================================================
//function : GetIso
//purpose  : 
//=======================================================================

 inline void  DBRep_Face::GetIso(const Standard_Integer I, 
				 GeomAbs_IsoType& T, 
				 Standard_Real& Par, 
				 Standard_Real& T1, 
				 Standard_Real& T2)const 
{
//JR/Hp :
  Standard_Integer IntTyp = myTypes(I);
  T   =  (GeomAbs_IsoType) IntTyp ;
//  T   =  (GeomAbs_IsoType) myTypes(I);
  Par =  myParams(3*I - 2);
  T1  =  myParams(3*I - 1);
  T2  =  myParams(3*I);                  
}



//=======================================================================
//function : Color
//purpose  : 
//=======================================================================

 inline const Draw_Color&  DBRep_Face::Color()const 
{
  return myColor;
}


//=======================================================================
//function : Color
//purpose  : 
//=======================================================================

 inline void  DBRep_Face::Color(const Draw_Color& C)
{
  myColor = C;
}


