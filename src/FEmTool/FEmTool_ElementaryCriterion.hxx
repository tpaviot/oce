// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _FEmTool_ElementaryCriterion_HeaderFile
#define _FEmTool_ElementaryCriterion_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_FEmTool_ElementaryCriterion_HeaderFile
#include <Handle_FEmTool_ElementaryCriterion.hxx>
#endif

#ifndef _Handle_TColStd_HArray2OfReal_HeaderFile
#include <Handle_TColStd_HArray2OfReal.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_TColStd_HArray2OfInteger_HeaderFile
#include <Handle_TColStd_HArray2OfInteger.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class TColStd_HArray2OfReal;
class Standard_NotImplemented;
class Standard_DomainError;
class TColStd_HArray2OfInteger;
class math_Matrix;
class math_Vector;


//!  defined J Criteria to used in minimisation <br>
class FEmTool_ElementaryCriterion : public MMgt_TShared {

public:

  //! Set the coefficient of the Element (the  Curve) <br>
  Standard_EXPORT     void Set(const Handle(TColStd_HArray2OfReal)& Coeff) ;
  //! Set the definition interval of the Element <br>
  Standard_EXPORT   virtual  void Set(const Standard_Real FirstKnot,const Standard_Real LastKnot) ;
  //! To know if two dimension are independent. <br>
  Standard_EXPORT   virtual  Handle_TColStd_HArray2OfInteger DependenceTable() const = 0;
  //! To Compute J(E) where E  is the current Element <br>
  Standard_EXPORT   virtual  Standard_Real Value()  = 0;
  //! To Compute J(E)  the coefficients of Hessian matrix of <br>
//!          J(E) wich are crossed derivatives in dimensions <Dim1> <br>
//!          and  <Dim2>. <br>
//! If DependenceTable(Dimension1,Dimension2) is False <br>
  Standard_EXPORT   virtual  void Hessian(const Standard_Integer Dim1,const Standard_Integer Dim2,math_Matrix& H)  = 0;
  //! To Compute the  coefficients in the dimension <dim> <br>
//!          of  the  J(E)'s  Gradient where E  is  the current  Element <br>
  Standard_EXPORT   virtual  void Gradient(const Standard_Integer Dim,math_Vector& G)  = 0;




  DEFINE_STANDARD_RTTI(FEmTool_ElementaryCriterion)

protected:


Handle_TColStd_HArray2OfReal myCoeff;
Standard_Real myFirst;
Standard_Real myLast;


private: 




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
