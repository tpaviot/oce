// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESDimen_DimensionDisplayData_HeaderFile
#define _IGESDimen_DimensionDisplayData_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESDimen_DimensionDisplayData_HeaderFile
#include <Handle_IGESDimen_DimensionDisplayData.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfInteger_HeaderFile
#include <Handle_TColStd_HArray1OfInteger.hxx>
#endif
#ifndef _IGESData_IGESEntity_HeaderFile
#include <IGESData_IGESEntity.hxx>
#endif
class TCollection_HAsciiString;
class TColStd_HArray1OfInteger;
class Standard_DimensionMismatch;
class Standard_OutOfRange;


//! Defines IGES Dimension Display Data, Type <406> Form <30>, <br>
//!          in package IGESDimen <br>
//!          The Dimensional Display Data Property is optional but when <br>
//!          present must be referenced by a dimension entity. <br>
//!          The information it contains could be extracted from the text, <br>
//!          leader and witness line data with difficulty. <br>
class IGESDimen_DimensionDisplayData : public IGESData_IGESEntity {

public:

  
  Standard_EXPORT   IGESDimen_DimensionDisplayData();
  
  Standard_EXPORT     void Init(const Standard_Integer numProps,const Standard_Integer aDimType,const Standard_Integer aLabelPos,const Standard_Integer aCharSet,const Handle(TCollection_HAsciiString)& aString,const Standard_Integer aSymbol,const Standard_Real anAng,const Standard_Integer anAlign,const Standard_Integer aLevel,const Standard_Integer aPlace,const Standard_Integer anOrient,const Standard_Real initVal,const Handle(TColStd_HArray1OfInteger)& notes,const Handle(TColStd_HArray1OfInteger)& startInd,const Handle(TColStd_HArray1OfInteger)& endInd) ;
  //! returns the number of property values (14) <br>
  Standard_EXPORT     Standard_Integer NbPropertyValues() const;
  //! returns the dimension type <br>
  Standard_EXPORT     Standard_Integer DimensionType() const;
  //! returns the preferred label position <br>
  Standard_EXPORT     Standard_Integer LabelPosition() const;
  //! returns the character set interpretation <br>
  Standard_EXPORT     Standard_Integer CharacterSet() const;
  //! returns e.g., 8HDIAMETER <br>
  Standard_EXPORT     Handle_TCollection_HAsciiString LString() const;
  
  Standard_EXPORT     Standard_Integer DecimalSymbol() const;
  //! returns the witness line angle in radians <br>
  Standard_EXPORT     Standard_Real WitnessLineAngle() const;
  //! returns the text alignment <br>
  Standard_EXPORT     Standard_Integer TextAlignment() const;
  //! returns the text level <br>
  Standard_EXPORT     Standard_Integer TextLevel() const;
  //! returns the preferred text placement <br>
  Standard_EXPORT     Standard_Integer TextPlacement() const;
  //! returns the arrowhead orientation <br>
  Standard_EXPORT     Standard_Integer ArrowHeadOrientation() const;
  //! returns the primary dimension initial value <br>
  Standard_EXPORT     Standard_Real InitialValue() const;
  //! returns the number of supplementary notes or zero <br>
  Standard_EXPORT     Standard_Integer NbSupplementaryNotes() const;
  //! returns the Index'th supplementary note <br>
//! raises exception if Index <= 0 or Index > NbSupplementaryNotes() <br>
  Standard_EXPORT     Standard_Integer SupplementaryNote(const Standard_Integer Index) const;
  //! returns the Index'th note start index <br>
//! raises exception if Index <= 0 or Index > NbSupplementaryNotes() <br>
  Standard_EXPORT     Standard_Integer StartIndex(const Standard_Integer Index) const;
  //! returns the Index'th note end index <br>
//! raises exception if Index <= 0 or Index > NbSupplemetaryNotes() <br>
  Standard_EXPORT     Standard_Integer EndIndex(const Standard_Integer Index) const;




  DEFINE_STANDARD_RTTI(IGESDimen_DimensionDisplayData)

protected:




private: 


Standard_Integer theNbPropertyValues;
Standard_Integer theDimensionType;
Standard_Integer theLabelPosition;
Standard_Integer theCharacterSet;
Handle_TCollection_HAsciiString theLString;
Standard_Integer theDecimalSymbol;
Standard_Real theWitnessLineAngle;
Standard_Integer theTextAlignment;
Standard_Integer theTextLevel;
Standard_Integer theTextPlacement;
Standard_Integer theArrowHeadOrientation;
Standard_Real theInitialValue;
Handle_TColStd_HArray1OfInteger theSupplementaryNotes;
Handle_TColStd_HArray1OfInteger theStartIndex;
Handle_TColStd_HArray1OfInteger theEndIndex;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
