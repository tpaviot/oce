// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GeomFill_BoundWithSurf_HeaderFile
#define _GeomFill_BoundWithSurf_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_GeomFill_BoundWithSurf_HeaderFile
#include <Handle_GeomFill_BoundWithSurf.hxx>
#endif

#ifndef _Adaptor3d_CurveOnSurface_HeaderFile
#include <Adaptor3d_CurveOnSurface.hxx>
#endif
#ifndef _Handle_Law_Function_HeaderFile
#include <Handle_Law_Function.hxx>
#endif
#ifndef _GeomFill_Boundary_HeaderFile
#include <GeomFill_Boundary.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Law_Function;
class Adaptor3d_CurveOnSurface;
class gp_Pnt;
class gp_Vec;


//! Defines a 3d curve as a boundary for a <br>
//! GeomFill_ConstrainedFilling algorithm. <br>
//! This curve is attached to an existing surface. <br>
//!  Defines a  constrained boundary for  filling <br>
//!          the computations are done with a CurveOnSurf and a <br>
//!          normals field  defined by the normalized normal to <br>
//!          the surface along the PCurve. <br>
class GeomFill_BoundWithSurf : public GeomFill_Boundary {

public:

  
//! Constructs a boundary object defined by the 3d curve CurveOnSurf. <br>
//! The surface to be filled along this boundary will be in the <br>
//! tolerance range defined by Tol3d. <br>
//! What's more, at each point of CurveOnSurf, the angle <br>
//! between the normal to the surface to be filled along this <br>
//! boundary, and the normal to the surface on which <br>
//! CurveOnSurf lies, must not be greater than TolAng. <br>
//! This object is to be used as a boundary for a <br>
//! GeomFill_ConstrainedFilling framework. <br>
//! Warning <br>
//! CurveOnSurf is an adapted curve, that is, an object <br>
//! which is an interface between: <br>
//! -   the services provided by a curve lying on a surface from the package Geom <br>
//! -   and those required of the curve by the computation algorithm which uses it. <br>
//! The adapted curve is created in the following way: <br>
//! Handle(Geom_Surface) mySurface = ... ; <br>
//! Handle(Geom2d_Curve) myParamCurve = ... ; <br>
//! // where myParamCurve is a 2D curve in the parametric space of the surface mySurface <br>
//! Handle(GeomAdaptor_HSurface) <br>
//!    Surface = new <br>
//! GeomAdaptor_HSurface(mySurface); <br>
//! Handle(Geom2dAdaptor_HCurve) <br>
//!    ParamCurve = new <br>
//! Geom2dAdaptor_HCurve(myParamCurve); <br>
//! CurveOnSurf = Adaptor3d_CurveOnSurface(ParamCurve,Surface); <br>
//! The boundary is then constructed with the CurveOnSurf object: <br>
//! Standard_Real Tol = ... ; <br>
//! Standard_Real TolAng = ... ; <br>
//! myBoundary =  GeomFill_BoundWithSurf ( <br>
//! CurveOnSurf, Tol, TolAng ); <br>
  Standard_EXPORT   GeomFill_BoundWithSurf(const Adaptor3d_CurveOnSurface& CurveOnSurf,const Standard_Real Tol3d,const Standard_Real Tolang);
  
  Standard_EXPORT     gp_Pnt Value(const Standard_Real U) const;
  
  Standard_EXPORT     void D1(const Standard_Real U,gp_Pnt& P,gp_Vec& V) const;
  
  Standard_EXPORT   virtual  Standard_Boolean HasNormals() const;
  
  Standard_EXPORT   virtual  gp_Vec Norm(const Standard_Real U) const;
  
  Standard_EXPORT   virtual  void D1Norm(const Standard_Real U,gp_Vec& N,gp_Vec& DN) const;
  
  Standard_EXPORT     void Reparametrize(const Standard_Real First,const Standard_Real Last,const Standard_Boolean HasDF,const Standard_Boolean HasDL,const Standard_Real DF,const Standard_Real DL,const Standard_Boolean Rev) ;
  
  Standard_EXPORT     void Bounds(Standard_Real& First,Standard_Real& Last) const;
  
  Standard_EXPORT     Standard_Boolean IsDegenerated() const;




  DEFINE_STANDARD_RTTI(GeomFill_BoundWithSurf)

protected:




private: 


Adaptor3d_CurveOnSurface myConS;
Handle_Law_Function myPar;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
