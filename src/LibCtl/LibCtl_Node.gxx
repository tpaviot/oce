// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//#include <LibCtl_Node.ixx>


//  Classe generique imbriquee dans Library : utilisee pour construire la
//  listes de Modules d une librairie  (cf Library pour plus de details)
//  (En fait : Liste de Global Nodes -> Module + Protocol)

LibCtl_Node::LibCtl_Node ()    {  }

    void LibCtl_Node::AddNode (const Handle(LibCtl_GlobalNode)& anode)
{
  if (thenode == anode) return;
  if (thenext.IsNull()) {
    if (thenode.IsNull()) thenode = anode;
    else {
      thenext = new LibCtl_Node;
      thenext->AddNode (anode);
    }
  }
  else thenext->AddNode (anode);
}


    const Handle(TheModule)&   LibCtl_Node::Module () const
      {  return thenode->Module();  }

    const Handle(TheProtocol)& LibCtl_Node::Protocol () const
      {  return thenode->Protocol();  }

    const Handle(LibCtl_Node)& LibCtl_Node::Next () const
      {  return thenext;  }
