// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//#include <LibCtl_GlobalNode.ixx>

//  Classe generique imbriquee dans Library : utilisee pour construire les
//  listes globales de Modules attaches a une classe instanciee de Library
//  (cf Library pour plus de details)


LibCtl_GlobalNode::LibCtl_GlobalNode ()    {  }

// ATTENTION, Add agit en substitution : pour un Protocol donne, c est le
//   dernier appel qui l emporte
    void LibCtl_GlobalNode::Add
  (const Handle(TheModule)& amodule, const Handle(TheProtocol)& aprotocol)
{
  if (themod == amodule) return;
  if (theprot == aprotocol) themod = amodule;
  else if (thenext.IsNull()) {
    if (themod.IsNull()) {  themod = amodule;   theprot = aprotocol;  }
    else {
      thenext = new LibCtl_GlobalNode;
      thenext->Add (amodule,aprotocol);
    }
  }
  else thenext->Add (amodule,aprotocol);
}

    const Handle(TheModule)& LibCtl_GlobalNode::Module () const
      {  return themod;  }

    const Handle(TheProtocol)& LibCtl_GlobalNode::Protocol () const
      {  return theprot;  }

    const Handle(LibCtl_GlobalNode)& LibCtl_GlobalNode::Next () const
      {  return thenext;  }
