// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Select2D_SensitivePoint_HeaderFile
#define _Select2D_SensitivePoint_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Select2D_SensitivePoint_HeaderFile
#include <Handle_Select2D_SensitivePoint.hxx>
#endif

#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Select2D_SensitiveEntity_HeaderFile
#include <Select2D_SensitiveEntity.hxx>
#endif
#ifndef _Handle_SelectBasics_EntityOwner_HeaderFile
#include <Handle_SelectBasics_EntityOwner.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class SelectBasics_EntityOwner;
class gp_Pnt2d;
class SelectBasics_ListOfBox2d;


//! A framework to define sensitive 2D points. <br>
class Select2D_SensitivePoint : public Select2D_SensitiveEntity {

public:

  //! Constructs the sensitive point object defined by the <br>
//! owner OwnerId, the point Location and the sensitivity InitSensitivity. <br>
//! InitSensitivity allows choice of dimensions in the <br>
//! selectable box around the sensitive point. It is <br>
//! initialized with a null value, and is given a working one by Set. <br>
  Standard_EXPORT   Select2D_SensitivePoint(const Handle(SelectBasics_EntityOwner)& OwnerId,const gp_Pnt2d& Location,const Standard_Real InitSensitivity = 0);
  //! Sets the sensitivity aSensitivity for sensitive <br>
//! primitives to find owners of points. <br>
  Standard_EXPORT     void Set(const Standard_Real aSensitivity) ;
  //! Returns the 2Dbox around the point (this box) has to be enlarged (sensitivity = 0) <br>
  Standard_EXPORT     void Areas(SelectBasics_ListOfBox2d& aresul) ;
  //! returns the original point. <br>
       const gp_Pnt2d& Location() const;
  //! if distance between P <br>
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real X,const Standard_Real Y,const Standard_Real aTol,Standard_Real& DMin) ;
  
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real XMin,const Standard_Real YMin,const Standard_Real XMax,const Standard_Real YMax,const Standard_Real aTol) ;




  DEFINE_STANDARD_RTTI(Select2D_SensitivePoint)

protected:




private: 


gp_Pnt2d mylocation;
Standard_Real mysensitivity;


};


#include <Select2D_SensitivePoint.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
