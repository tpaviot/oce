// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Select2D_SensitiveArc_HeaderFile
#define _Select2D_SensitiveArc_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Select2D_SensitiveArc_HeaderFile
#include <Handle_Select2D_SensitiveArc.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _gp_Ax2d_HeaderFile
#include <gp_Ax2d.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Select2D_SensitiveEntity_HeaderFile
#include <Select2D_SensitiveEntity.hxx>
#endif
#ifndef _Handle_SelectBasics_EntityOwner_HeaderFile
#include <Handle_SelectBasics_EntityOwner.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class SelectBasics_EntityOwner;
class gp_Ax2d;
class SelectBasics_ListOfBox2d;


//! sensitive Areas for an Arc Of Circle <br>
//!          One gives Radius and center,and limits. <br>
//!          or a geometric circle. <br>
class Select2D_SensitiveArc : public Select2D_SensitiveEntity {

public:

  //! Constructs a 2D sensitive arc object defined by the <br>
//! owner OwnerId, the axis of origin OriginAxis, the <br>
//! angle Angle, the radius Radius, and the maximum <br>
//! number of points MaxPoints. <br>
//! <br>
//!               _. <br>
//!       \ angle /| <br>
//!        \_____/ <br>
//!         \   /  direction <br>
//!          \ / <br>
//!	         * <br>
  Standard_EXPORT   Select2D_SensitiveArc(const Handle(SelectBasics_EntityOwner)& OwnerId,const gp_Ax2d& OriginAxis,const Standard_Real Angle,const Standard_Real Radius,const Standard_Integer MaxPoints = 9);
  //! returns the sensitive areas for a circle... <br>
  Standard_EXPORT     void Areas(SelectBasics_ListOfBox2d& aresul) ;
  //! returns true if the minimum distance DMin <br>
//!          between the postion x,y and the circle is less than aTol.. <br>
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real X,const Standard_Real Y,const Standard_Real aTol,Standard_Real& DMin) ;
  
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real XMin,const Standard_Real YMin,const Standard_Real XMax,const Standard_Real YMax,const Standard_Real aTol) ;




  DEFINE_STANDARD_RTTI(Select2D_SensitiveArc)

protected:




private: 


Standard_Real myradius;
gp_Ax2d myax2d;
Standard_Real myangle;
Standard_Integer mynbpt;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
