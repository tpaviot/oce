// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Select2D_SensitiveCircle_HeaderFile
#define _Select2D_SensitiveCircle_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Select2D_SensitiveCircle_HeaderFile
#include <Handle_Select2D_SensitiveCircle.hxx>
#endif

#ifndef _gp_Circ2d_HeaderFile
#include <gp_Circ2d.hxx>
#endif
#ifndef _Select2D_TypeOfSelection_HeaderFile
#include <Select2D_TypeOfSelection.hxx>
#endif
#ifndef _Select2D_SensitiveEntity_HeaderFile
#include <Select2D_SensitiveEntity.hxx>
#endif
#ifndef _Handle_SelectBasics_EntityOwner_HeaderFile
#include <Handle_SelectBasics_EntityOwner.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class SelectBasics_EntityOwner;
class gp_Circ2d;
class SelectBasics_ListOfBox2d;


//! A framework to define sensitive Areas for a Circle <br>
//!           Radius and center, or a geometric circle is given. <br>
class Select2D_SensitiveCircle : public Select2D_SensitiveEntity {

public:

  //! Constructs a sensitive circle object defined by the <br>
//! owner OwnerId, the circle Circle, and the selection type Type. <br>
//! Type can be: <br>
//! -   interior <br>
//! -   boundary. <br>
  Standard_EXPORT   Select2D_SensitiveCircle(const Handle(SelectBasics_EntityOwner)& OwnerId,const gp_Circ2d& TheCirc,const Select2D_TypeOfSelection TheType = Select2D_TOS_BOUNDARY);
  //! returns the sensitive areas for a circle... <br>
  Standard_EXPORT     void Areas(SelectBasics_ListOfBox2d& aresul) ;
  //! Returns true if the minimum distance DMin <br>
//!          between the postion x,y and the circle is less than aTol.. <br>
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real X,const Standard_Real Y,const Standard_Real aTol,Standard_Real& DMin) ;
  
  Standard_EXPORT     Standard_Boolean Matches(const Standard_Real XMin,const Standard_Real YMin,const Standard_Real XMax,const Standard_Real YMax,const Standard_Real aTol) ;
  //! Returns the circle used at the time of construction of this object. <br>
       const gp_Circ2d& Circle() const;
  //! Sets the selection type. <br>
        void SetTypeOfSelection(const Select2D_TypeOfSelection aType) ;
  //! Returns the selection type used at the time of construction of this object. <br>
        Select2D_TypeOfSelection Selection() ;




  DEFINE_STANDARD_RTTI(Select2D_SensitiveCircle)

protected:




private: 


gp_Circ2d myCirc;
Select2D_TypeOfSelection mytype;


};


#include <Select2D_SensitiveCircle.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
