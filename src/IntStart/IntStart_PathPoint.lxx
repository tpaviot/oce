// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_DomainError.hxx>

inline void IntStart_PathPoint::SetValue (const gp_Pnt& P,
					  const Standard_Real Tol,
					  const TheVertex& V,
					  const TheArc& A,
					  const Standard_Real Parameter) {

  isnew = Standard_False;
  point = P;
  tol   = Tol;
  vtx = V;
  arc = A;
  param = Parameter;
}

inline void IntStart_PathPoint::SetValue (const gp_Pnt& P,
					  const Standard_Real Tol,
					  const TheArc& A,
					  const Standard_Real Parameter) {

  isnew = Standard_True;
  point = P;
  tol   = Tol;
  arc   = A;
  param = Parameter;
}

inline const gp_Pnt& IntStart_PathPoint::Value () const {

  return point;
}


inline Standard_Real IntStart_PathPoint::Tolerance () const {

  return tol;
}

inline Standard_Boolean IntStart_PathPoint::IsNew () const {

  return isnew;
}

inline const TheVertex& IntStart_PathPoint::Vertex () const {

  if (isnew) {Standard_DomainError::Raise ();}
  return vtx;
}

inline const TheArc& IntStart_PathPoint::Arc () const {

  return arc;
}

inline Standard_Real IntStart_PathPoint::Parameter () const {

  return param;
}

