// Created on: 1992-05-06
// Created by: Jacques GOUSSARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



inline IntPatch_Point::IntPatch_Point ()
 : para(0.0), tol(0.0), tgt(Standard_False), mult(Standard_False),
   onS1(Standard_False), vtxonS1(Standard_False), prm1(0.0),
   onS2(Standard_False), vtxonS2(Standard_False), prm2(0.0)
{
}


inline void IntPatch_Point::SetValue (const gp_Pnt& Pt)
{
  pt.SetValue(Pt);
}


inline void IntPatch_Point::SetTolerance (const Standard_Real Tol)
{
  tol = Tol;
}


inline void IntPatch_Point::SetParameters (const Standard_Real U1,
                                           const Standard_Real V1,
                                           const Standard_Real U2,
                                           const Standard_Real V2)
{
  pt.SetValue(U1,V1,U2,V2);
}


inline void IntPatch_Point::SetParameter (const Standard_Real Para)
{
  para = Para;
}


inline void IntPatch_Point::SetMultiple (const Standard_Boolean IsMult)
{
  mult = IsMult;
}


inline const gp_Pnt& IntPatch_Point::Value () const
{
  return pt.Value();
}


inline Standard_Real IntPatch_Point::Tolerance () const
{
  return tol;
}


inline Standard_Real IntPatch_Point::ParameterOnLine () const
{
  return para;
}


inline Standard_Boolean IntPatch_Point::IsTangencyPoint () const
{
  return tgt;
}


inline void IntPatch_Point::ParametersOnS1 (Standard_Real& U1, Standard_Real& V1) const
{
  pt.ParametersOnS1(U1,V1);
}


inline void IntPatch_Point::ParametersOnS2 (Standard_Real& U2, Standard_Real& V2) const
{
  pt.ParametersOnS2(U2,V2);
}


inline Standard_Boolean IntPatch_Point::IsMultiple () const
{
  return mult;
}


inline Standard_Boolean IntPatch_Point::IsOnDomS1 () const
{
  return onS1;
}


inline Standard_Boolean IntPatch_Point::IsVertexOnS1 () const
{
  return vtxonS1;
}


inline const Handle(Adaptor3d_HVertex)& IntPatch_Point::VertexOnS1 () const
{
  if (!vtxonS1) {Standard_DomainError::Raise();}
  return vS1;
}


inline const Handle(Adaptor2d_HCurve2d)& IntPatch_Point::ArcOnS1 () const
{
  if (!onS1) {Standard_DomainError::Raise();}
  return arcS1;
}


inline const IntSurf_Transition& IntPatch_Point::TransitionLineArc1 () const
{
  if (!onS1) {Standard_DomainError::Raise();}
  return traline1;
}


inline const IntSurf_Transition& IntPatch_Point::TransitionOnS1 () const
{
  if (!onS1) {Standard_DomainError::Raise();}
  return tra1;
}


inline Standard_Real IntPatch_Point::ParameterOnArc1 () const
{
  if (!onS1) {Standard_DomainError::Raise();}
  return prm1;
}


inline Standard_Boolean IntPatch_Point::IsOnDomS2 () const
{
  return onS2;
}


inline Standard_Boolean IntPatch_Point::IsVertexOnS2 () const
{
  return vtxonS2;
}


inline const Handle(Adaptor3d_HVertex)& IntPatch_Point::VertexOnS2 () const
{
  if (!vtxonS2) {Standard_DomainError::Raise();}
  return vS2;
}


inline const Handle(Adaptor2d_HCurve2d)& IntPatch_Point::ArcOnS2 () const
{
  if (!onS2) {Standard_DomainError::Raise();}
  return arcS2;
}


inline const IntSurf_Transition& IntPatch_Point::TransitionLineArc2 () const
{
  if (!onS2) {Standard_DomainError::Raise();}
  return traline2;
}


inline const IntSurf_Transition& IntPatch_Point::TransitionOnS2 () const
{
  if (!onS2) {Standard_DomainError::Raise();}
  return tra2;
}


inline Standard_Real IntPatch_Point::ParameterOnArc2 () const
{
  if (!onS2) {Standard_DomainError::Raise();}
  return prm2;
}


inline const IntSurf_PntOn2S& IntPatch_Point::PntOn2S() const
{
  return pt;
}


inline void IntPatch_Point::Parameters(Standard_Real& U1, Standard_Real& V1,
				       Standard_Real& U2, Standard_Real& V2) const
{
  pt.Parameters(U1,V1,U2,V2);
}
