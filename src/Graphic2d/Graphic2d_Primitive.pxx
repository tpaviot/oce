// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#ifndef PRIMITIVE_PXX_INCLUDED
#define PRIMITIVE_PXX_INCLUDED

#define NEW_ANGLE(a)  { \
int quot = (int) (a/(2. * M_PI)); \
	if (Abs(quot) >= 1) a = a - 2. * M_PI * quot; \
}

#define REALEPSILON()  (0.0001)

#define VALUE_OF_ANGLE(x,y,z)  { \
double a; \
		if (x > 0.) \
			if (x <= REALEPSILON ()) x = 0.; \
		if (x < 0.) \
			if (-x <= REALEPSILON ()) x = 0.; \
		if (y > 0.) \
			if (y <= REALEPSILON ()) y = 0.; \
		if (y < 0.) \
			if (-y <= REALEPSILON ()) y = 0.; \
		if (x == 0.) { \
			if (y > 0.) z = M_PI / 2.; \
			else z = - M_PI / 2.; \
		} \
		if (y == 0.) { \
			if (x > 0.) z = 0.; \
			else z = M_PI; \
		} \
		if ((x < 0.) && (y > 0.)) { \
			a = acos (x); \
			if ((a >= M_PI / 2.-REALEPSILON ()) && \
			    (a <= M_PI + REALEPSILON ())) \
				z = a; \
			else \
				z = - a; \
		} \
		if ((x >= 0.) && (y > 0.)) { \
			a = acos (x); \
			if ((a >= 0.) && \
			    (a <= M_PI / 2. + REALEPSILON ())) \
				z = a; \
			else \
				z = - a; \
		} \
		if ((x < 0.) && (y < 0.)) { \
			a = acos (x); \
			z = - a; \
		} \
		if ((x > 0.) && (y < 0.)) { \
			a = acos (x); \
			if ((a >= 0.) && \
			    (a <= M_PI / 2. + REALEPSILON ())) \
				z = - a; \
			else \
				z = a; \
		} \
}

#define XROTATE(x,y) ((x)*cosa - (y)*sina)
#define YROTATE(x,y) ((y)*cosa + (x)*sina)

#endif
