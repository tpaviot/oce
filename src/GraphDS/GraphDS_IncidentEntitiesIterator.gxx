// Created on: 1991-10-15
// Created by: Denis PASCAL
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//		<dp>

#include <Standard_NoMoreObject.hxx>
#include <Standard_NoSuchObject.hxx>
#include <GraphDS_DataMapIteratorOfEntityRoleMap.hxx>

//=======================================================================
//function : Create
//purpose  : 
//=======================================================================

GraphDS_IncidentEntitiesIterator::GraphDS_IncidentEntitiesIterator ()
{
}


//=======================================================================
//function : Create
//purpose  : 
//=======================================================================

GraphDS_IncidentEntitiesIterator::GraphDS_IncidentEntitiesIterator 
  (const GraphDS_RelationGraph& G,
   const Handle(GraphDS_Entity)& V) 
{
  Initialize (G,V);
}


//=======================================================================
//function : Initialize
//purpose  : 
//=======================================================================

void GraphDS_IncidentEntitiesIterator::Initialize
  (const GraphDS_RelationGraph&,
   const Handle(GraphDS_Entity)& E) 
{
  myMap.Clear();
  
  Handle(GraphDS_Relation) REL;
  GraphDS_DataMapIteratorOfEntityRoleMap itv; 
  TColStd_MapIteratorOfMapOfTransient itr;
  
  for (itr.Initialize(E->GetRelations());itr.More();itr.Next()) {
    REL = Handle(GraphDS_Relation)::DownCast(itr.Key()); 
    if (REL->IsOutput(E)) {
      for (itv.Initialize(REL->GetEntities());itv.More();itv.Next()) {
	if (itv.Value() !=  GraphDS_OnlyOutput) {
	  myMap.Add(itv.Key());
	}
      }
    }
  }      
  myEntities.Initialize(myMap);
}     



//=======================================================================
//function : More
//purpose  : 
//=======================================================================

Standard_Boolean GraphDS_IncidentEntitiesIterator::More () const
{
  return myEntities.More();
}


//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

void GraphDS_IncidentEntitiesIterator::Next () 
{
  myEntities.Next();
}


//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

const Handle(GraphDS_Entity)& GraphDS_IncidentEntitiesIterator::Value () const 
{  
  return  *((Handle(GraphDS_Entity)*)& myEntities.Key());
  // return Handle(GraphDS_Entity)::DownCast(myEntities.Key());
}



























































































































































































































