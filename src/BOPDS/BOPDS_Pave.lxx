// Created by: Peter KURNEV
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : 
//purpose  : 
//=======================================================================
  inline BOPDS_Pave::BOPDS_Pave()
{
  myIndex=-1;
  myParameter=99.;
}
//=======================================================================
//function : ~
//purpose  : 
//=======================================================================
  inline BOPDS_Pave::~BOPDS_Pave()
{
}
//=======================================================================
//function : SetIndex
//purpose  : 
//=======================================================================
  inline void BOPDS_Pave::SetIndex(const Standard_Integer theIndex)
{
  myIndex=theIndex;
}
//=======================================================================
//function : Index
//purpose  : 
//=======================================================================
  inline Standard_Integer BOPDS_Pave::Index()const
{
  return myIndex;
}
//=======================================================================
//function : SetParameter
//purpose  : 
//=======================================================================
  inline void BOPDS_Pave::SetParameter(const Standard_Real theParameter)
{
  myParameter=theParameter;
}

//=======================================================================
//function : Parameter
//purpose  : 
//=======================================================================
  inline  Standard_Real BOPDS_Pave::Parameter()const
{
  return myParameter;
}
//=======================================================================
//function : Contents
//purpose  : 
//=======================================================================
  inline void BOPDS_Pave::Contents(Standard_Integer& theIndex,
				   Standard_Real& theParameter)const
{
  theIndex=myIndex;
  theParameter=myParameter;
}
//=======================================================================
//function : IsLess
//purpose  : 
//=======================================================================
  inline Standard_Boolean BOPDS_Pave::IsLess(const BOPDS_Pave& theOther)const
{
  return myParameter<theOther.myParameter;
}
//=======================================================================
//function : IsEqual
//purpose  : 
//=======================================================================
  inline Standard_Boolean BOPDS_Pave::IsEqual(const BOPDS_Pave& theOther)const
{
  Standard_Boolean bFlag;
  //
  bFlag=((myIndex==theOther.myIndex) &&
	 (myParameter==theOther.myParameter));
  return bFlag;
}
