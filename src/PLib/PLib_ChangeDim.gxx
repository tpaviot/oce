// Created on: 1995-09-01
// Created by: Laurent BOURESCHE
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define No_Standard_RangeError
#define No_Standard_OutOfRange

//=======================================================================
//function : SetPoles
//purpose  : 
//=======================================================================

void PLib::SetPoles(const Array1OfPoints& Poles,
		    TColStd_Array1OfReal& FP)
{
  Standard_Integer i;
  Standard_Integer j      = FP   .Lower();
  Standard_Integer PLower = Poles.Lower();
  Standard_Integer PUpper = Poles.Upper();
  if (Dimension_gen == 3) {
    
    for (i = PLower; i <= PUpper; i++) {
      const Point& P = Poles(i);
      FP(j) = P.Coord(1); j++;
      FP(j) = P.Coord(2); j++;
      FP(j) = P.Coord(3); j++;
    }
  }
  else {
    
    for (i = PLower; i <= PUpper; i++) {
      const Point& P = Poles(i);
      FP(j) = P.Coord(1); j++;
      FP(j) = P.Coord(2); j++;
    }
  }
}

//=======================================================================
//function : SetPoles
//purpose  : 
//=======================================================================

void PLib::SetPoles(const Array1OfPoints&       Poles,
		    const TColStd_Array1OfReal& Weights,
		    TColStd_Array1OfReal&       FP)
{
  Standard_Real w;
  Standard_Integer i;
  Standard_Integer j      = FP   .Lower();
  Standard_Integer PLower = Poles.Lower();
  Standard_Integer PUpper = Poles.Upper();
  if (Dimension_gen == 3) {
    
    for (i = PLower; i <= PUpper; i++) {
      w = Weights(i);
      const Point& P = Poles(i);
      FP(j) = P.Coord(1) * w; j++;
      FP(j) = P.Coord(2) * w; j++;
      FP(j) = P.Coord(3) * w; j++;
      FP(j) =              w; j++;
    }
  }
  else {
    
    for (i = PLower; i <= PUpper; i++) {
      w = Weights(i);
      const Point& P = Poles(i);
      FP(j) = P.Coord(1) * w; j++;
      FP(j) = P.Coord(2) * w; j++;
      FP(j) =              w; j++;
    }
  }
}

//=======================================================================
//function : GetPoles
//purpose  : 
//=======================================================================

void PLib::GetPoles(const TColStd_Array1OfReal& FP,
		    Array1OfPoints&             Poles)
{
  Standard_Integer i;
  Standard_Integer j      = FP   .Lower();
  Standard_Integer PLower = Poles.Lower();
  Standard_Integer PUpper = Poles.Upper();
  if (Dimension_gen == 3) {
    
    for (i = PLower; i <= PUpper; i++) {
      Point& P = Poles(i);
      P.SetCoord(1,FP(j)); j++;
      P.SetCoord(2,FP(j)); j++;
      P.SetCoord(3,FP(j)); j++;
    }
  }
  else {
    
    for (i = PLower; i <= PUpper; i++) {
      Point& P = Poles(i);
      P.SetCoord(1,FP(j)); j++;
      P.SetCoord(2,FP(j)); j++;
    }
  }
}

//=======================================================================
//function : GetPoles
//purpose  : 
//=======================================================================

void PLib::GetPoles(const TColStd_Array1OfReal& FP,
		    Array1OfPoints&             Poles,
		    TColStd_Array1OfReal&       Weights)
{
  Standard_Real w;
  Standard_Integer i;
  Standard_Integer j      = FP   .Lower();
  Standard_Integer PLower = Poles.Lower();
  Standard_Integer PUpper = Poles.Upper();
  if (Dimension_gen == 3) {
    
    for (i = PLower; i <= PUpper; i++) {
      Weights(i) = w = FP(j + 3);
      Point& P = Poles(i);
      P.SetCoord(1,FP(j) / w); j++;
      P.SetCoord(2,FP(j) / w); j++;
      P.SetCoord(3,FP(j) / w); j++;
      j++;
    }
  }
  else {
    
    for (i = PLower; i <= PUpper; i++) {
      Weights(i) = w = FP(j + 2);
      Point& P = Poles(i);
      P.SetCoord(1,FP(j) / w); j++;
      P.SetCoord(2,FP(j) / w); j++;
      j++;
    }
  }
}

