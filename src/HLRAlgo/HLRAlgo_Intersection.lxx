// Created on: 1992-02-19
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::Orientation (const TopAbs_Orientation Ori)
{ myOrien = Ori; }

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation HLRAlgo_Intersection::Orientation() const
{ return myOrien; }

//=======================================================================
//function : Level
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::Level (const Standard_Integer Lev)
{ myLevel = Lev; }

//=======================================================================
//function : Level
//purpose  : 
//=======================================================================

inline Standard_Integer HLRAlgo_Intersection::Level () const
{ return myLevel; }

//=======================================================================
//function : SegIndex
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::SegIndex (const Standard_Integer SegInd)
{ mySegIndex = SegInd; }

//=======================================================================
//function : SegIndex
//purpose  : 
//=======================================================================

inline Standard_Integer HLRAlgo_Intersection::SegIndex () const
{ return mySegIndex; }

//=======================================================================
//function : Index
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::Index (const Standard_Integer Ind)
{ myIndex = Ind; }

//=======================================================================
//function : Index
//purpose  : 
//=======================================================================

inline Standard_Integer HLRAlgo_Intersection::Index () const
{ return myIndex; }

//=======================================================================
//function : Parameter
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::Parameter (const Standard_Real P)
{ myParam = P; }

//=======================================================================
//function : Parameter
//purpose  : 
//=======================================================================

inline Standard_Real HLRAlgo_Intersection::Parameter () const
{ return myParam; }

//=======================================================================
//function : Tolerance
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::Tolerance (const Standard_ShortReal T)
{ myToler = T; }

//=======================================================================
//function : Tolerance
//purpose  : 
//=======================================================================

inline Standard_ShortReal HLRAlgo_Intersection::Tolerance () const
{ return myToler; }

//=======================================================================
//function : State
//purpose  : 
//=======================================================================

inline void HLRAlgo_Intersection::State (const TopAbs_State St)
{ myState = St; }

//=======================================================================
//function : State
//purpose  : 
//=======================================================================

inline TopAbs_State HLRAlgo_Intersection::State() const
{ return myState; }
