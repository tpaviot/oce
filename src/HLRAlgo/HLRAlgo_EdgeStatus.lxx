// Created on: 1992-02-18
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define EMaskAllHidden  ((Standard_Boolean)1)
#define EMaskAllVisible ((Standard_Boolean)2)

//=======================================================================
//function : Bounds
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::Bounds 
( Standard_Real& Start, Standard_ShortReal& TolStart,
  Standard_Real& End  , Standard_ShortReal& TolEnd  ) const
{
  Start    = myStart;
  TolStart = myTolStart;
  End      = myEnd;
  TolEnd   = myTolEnd;
}

//=======================================================================
//function : HideAll
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::HideAll()
{
  AllVisible(Standard_False);
  AllHidden (Standard_True);
}

//=======================================================================
//function : ShowAll
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::ShowAll()
{
  AllVisible(Standard_True);
  AllHidden (Standard_False);
}

//=======================================================================
//function : AllHidden
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeStatus::AllHidden () const
{ return (myFlags & EMaskAllHidden) != 0; }

//=======================================================================
//function : AllHidden
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::AllHidden (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskAllHidden;
  else   myFlags &= ~EMaskAllHidden;
}

//=======================================================================
//function : AllVisible
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeStatus::AllVisible () const
{ return (myFlags & EMaskAllVisible) != 0; }

//=======================================================================
//function : AllVisible
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::AllVisible (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskAllVisible;
  else   myFlags &= ~EMaskAllVisible;
}
