// Created on: 1995-04-20
// Created by: Christophe MARION
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define EMaskOrient   ((Standard_Boolean)15)
#define EMaskOutLine  ((Standard_Boolean)16)
#define EMaskInternal ((Standard_Boolean)32)
#define EMaskDouble   ((Standard_Boolean)64)
#define EMaskIsoLine  ((Standard_Boolean)128)

//=======================================================================
//function : NbEdges
//purpose  : 
//=======================================================================

inline Standard_Integer HLRAlgo_EdgesBlock::NbEdges() const
{
  return myEdges.Upper();
}

//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgesBlock::Edge (const Standard_Integer I,
				      const Standard_Integer EI)
{
  myEdges(I) = EI;
}

//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline Standard_Integer
HLRAlgo_EdgesBlock::Edge (const Standard_Integer I) const
{
  return myEdges(I);
}

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation 
HLRAlgo_EdgesBlock::Orientation (const Standard_Integer I) const
{
  return ((TopAbs_Orientation)(myFlags(I) & EMaskOrient));
}

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgesBlock::Orientation (const Standard_Integer I,
				 const TopAbs_Orientation Or)
{
  myFlags(I) &= ~EMaskOrient;
  myFlags(I) |= (((Standard_Boolean)Or) & EMaskOrient);
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::OutLine (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskOutLine) != 0;
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgesBlock::OutLine (const Standard_Integer I,
			     const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskOutLine;
  else   myFlags(I) &= ~EMaskOutLine;
}

//=======================================================================
//function : Internal
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::Internal (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskInternal) != 0;
}

//=======================================================================
//function : Internal
//purpose  : 
//=======================================================================

inline void
HLRAlgo_EdgesBlock::Internal (const Standard_Integer I,
			      const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskInternal;
  else   myFlags(I) &= ~EMaskInternal;
}

//=======================================================================
//function : Double
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::Double (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskDouble) != 0;
}

//=======================================================================
//function : Double
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgesBlock::Double (const Standard_Integer I,
					const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskDouble;
  else   myFlags(I) &= ~EMaskDouble;
}

//=======================================================================
//function : IsoLine
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::IsoLine (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskIsoLine) != 0;
}

//=======================================================================
//function : IsoLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgesBlock::IsoLine (const Standard_Integer I,
					 const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskIsoLine;
  else   myFlags(I) &= ~EMaskIsoLine;
}

//=======================================================================
//function : MinMax
//purpose  : 
//=======================================================================

inline Standard_Address HLRAlgo_EdgesBlock::MinMax () const
{ return (Standard_Address)&myMinMax; }
