// Created on: 1995-06-22
// Created by: Christophe MARION
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define EMskRg1Line  ((Standard_Boolean)1)
#define EMskRgNLine  ((Standard_Boolean)2)
#define EMskOutLine  ((Standard_Boolean)4)
#define EMskIntLine  ((Standard_Boolean)8)
#define EMskHidden   ((Standard_Boolean)16)

//=======================================================================
//function : HLRAlgo_BiPoint
//purpose  : 
//=======================================================================

inline HLRAlgo_BiPoint::HLRAlgo_BiPoint ()
{
}

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::Rg1Line () const
{ return (myIndices[9] & EMskRg1Line) != 0; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::Rg1Line (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskRg1Line;
  else   myIndices[9] &= ~EMskRg1Line;
}

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::RgNLine () const
{ return (myIndices[9] & EMskRgNLine) != 0; }

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::RgNLine (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskRgNLine;
  else   myIndices[9] &= ~EMskRgNLine;
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::OutLine () const
{ return (myIndices[9] & EMskOutLine) != 0; }

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::OutLine (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskOutLine;
  else   myIndices[9] &= ~EMskOutLine;
}

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::IntLine () const
{ return (myIndices[9] & EMskIntLine) != 0; }

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::IntLine (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskIntLine;
  else   myIndices[9] &= ~EMskIntLine;
}

//=======================================================================
//function : Hidden
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::Hidden () const
{ return (myIndices[9] & EMskHidden) != 0; }

//=======================================================================
//function : Hidden
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::Hidden (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskHidden;
  else   myIndices[9] &= ~EMskHidden;
}

//=======================================================================
//function : Indices
//purpose  : 
//=======================================================================

inline Standard_Address HLRAlgo_BiPoint::Indices () const
{ return (Standard_Address)myIndices; }

//=======================================================================
//function : Coordinates
//purpose  : 
//=======================================================================

inline Standard_Address HLRAlgo_BiPoint::Coordinates () const
{ return (Standard_Address)myCoordinates; }
