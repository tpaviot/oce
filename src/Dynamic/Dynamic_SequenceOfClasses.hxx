// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_SequenceOfClasses_HeaderFile
#define _Dynamic_SequenceOfClasses_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_SequenceOfClasses_HeaderFile
#include <Handle_Dynamic_SequenceOfClasses.hxx>
#endif

#ifndef _Dynamic_SeqOfClasses_HeaderFile
#include <Dynamic_SeqOfClasses.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_Dynamic_DynamicClass_HeaderFile
#include <Handle_Dynamic_DynamicClass.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_NoSuchObject;
class Standard_OutOfRange;
class Dynamic_DynamicClass;
class Dynamic_SeqOfClasses;



class Dynamic_SequenceOfClasses : public MMgt_TShared {

public:

  
      Dynamic_SequenceOfClasses();
  
        Standard_Boolean IsEmpty() const;
  
        Standard_Integer Length() const;
  
  Standard_EXPORT     void Clear() ;
  
  Standard_EXPORT     void Append(const Handle(Dynamic_DynamicClass)& anItem) ;
  
  Standard_EXPORT     void Append(const Handle(Dynamic_SequenceOfClasses)& aSequence) ;
  
  Standard_EXPORT     void Prepend(const Handle(Dynamic_DynamicClass)& anItem) ;
  
  Standard_EXPORT     void Prepend(const Handle(Dynamic_SequenceOfClasses)& aSequence) ;
  
  Standard_EXPORT     void Reverse() ;
  
  Standard_EXPORT     void InsertBefore(const Standard_Integer anIndex,const Handle(Dynamic_DynamicClass)& anItem) ;
  
  Standard_EXPORT     void InsertBefore(const Standard_Integer anIndex,const Handle(Dynamic_SequenceOfClasses)& aSequence) ;
  
  Standard_EXPORT     void InsertAfter(const Standard_Integer anIndex,const Handle(Dynamic_DynamicClass)& anItem) ;
  
  Standard_EXPORT     void InsertAfter(const Standard_Integer anIndex,const Handle(Dynamic_SequenceOfClasses)& aSequence) ;
  
  Standard_EXPORT     void Exchange(const Standard_Integer anIndex,const Standard_Integer anOtherIndex) ;
  
  Standard_EXPORT     Handle_Dynamic_SequenceOfClasses Split(const Standard_Integer anIndex) ;
  
  Standard_EXPORT     void SetValue(const Standard_Integer anIndex,const Handle(Dynamic_DynamicClass)& anItem) ;
  
  Standard_EXPORT    const Handle_Dynamic_DynamicClass& Value(const Standard_Integer anIndex) const;
  
  Standard_EXPORT     Handle_Dynamic_DynamicClass& ChangeValue(const Standard_Integer anIndex) ;
  
  Standard_EXPORT     void Remove(const Standard_Integer anIndex) ;
  
  Standard_EXPORT     void Remove(const Standard_Integer fromIndex,const Standard_Integer toIndex) ;
  
       const Dynamic_SeqOfClasses& Sequence() const;
  
        Dynamic_SeqOfClasses& ChangeSequence() ;
  
  Standard_EXPORT     Handle_Dynamic_SequenceOfClasses ShallowCopy() const;




  DEFINE_STANDARD_RTTI(Dynamic_SequenceOfClasses)

protected:




private: 


Dynamic_SeqOfClasses mySequence;


};

#define Item Handle_Dynamic_DynamicClass
#define Item_hxx <Dynamic_DynamicClass.hxx>
#define TheSequence Dynamic_SeqOfClasses
#define TheSequence_hxx <Dynamic_SeqOfClasses.hxx>
#define TCollection_HSequence Dynamic_SequenceOfClasses
#define TCollection_HSequence_hxx <Dynamic_SequenceOfClasses.hxx>
#define Handle_TCollection_HSequence Handle_Dynamic_SequenceOfClasses
#define TCollection_HSequence_Type_() Dynamic_SequenceOfClasses_Type_()

#include <TCollection_HSequence.lxx>

#undef Item
#undef Item_hxx
#undef TheSequence
#undef TheSequence_hxx
#undef TCollection_HSequence
#undef TCollection_HSequence_hxx
#undef Handle_TCollection_HSequence
#undef TCollection_HSequence_Type_


// other Inline functions and methods (like "C++: function call" methods)
inline Handle_Dynamic_SequenceOfClasses ShallowCopy(const Handle_Dynamic_SequenceOfClasses& me) {
 return me->ShallowCopy();
}



#endif
