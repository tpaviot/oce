// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_InstanceParameter_HeaderFile
#define _Dynamic_InstanceParameter_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_InstanceParameter_HeaderFile
#include <Handle_Dynamic_InstanceParameter.hxx>
#endif

#ifndef _Handle_Dynamic_DynamicInstance_HeaderFile
#include <Handle_Dynamic_DynamicInstance.hxx>
#endif
#ifndef _Dynamic_Parameter_HeaderFile
#include <Dynamic_Parameter.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class Dynamic_DynamicInstance;


//! This class describes a parameter with a dynamic <br>
//!          fuzzy instance as value. <br>
class Dynamic_InstanceParameter : public Dynamic_Parameter {

public:

  //! Creates an   InstanceParameter  with  <aparameter>  as <br>
//!          identifier. <br>
  Standard_EXPORT   Dynamic_InstanceParameter(const Standard_CString aparameter);
  //! Creates   an  InstanceParameter  with  <aparameter>  as <br>
//!          identifier and <avalue> as initial value. <br>
  Standard_EXPORT   Dynamic_InstanceParameter(const Standard_CString aparameter,const Handle(Dynamic_DynamicInstance)& avalue);
  //! Returns <thevalue>. <br>
  Standard_EXPORT     Handle_Dynamic_DynamicInstance Value() const;
  //! Sets <avalue> to <thevalue>. <br>
  Standard_EXPORT     void Value(const Handle(Dynamic_DynamicInstance)& avalue) ;
  //! Useful for debugging. <br>
  Standard_EXPORT   virtual  void Dump(Standard_OStream& astream) const;




  DEFINE_STANDARD_RTTI(Dynamic_InstanceParameter)

protected:




private: 


Handle_Dynamic_DynamicInstance thevalue;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
