// Created on: 1994-09-19
// Created by: Gilles DEBARBOUILLE
// Copyright (c) 1994-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
//function : Dynamic_Node
//purpose  : 
//=======================================================================

Dynamic_Node::Dynamic_Node()
{
}

//=======================================================================
//function : Dynamic_Node
//purpose  : 
//=======================================================================

Dynamic_Node::Dynamic_Node(const Handle(Item)& anitem)
{
  theitem = anitem;
}

//=======================================================================
//function : Object
//purpose  : 
//=======================================================================

void Dynamic_Node::Object(const Handle(Item)& anitem)
{
  theitem = anitem;
}

//=======================================================================
//function : Object
//purpose  : 
//=======================================================================

Handle(Item) Dynamic_Node::Object() const
{
  return theitem;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

void Dynamic_Node::Next(const Handle(Dynamic_Node)& anode)
{
  thenextnode = anode;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

Handle(Dynamic_Node) Dynamic_Node::Next() const
{
  return thenextnode;
}
