// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_VariableInstance_HeaderFile
#define _Dynamic_VariableInstance_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_VariableInstance_HeaderFile
#include <Handle_Dynamic_VariableInstance.hxx>
#endif

#ifndef _Handle_Dynamic_Variable_HeaderFile
#include <Handle_Dynamic_Variable.hxx>
#endif
#ifndef _Dynamic_AbstractVariableInstance_HeaderFile
#include <Dynamic_AbstractVariableInstance.hxx>
#endif
class Dynamic_Variable;


//! This    class  is set   in     the fields of   the <br>
//!          MethodInstance  class.  When   a MethodInstance is <br>
//!          done each  variable of   the definition   must  be <br>
//!          defined in the instance by a VariableInstance with <br>
//!          the same name as in the definition.  If the method <br>
//!          instance is directly  used  by an application  the <br>
//!          user    value    is   directly    set   into   the <br>
//!          VariableInstance. If now the MethodInstance enters <br>
//!          in  the   definition of    a CompositMethod It  is <br>
//!          necessary to define the correspondance between the <br>
//!          variables of the CompositMethod definition and the <br>
//!          use throughout the MethodInstance. <br>
class Dynamic_VariableInstance : public Dynamic_AbstractVariableInstance {

public:

  //! Returns a new empty instance of this class. <br>
  Standard_EXPORT   Dynamic_VariableInstance();
  //! Sets    the    variable  <avariable>     into      the <br>
//!          VariableInstance <me>. <br>
  Standard_EXPORT   virtual  void Variable(const Handle(Dynamic_Variable)& avariable) ;
  //! Returns       the      variable contained     into the <br>
//!          VariableInstance <me>. <br>
  Standard_EXPORT     Handle_Dynamic_Variable Variable() const;




  DEFINE_STANDARD_RTTI(Dynamic_VariableInstance)

protected:




private: 


Handle_Dynamic_Variable thevariable;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
