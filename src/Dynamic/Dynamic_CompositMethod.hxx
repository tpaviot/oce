// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_CompositMethod_HeaderFile
#define _Dynamic_CompositMethod_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_CompositMethod_HeaderFile
#include <Handle_Dynamic_CompositMethod.hxx>
#endif

#ifndef _Handle_Dynamic_SequenceOfMethods_HeaderFile
#include <Handle_Dynamic_SequenceOfMethods.hxx>
#endif
#ifndef _Dynamic_MethodDefinition_HeaderFile
#include <Dynamic_MethodDefinition.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Handle_Dynamic_Method_HeaderFile
#include <Handle_Dynamic_Method.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class Dynamic_SequenceOfMethods;
class Dynamic_Method;


//! A composite method is  defined as a collection  of <br>
//!          method instances. This collection describes a more <br>
//!          complex    program   or a  network  of  elementary <br>
//!          functions.   The order of  the method instances is <br>
//!          not significant.  It   is  the references to   the <br>
//!          variables  which    define the  signature  of  the <br>
//!          composite  method which  define  the precedence of <br>
//!          one method in relation with another. <br>
class Dynamic_CompositMethod : public Dynamic_MethodDefinition {

public:

  //! Creates a composit method with <aname> as name. <br>
  Standard_EXPORT   Dynamic_CompositMethod(const Standard_CString aname);
  //! Adds <amethod>, which  is an elementary or  a composit <br>
//!          method to <me>. <br>
  Standard_EXPORT     void Method(const Handle(Dynamic_Method)& amethod) ;
  //! Returns the   number  of methods   referenced  by  the <br>
//!          composit method <me>. <br>
  Standard_EXPORT     Standard_Integer NumberOfMethods() const;
  //! Returns the method of range <anindex>. <br>
  Standard_EXPORT     Handle_Dynamic_Method Method(const Standard_Integer anindex) const;
  //! Useful for debugging. <br>
  Standard_EXPORT   virtual  void Dump(Standard_OStream& astream) const;




  DEFINE_STANDARD_RTTI(Dynamic_CompositMethod)

protected:




private: 


Handle_Dynamic_SequenceOfMethods thesequenceofmethods;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
