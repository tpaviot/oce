// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_AbstractVariableInstance_HeaderFile
#define _Dynamic_AbstractVariableInstance_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_AbstractVariableInstance_HeaderFile
#include <Handle_Dynamic_AbstractVariableInstance.hxx>
#endif

#ifndef _Dynamic_Variable_HeaderFile
#include <Dynamic_Variable.hxx>
#endif
#ifndef _Handle_Dynamic_Variable_HeaderFile
#include <Handle_Dynamic_Variable.hxx>
#endif
class Dynamic_Variable;


//! This class is the header class to define instances <br>
//!          of variables.  There  are two kinds  of instances, <br>
//!          These  are VariableInstance  which  addresses only <br>
//!          one Variable and CompositVariableInstance which is <br>
//!          able to address  more than one variable. This last <br>
//!          class is useful for methods with a variable number <br>
//!          of arguments. <br>
class Dynamic_AbstractVariableInstance : public Dynamic_Variable {

public:

  //! This  deferred method must     be implemented in   the <br>
//!          derived    classes for  setting    reference(s) to the <br>
//!          corresponding variable(s)  which define the  signature <br>
//!          of the method definition. <br>
  Standard_EXPORT   virtual  void Variable(const Handle(Dynamic_Variable)& avariable)  = 0;




  DEFINE_STANDARD_RTTI(Dynamic_AbstractVariableInstance)

protected:

  
  Standard_EXPORT   Dynamic_AbstractVariableInstance();



private: 




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
