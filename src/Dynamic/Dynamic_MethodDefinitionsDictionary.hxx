// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_MethodDefinitionsDictionary_HeaderFile
#define _Dynamic_MethodDefinitionsDictionary_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_MethodDefinitionsDictionary_HeaderFile
#include <Handle_Dynamic_MethodDefinitionsDictionary.hxx>
#endif

#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Standard_Time_HeaderFile
#include <Standard_Time.hxx>
#endif
#ifndef _Handle_Dynamic_SequenceOfMethodDefinitions_HeaderFile
#include <Handle_Dynamic_SequenceOfMethodDefinitions.hxx>
#endif
#ifndef _Standard_Transient_HeaderFile
#include <Standard_Transient.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Dynamic_Method_HeaderFile
#include <Handle_Dynamic_Method.hxx>
#endif
#ifndef _Handle_Dynamic_Parameter_HeaderFile
#include <Handle_Dynamic_Parameter.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class TCollection_HAsciiString;
class Dynamic_SequenceOfMethodDefinitions;
class Dynamic_Method;
class Dynamic_Parameter;


//! This  class groups  in   a dictionary  of  all the <br>
//!          various definitions of methods. It also allows the <br>
//!          share of  the  same  definition by  more  than one <br>
//!          MethodInstance to  preserve a global coherence and <br>
//!          also to  manage the memory.   To use this class an <br>
//!          inheritance is necessary with perhaps the overload <br>
//!          of the Switch   method if the parameter  types are <br>
//!          not      of     the      type    BooleanParameter, <br>
//!          IntegerParameter,       RealParameter          and <br>
//!          StringParameter. <br>
class Dynamic_MethodDefinitionsDictionary : public Standard_Transient {

public:

  //! Starting with   a file named  <afilename>,  fills  the <br>
//!          dictionary with all the wishes definitions. <br>
  Standard_EXPORT     void Creates(const Standard_CString afilename) ;
  //! This method sets  the new definition  <adefinition> in <br>
//!          the dictionary. It   returns true if the operation  is <br>
//!          successful, false otherwise. <br>
  Standard_EXPORT     Standard_Boolean Definition(const Handle(Dynamic_Method)& adefinition) ;
  //! This virtual method allows the user to add recognition <br>
//!          of its  own  parameters when reading  the file to fill <br>
//!          the dictionary. <br>
  Standard_EXPORT     Handle_Dynamic_Parameter Switch(const Standard_CString aname,const Standard_CString atype,const Standard_CString avalue) const;
  //! Returns from     the dictionary in  the   out variable <br>
//!          <adefinition> a reference to the right instance of the <br>
//!          definition identified  by its type <atype>. The method <br>
//!          returns true if the definition exist, false otherwise. <br>
  Standard_EXPORT     Standard_Boolean Definition(const Standard_CString atype,Handle(Dynamic_Method)& adefinition) const;
  //! Returns true if there has  been no modification of the <br>
//!          file  method-definitions.dat since the creation of the <br>
//!          dictionary object, false otherwise. <br>
  Standard_EXPORT     Standard_Boolean UpToDate() const;
  //! Returns    the number  of  definitions  stored  in the <br>
//!          dictionary. <br>
  Standard_EXPORT     Standard_Integer NumberOfDefinitions() const;
  //! Returns a  reference on the  definition identified  by <br>
//!          the index <anidex>. <br>
  Standard_EXPORT     Handle_Dynamic_Method Definition(const Standard_Integer anindex) const;
  //! Useful for debugging. <br>
  Standard_EXPORT     void Dump(Standard_OStream& astream) const;




  DEFINE_STANDARD_RTTI(Dynamic_MethodDefinitionsDictionary)

protected:

  //! Deferred constructor of the class. <br>
  Standard_EXPORT   Dynamic_MethodDefinitionsDictionary();



private: 


Handle_TCollection_HAsciiString thefilename;
Standard_Time thetime;
Handle_Dynamic_SequenceOfMethodDefinitions thesequenceofmethoddefinitions;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
