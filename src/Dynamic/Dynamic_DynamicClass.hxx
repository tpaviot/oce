// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Dynamic_DynamicClass_HeaderFile
#define _Dynamic_DynamicClass_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Dynamic_DynamicClass_HeaderFile
#include <Handle_Dynamic_DynamicClass.hxx>
#endif

#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Handle_Dynamic_ParameterNode_HeaderFile
#include <Handle_Dynamic_ParameterNode.hxx>
#endif
#ifndef _Handle_Dynamic_SequenceOfMethods_HeaderFile
#include <Handle_Dynamic_SequenceOfMethods.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Handle_Dynamic_Parameter_HeaderFile
#include <Handle_Dynamic_Parameter.hxx>
#endif
#ifndef _Handle_Dynamic_Method_HeaderFile
#include <Handle_Dynamic_Method.hxx>
#endif
#ifndef _Handle_Dynamic_DynamicInstance_HeaderFile
#include <Handle_Dynamic_DynamicInstance.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class TCollection_HAsciiString;
class Dynamic_ParameterNode;
class Dynamic_SequenceOfMethods;
class Dynamic_Parameter;
class Dynamic_Method;
class Dynamic_DynamicInstance;


//! A  dynamic class  is  defined   as a  sequence  of <br>
//!          parameters and   as a   sequence of   methods. The <br>
//!          specifications  are similar   to C++  classes. The <br>
//!          class  has  to  be   defined  in terms  of  fields <br>
//!          (Parameters) and methods. An instance of the class <br>
//!          must be   made to set  the  fields and to  use the <br>
//!          functionalities. <br>
class Dynamic_DynamicClass : public MMgt_TShared {

public:

  //! Creates a new empty instance of DynamicClass. <br>
  Standard_EXPORT   Dynamic_DynamicClass(const Standard_CString aname);
  //! Adds another parameter <aparameter> to the sequence of <br>
//!          parameter definitions. <br>
  Standard_EXPORT     void Parameter(const Handle(Dynamic_Parameter)& aparameter) ;
  //! Adds another method to the sequence of methods. It has <br>
//!          <amethod> as name  and <anaddress> as mangled  name of <br>
//!          the corresponding C++ function which must be called. <br>
  Standard_EXPORT     void CompiledMethod(const Standard_CString amethod,const Standard_CString anaddress) ;
  //! Adds  another method to the  sequence of methods.   It <br>
//!          has <amethod> as name and <afile> as interpreted file. <br>
  Standard_EXPORT     void InterpretedMethod(const Standard_CString amethod,const Standard_CString afile) ;
  //! Returns a reference to the method object identified by <br>
//!          the string <amethod>. <br>
  Standard_EXPORT   virtual  Handle_Dynamic_Method Method(const Standard_CString amethod) const;
  //! Returns an instance object of this class. <br>
  Standard_EXPORT   virtual  Handle_Dynamic_DynamicInstance Instance() const;
  //! useful for debugging. <br>
  Standard_EXPORT   virtual  void Dump(Standard_OStream& astream) const;




  DEFINE_STANDARD_RTTI(Dynamic_DynamicClass)

protected:




private: 


Handle_TCollection_HAsciiString thename;
Handle_Dynamic_ParameterNode thefirstparameternode;
Handle_Dynamic_SequenceOfMethods thesequenceofmethods;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
