// Created on: 2000-07-25
// Created by: Vincent DELOS
// Copyright (c) 2000-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//===========================================================================
//function : GetShape
//purpose  : 
//===========================================================================
inline  const TopoDS_Shape& BooleanOperations_ShapeAndInterferences::GetShape() const
{
  return myShape;
}
//===========================================================================
//function : GetShapeType
//purpose  : 
//===========================================================================
  inline  TopAbs_ShapeEnum BooleanOperations_ShapeAndInterferences::GetShapeType() const
{
  return myShape.ShapeType();
}
//===========================================================================
//function : GetState
//purpose  : 
//===========================================================================
  inline  BooleanOperations_StateOfShape BooleanOperations_ShapeAndInterferences::GetState() const
{
  return myState;
}
//===========================================================================
//function : SetState
//purpose  : 
//===========================================================================
  inline  void BooleanOperations_ShapeAndInterferences::SetState(const BooleanOperations_StateOfShape theState) 
{
  myState = theState;
}
//===========================================================================
//function : GetBoundingBox
//purpose  : 
//===========================================================================
  inline  const Bnd_Box& BooleanOperations_ShapeAndInterferences::GetBoundingBox() const
{
  return myBoundingBox;
}
//===========================================================================
//function : GetAncestor
//purpose  : 
//===========================================================================
  inline  Standard_Integer BooleanOperations_ShapeAndInterferences::GetAncestor
    (const Standard_Integer index) const
{
  Standard_Integer anc =  myAncestorsAndSuccessors.GetAncestor(index);
  return anc;
}
//===========================================================================
//function : GetSuccessor
//purpose  : 
//===========================================================================
  inline  Standard_Integer BooleanOperations_ShapeAndInterferences::GetSuccessor
    (const Standard_Integer index) const
{
  Standard_Integer suc = myAncestorsAndSuccessors.GetSuccessor(index);
  return suc;
}



//===========================================================================
//function : NumberOfAncestors
//purpose  : 
//===========================================================================
  inline  Standard_Integer BooleanOperations_ShapeAndInterferences::NumberOfAncestors() const
{
  return myAncestorsAndSuccessors.NumberOfAncestors();
}


//===========================================================================
//function : NumberOfSuccessors
//purpose  : 
//===========================================================================
  inline  Standard_Integer BooleanOperations_ShapeAndInterferences::NumberOfSuccessors() const
{
  return myAncestorsAndSuccessors.NumberOfSuccessors();
}
//===========================================================================
//function : GetAncestors
//purpose  : 
//===========================================================================
  inline  void BooleanOperations_ShapeAndInterferences::GetAncestors
    (Standard_Address& theArrayOfAncestors,
     Standard_Integer& AncestorsSize) const
{
  myAncestorsAndSuccessors.GetAncestors(theArrayOfAncestors,AncestorsSize);
}
//===========================================================================
//function : GetSuccessors
//purpose  : 
//===========================================================================
  inline  void BooleanOperations_ShapeAndInterferences::GetSuccessors
    (Standard_Address& theArrayOfSuccessors,
     Standard_Integer& SuccessorsSize) const
{
  myAncestorsAndSuccessors.GetSuccessors(theArrayOfSuccessors,SuccessorsSize);
}
//===========================================================================
//function : GetOrientation
//purpose  : 
//===========================================================================
  inline  TopAbs_Orientation BooleanOperations_ShapeAndInterferences::GetOrientation
    (const Standard_Integer index) const
{
  TopAbs_Orientation suc = myAncestorsAndSuccessors.GetOrientation(index);
  return suc;
}
//===========================================================================
//function : GetOrientations
//purpose  : 
//===========================================================================
  inline  void BooleanOperations_ShapeAndInterferences::GetOrientations
    (Standard_Address& theArrayOfOrientations,
     Standard_Integer& OrientationsSize) const
{
  myAncestorsAndSuccessors.GetOrientations(theArrayOfOrientations,OrientationsSize);
}

//modified by NIZNHY-PKV Wed Feb  2 12:56:35 2005 f
/*
//===========================================================================
//function : GetInterference
//purpose  : 
//===========================================================================
  inline const BooleanOperations_InterferenceResult& 
    BooleanOperations_ShapeAndInterferences::GetInterference
      (const Standard_Integer index) const
{
  const BooleanOperations_InterferenceResult& Interf = myInterferencesList.GetInterference(index);
  return Interf;
}
//===========================================================================
//function : NumberOfInterferences
//purpose  : 
//===========================================================================
  inline  Standard_Integer BooleanOperations_ShapeAndInterferences::NumberOfInterferences() const
{
  return myInterferencesList.NumberOfInterferences();
}
//===========================================================================
//function : GetIntersectionResult
//purpose  : 
//===========================================================================
  inline  Standard_Integer 
    BooleanOperations_ShapeAndInterferences::GetIntersectionResult
      (const Standard_Integer index) const
{
  return myInterferencesList.GetIntersectionResult(index);
}
//===========================================================================
//function : GetIntersectedShape
//purpose  : 
//===========================================================================
  inline  Standard_Integer 
    BooleanOperations_ShapeAndInterferences::GetIntersectedShape
      (const Standard_Integer index) const
{
  return myInterferencesList.GetIntersectedShape(index);
}

*/
//modified by NIZNHY-PKV Wed Feb  2 12:56:43 2005 t
