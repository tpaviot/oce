// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <StdFail_UndefinedDerivative.hxx>
#include <TColgp_HSequenceOfXY.hxx>

inline void IntSurf_PathPoint::AddUV(const Standard_Real U,
				     const Standard_Real V) {
  sequv->Append(gp_XY(U,V));
}
  
inline void IntSurf_PathPoint::SetDirections (const gp_Vec& V,
					      const gp_Dir2d& D) {

  istgt = Standard_False;
  vectg = V;
  dirtg = D;
}

inline void IntSurf_PathPoint::SetTangency (const Standard_Boolean Tang) {
  
  istgt = Tang;
}

inline void IntSurf_PathPoint::SetPassing (const Standard_Boolean Pass) {

  ispass = Pass;
}

inline const gp_Pnt& IntSurf_PathPoint::Value () const
{
  return pt;
}

inline void IntSurf_PathPoint::Value2d (Standard_Real& U,
					Standard_Real& V) const
{
  gp_XY uv(sequv->Sequence().First());
  U = uv.X();
  V = uv.Y();
}

inline Standard_Boolean IntSurf_PathPoint::IsPassingPnt () const {

  return ispass;
}

inline Standard_Boolean IntSurf_PathPoint::IsTangent () const {

  return istgt;
}

inline const gp_Vec& IntSurf_PathPoint::Direction3d () const {

  if (istgt) {StdFail_UndefinedDerivative::Raise();}
  return vectg;
}

inline const gp_Dir2d& IntSurf_PathPoint::Direction2d () const {

  if (istgt) {StdFail_UndefinedDerivative::Raise();}
  return dirtg;
}

inline Standard_Integer IntSurf_PathPoint::Multiplicity () const {

  return (sequv->Length()-1);
}

inline void IntSurf_PathPoint::Parameters (const Standard_Integer Index,
					   Standard_Real& U,
					   Standard_Real& V) const
{
  gp_XY uv(sequv->Value(Index+1));
  U = uv.X();
  V = uv.Y();
}

