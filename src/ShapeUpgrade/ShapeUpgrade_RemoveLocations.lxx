// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//=======================================================================
//function : GetResult
//purpose  : 
//=======================================================================

inline TopoDS_Shape ShapeUpgrade_RemoveLocations::GetResult() const
{
  return myShape;
}
 
//=======================================================================
//function : SetRemoveLevel
//purpose  : 
//=======================================================================

inline void ShapeUpgrade_RemoveLocations::SetRemoveLevel(const TopAbs_ShapeEnum theLevel) 
{
  
  if((Standard_Integer)theLevel > TopAbs_FACE)
    myLevelRemoving = TopAbs_FACE;
  else myLevelRemoving = theLevel;
}

 
//=======================================================================
//function : RemoveLevel
//purpose  : 
//=======================================================================

inline TopAbs_ShapeEnum ShapeUpgrade_RemoveLocations::RemoveLevel() const
{
  return myLevelRemoving;
}

//=======================================================================
//function : ModifiedShape
//purpose  : 
//=======================================================================

inline  TopoDS_Shape ShapeUpgrade_RemoveLocations::ModifiedShape(const TopoDS_Shape& theInitShape) const
{
  TopoDS_Shape aShape = theInitShape;
  if( myMapNewShapes.IsBound(theInitShape))
     aShape = myMapNewShapes.Find(theInitShape);
  return aShape;
}
