// Created on: 1999-08-31
// Created by: Pavel DURANDIN
// Copyright (c) 1999-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
//function : SetContext
//purpose  : 
//=======================================================================

inline void ShapeUpgrade_Tool::SetContext (const Handle(ShapeBuild_ReShape)& context) 
{
  myContext = context;
}


//=======================================================================
//function : Context
//purpose  : 
//=======================================================================

inline Handle(ShapeBuild_ReShape) ShapeUpgrade_Tool::Context() const
{
  return myContext;
}


//=======================================================================
//function : SetPrecision
//purpose  : 
//=======================================================================

inline void ShapeUpgrade_Tool::SetPrecision (const Standard_Real preci) 
{
  myPrecision = preci;
  if(myMaxTol < myPrecision) myMaxTol = myPrecision;
  if(myMinTol > myPrecision) myMinTol = myPrecision;
}


//=======================================================================
//function : Precision
//purpose  : 
//=======================================================================

inline Standard_Real ShapeUpgrade_Tool::Precision() const
{
  return myPrecision;
}


//=======================================================================
//function : SetMinTolerance
//purpose  : 
//=======================================================================

inline void ShapeUpgrade_Tool::SetMinTolerance (const Standard_Real mintol) 
{
  myMinTol = mintol;
}


//=======================================================================
//function : MinTolerance
//purpose  : 
//=======================================================================

inline Standard_Real ShapeUpgrade_Tool::MinTolerance() const
{
  return myMinTol;
}


//=======================================================================
//function : SetMaxTolerance
//purpose  : 
//=======================================================================

inline void ShapeUpgrade_Tool::SetMaxTolerance (const Standard_Real maxtol) 
{
  myMaxTol = maxtol;
}


//=======================================================================
//function : MaxTolerance
//purpose  : 
//=======================================================================

inline Standard_Real ShapeUpgrade_Tool::MaxTolerance() const
{
  return myMaxTol;
}

//=======================================================================
//function : LimitTolerance
//purpose  : 
//=======================================================================

inline Standard_Real ShapeUpgrade_Tool::LimitTolerance(const Standard_Real toler) const
{
  //only maximal restriction implemented.
  return Min(myMaxTol,toler);
}
