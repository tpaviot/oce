// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TopOpeBRep_VPointInter_HeaderFile
#define _TopOpeBRep_VPointInter_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TopOpeBRep_PThePointOfIntersection_HeaderFile
#include <TopOpeBRep_PThePointOfIntersection.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _TopAbs_State_HeaderFile
#include <TopAbs_State.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _IntSurf_Transition_HeaderFile
#include <IntSurf_Transition.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class Standard_DomainError;
class IntPatch_Point;
class gp_Pnt;
class TopoDS_Shape;
class gp_Pnt2d;
class TopoDS_Edge;
class TopoDS_Face;



class TopOpeBRep_VPointInter  {
public:

  DEFINE_STANDARD_ALLOC

  
      TopOpeBRep_VPointInter();
  
  Standard_EXPORT     void SetPoint(const IntPatch_Point& P) ;
  
        void SetShapes(const Standard_Integer I1,const Standard_Integer I2) ;
  
        void GetShapes(Standard_Integer& I1,Standard_Integer& I2) const;
  
        IntSurf_Transition TransitionOnS1() const;
  
        IntSurf_Transition TransitionOnS2() const;
  
        IntSurf_Transition TransitionLineArc1() const;
  
        IntSurf_Transition TransitionLineArc2() const;
  
        Standard_Boolean IsOnDomS1() const;
  
        Standard_Boolean IsOnDomS2() const;
  
        void ParametersOnS1(Standard_Real& u,Standard_Real& v) const;
  
        void ParametersOnS2(Standard_Real& u,Standard_Real& v) const;
  
       const gp_Pnt& Value() const;
  
        Standard_Real Tolerance() const;
  
  Standard_EXPORT    const TopoDS_Shape& ArcOnS1() const;
  
  Standard_EXPORT    const TopoDS_Shape& ArcOnS2() const;
  
        Standard_Real ParameterOnLine() const;
  
        Standard_Real ParameterOnArc1() const;
  //! Returns TRUE if the point is a vertex on the initial <br>
//!          restriction facet of the first surface. <br>
        Standard_Boolean IsVertexOnS1() const;
  //! Returns the information about the point when it is <br>
//!          on the domain of the first patch, i-e when the function <br>
//!          IsVertexOnS1 returns True. <br>
//!          Otherwise, an exception is raised. <br>
  Standard_EXPORT    const TopoDS_Shape& VertexOnS1() const;
  
        Standard_Real ParameterOnArc2() const;
  //! Returns TRUE if the point is a vertex on the initial <br>
//!          restriction facet of the second surface. <br>
        Standard_Boolean IsVertexOnS2() const;
  //! Returns the information about the point when it is <br>
//!          on the domain of the second patch, i-e when the function <br>
//!          IsVertexOnS2 returns True. <br>
//!          Otherwise, an exception is raised. <br>
  Standard_EXPORT    const TopoDS_Shape& VertexOnS2() const;
  
        Standard_Boolean IsInternal() const;
  //! Returns True if the point belongs to several intersection <br>
//!          lines. <br>
        Standard_Boolean IsMultiple() const;
  //! get state of VPoint within the domain of geometric shape <br>
//!          domain <I> (= 1 or 2). <br>
  Standard_EXPORT     TopAbs_State State(const Standard_Integer I) const;
  //! Set the state of VPoint within the  domain of <br>
//!          the geometric shape <I> (= 1 or 2). <br>
  Standard_EXPORT     void State(const TopAbs_State S,const Standard_Integer I) ;
  //! set the shape Eon of shape I (1,2) containing the point, <br>
//!          and parameter <Par> of point on <Eon>. <br>
  Standard_EXPORT     void EdgeON(const TopoDS_Shape& Eon,const Standard_Real Par,const Standard_Integer I) ;
  //! get the edge of shape I (1,2) containing the point. <br>
  Standard_EXPORT    const TopoDS_Shape& EdgeON(const Standard_Integer I) const;
  //! get the parameter on edge of shape I (1,2) containing the point. <br>
  Standard_EXPORT     Standard_Real EdgeONParameter(const Standard_Integer I) const;
  //! returns value of filed myShapeIndex = 0,1,2,3 <br>
//!          0 means the VPoint is on no restriction <br>
//!          1 means the VPoint is on the restriction 1 <br>
//!          2 means the VPoint is on the restriction 2 <br>
//!          3 means the VPoint is on the restrictions 1 and 2 <br>
        Standard_Integer ShapeIndex() const;
  //! set value of shape supporting me (0,1,2,3). <br>
        void ShapeIndex(const Standard_Integer I) ;
  //! get the edge of shape I (1,2) containing the point. <br>
//!          Returned shape is null if the VPoint is not on an edge <br>
//!          of shape I (1,2). <br>
  Standard_EXPORT    const TopoDS_Shape& Edge(const Standard_Integer I) const;
  //! get the parameter on edge of shape I (1,2) containing the point <br>
  Standard_EXPORT     Standard_Real EdgeParameter(const Standard_Integer I) const;
  //! get the parameter on surface of shape I (1,2) containing the point <br>
  Standard_EXPORT     gp_Pnt2d SurfaceParameters(const Standard_Integer I) const;
  
  Standard_EXPORT     Standard_Boolean IsVertex(const Standard_Integer I) const;
  
  Standard_EXPORT    const TopoDS_Shape& Vertex(const Standard_Integer I) const;
  //! set myKeep value according to current states. <br>
  Standard_EXPORT     void UpdateKeep() ;
  
//! Returns value of myKeep (does not evaluate states) <br>
//! False at creation of VPoint. <br>
//! Updated by State(State from TopAbs,Integer from Standard) <br>
        Standard_Boolean Keep() const;
  //! updates VPointInter flag "keep" with <keep>. <br>
        void ChangeKeep(const Standard_Boolean keep) ;
  //! returns <True> if the 3d points and the parameters of the <br>
//!          VPoints are same <br>
  Standard_EXPORT     Standard_Boolean EqualpP(const TopOpeBRep_VPointInter& VP) const;
  //! returns <false> if the vpoint is not given on arc <E>, <br>
//!          else returns <par> parameter on <E> <br>
  Standard_EXPORT     Standard_Boolean ParonE(const TopoDS_Edge& E,Standard_Real& par) const;
  
        void Index(const Standard_Integer I) ;
  
        Standard_Integer Index() const;
  
  Standard_EXPORT     Standard_OStream& Dump(const Standard_Integer I,const TopoDS_Face& F,Standard_OStream& OS) const;
  
  Standard_EXPORT     Standard_OStream& Dump(const TopoDS_Face& F1,const TopoDS_Face& F2,Standard_OStream& OS) const;
  
  Standard_EXPORT     TopOpeBRep_PThePointOfIntersection PThePointOfIntersectionDummy() const;





protected:





private:



TopOpeBRep_PThePointOfIntersection myPPOI;
Standard_Integer myShapeIndex;
TopAbs_State myState1;
TopAbs_State myState2;
Standard_Boolean myKeep;
TopoDS_Shape myEdgeON1;
TopoDS_Shape myEdgeON2;
Standard_Real myEdgeONPar1;
Standard_Real myEdgeONPar2;
Standard_Integer myIndex;
TopoDS_Shape myNullShape;
Standard_Integer myS1;
Standard_Integer myS2;


};


#include <TopOpeBRep_VPointInter.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
