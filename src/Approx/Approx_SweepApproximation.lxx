// Created on: 1997-06-26
// Created by: Philippe MANGIN
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <StdFail_NotDone.hxx>
#include <TColgp_HArray2OfPnt.hxx>
#include <TColgp_HArray1OfPnt2d.hxx>
#include <TColStd_HArray2OfReal.hxx>
#include <TColStd_HArray1OfReal.hxx>
#include <TColStd_HArray1OfInteger.hxx>

inline  Standard_Boolean Approx_SweepApproximation::IsDone() const
{
  return done;
}

 
inline  Standard_Integer Approx_SweepApproximation::UDegree() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return udeg;
}

 
inline  Standard_Integer Approx_SweepApproximation::VDegree() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return vdeg;
}

 
inline const TColgp_Array2OfPnt& Approx_SweepApproximation::SurfPoles() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return tabPoles->Array2();
}

 
inline const TColStd_Array2OfReal& Approx_SweepApproximation::SurfWeights() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return tabWeights->Array2();
}

 
inline const TColStd_Array1OfReal& Approx_SweepApproximation::SurfUKnots() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return tabUKnots->Array1();
}

 
inline const TColStd_Array1OfReal& Approx_SweepApproximation::SurfVKnots() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return tabVKnots->Array1();
}

 
inline const TColStd_Array1OfInteger& Approx_SweepApproximation::SurfUMults() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return tabUMults->Array1();
}

 
inline const TColStd_Array1OfInteger& Approx_SweepApproximation::SurfVMults() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return tabVMults->Array1();
}

 
inline  Standard_Integer Approx_SweepApproximation::NbCurves2d() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  return Num2DSS;
}

 
inline  Standard_Integer Approx_SweepApproximation::Curves2dDegree() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  if (seqPoles2d.Length() == 0) {Standard_DomainError::Raise();}
  return deg2d;
}

 
inline const TColgp_Array1OfPnt2d& Approx_SweepApproximation::Curve2dPoles(const Standard_Integer Index) const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
 if (seqPoles2d.Length() == 0) {Standard_DomainError::Raise();}
  return seqPoles2d(Index)->Array1();
}

 
inline const TColStd_Array1OfReal& Approx_SweepApproximation::Curves2dKnots() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
  if (seqPoles2d.Length() == 0) {Standard_DomainError::Raise();}
  return tab2dKnots->Array1();
}

 
inline const TColStd_Array1OfInteger& Approx_SweepApproximation::Curves2dMults() const
{
  if (!done) {StdFail_NotDone::Raise(" Approx_SweepApproximation");}
 if (seqPoles2d.Length() == 0) {Standard_DomainError::Raise();}
  return tab2dMults->Array1();
}

/* 
inline  void Approx_SweepApproximation::TolReached(Standard_Real& Tol3d,Standard_Real& Tol2d) const
{

}*/
