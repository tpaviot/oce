// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _AppDef_MyLineTool_HeaderFile
#define _AppDef_MyLineTool_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Approx_Status_HeaderFile
#include <Approx_Status.hxx>
#endif
class AppDef_MultiLine;
class TColgp_Array1OfPnt;
class TColgp_Array1OfPnt2d;
class TColgp_Array1OfVec;
class TColgp_Array1OfVec2d;



class AppDef_MyLineTool  {
public:

  DEFINE_STANDARD_ALLOC

  //! Returns the first index of multipoints of the MultiLine. <br>
  Standard_EXPORT   static  Standard_Integer FirstPoint(const AppDef_MultiLine& ML) ;
  //! Returns the last index of multipoints of the MultiLine. <br>
  Standard_EXPORT   static  Standard_Integer LastPoint(const AppDef_MultiLine& ML) ;
  //! Returns the number of 2d points of a MultiLine. <br>
  Standard_EXPORT   static  Standard_Integer NbP2d(const AppDef_MultiLine& ML) ;
  //! Returns the number of 3d points of a MultiLine. <br>
  Standard_EXPORT   static  Standard_Integer NbP3d(const AppDef_MultiLine& ML) ;
  //! returns the 3d points of the multipoint <MPointIndex> <br>
//!          when only 3d points exist. <br>
  Standard_EXPORT   static  void Value(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfPnt& tabPt) ;
  //! returns the 2d points of the multipoint <MPointIndex> <br>
//!          when only 2d points exist. <br>
  Standard_EXPORT   static  void Value(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfPnt2d& tabPt2d) ;
  //! returns the 3d and 2d points of the multipoint <br>
//!          <MPointIndex>. <br>
  Standard_EXPORT   static  void Value(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfPnt& tabPt,TColgp_Array1OfPnt2d& tabPt2d) ;
  //! returns the 3d points of the multipoint <MPointIndex> <br>
//!          when only 3d points exist. <br>
  Standard_EXPORT   static  Standard_Boolean Tangency(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfVec& tabV) ;
  //! returns the 2d tangency points of the multipoint <br>
//!          <MPointIndex> only when 2d points exist. <br>
  Standard_EXPORT   static  Standard_Boolean Tangency(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfVec2d& tabV2d) ;
  //! returns the 3d and 2d points of the multipoint <br>
//!          <MPointIndex>. <br>
  Standard_EXPORT   static  Standard_Boolean Tangency(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfVec& tabV,TColgp_Array1OfVec2d& tabV2d) ;
  //! returns the 3d curvatures of the multipoint <MPointIndex> <br>
//!          when only 3d points exist. <br>
  Standard_EXPORT   static  Standard_Boolean Curvature(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfVec& tabV) ;
  //! returns the 2d curvatures of the multipoint <br>
//!          <MPointIndex> only when 2d points exist. <br>
  Standard_EXPORT   static  Standard_Boolean Curvature(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfVec2d& tabV2d) ;
  //! returns the 3d and 2d curvatures of the multipoint <br>
//!          <MPointIndex>. <br>
  Standard_EXPORT   static  Standard_Boolean Curvature(const AppDef_MultiLine& ML,const Standard_Integer MPointIndex,TColgp_Array1OfVec& tabV,TColgp_Array1OfVec2d& tabV2d) ;
  //!  returns NoPointsAdded <br>
  Standard_EXPORT   static  Approx_Status WhatStatus(const AppDef_MultiLine& ML,const Standard_Integer I1,const Standard_Integer I2) ;
  //! Is never called in the algorithms. <br>
//!          Nothing is done. <br>
  Standard_EXPORT   static  AppDef_MultiLine& MakeMLBetween(const AppDef_MultiLine& ML,const Standard_Integer I1,const Standard_Integer I2,const Standard_Integer NbPMin) ;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
