// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _gce_MakeElips_HeaderFile
#define _gce_MakeElips_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _gp_Elips_HeaderFile
#include <gp_Elips.hxx>
#endif
#ifndef _gce_Root_HeaderFile
#include <gce_Root.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class StdFail_NotDone;
class gp_Ax2;
class gp_Pnt;
class gp_Elips;


//!This class implements the following algorithms used to <br>
//!          create an ellipse from gp. <br>
//! <br>
//!          * Create an ellipse from its center, and two points: <br>
//!            one on the ciconference giving the major radius, the <br>
//!            other giving the value of the small radius. <br>
class gce_MakeElips  : public gce_Root {
public:

  DEFINE_STANDARD_ALLOC

  //!The major radius of the ellipse is on the "XAxis" and the <br>
//!           minor radius is on the "YAxis" of the ellipse. The "XAxis" <br>
//!           is defined with the "XDirection" of A2 and the "YAxis" is <br>
//!           defined with the "YDirection" of A2. <br>
//! Warnings : <br>
//!           It is not forbidden to create an ellipse with <br>
//!           MajorRadius = MinorRadius. <br>
  Standard_EXPORT   gce_MakeElips(const gp_Ax2& A2,const Standard_Real MajorRadius,const Standard_Real MinorRadius);
  //! Make an ellipse with its center and two points. <br>
//! Warning <br>
//! The MakeElips class does not prevent the <br>
//! construction of an ellipse where the MajorRadius is <br>
//! equal to the MinorRadius. <br>
//! If an error occurs (that is, when IsDone returns <br>
//! false), the Status function returns: <br>
//! -   gce_InvertRadius if MajorRadius is less than MinorRadius; <br>
//! -   gce_NegativeRadius if MinorRadius is less than 0.0; <br>
//! -   gce_NullAxis if the points S1 and Center are coincident; or <br>
//! -   gce_InvertAxis if: <br>
//!   -   the major radius computed with Center and S1 <br>
//!    is less than the minor radius computed with Center, S1 and S2, or <br>
//!   -   Center, S1 and S2 are collinear. <br>
  Standard_EXPORT   gce_MakeElips(const gp_Pnt& S1,const gp_Pnt& S2,const gp_Pnt& Center);
  //! Returns the constructed ellipse. <br>
//! Exceptions StdFail_NotDone if no ellipse is constructed. <br>
  Standard_EXPORT    const gp_Elips& Value() const;
  
  Standard_EXPORT    const gp_Elips& Operator() const;
Standard_EXPORT operator gp_Elips() const;





protected:





private:



gp_Elips TheElips;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
