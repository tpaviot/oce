// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _HLRBRep_BSurfaceTool_HeaderFile
#define _HLRBRep_BSurfaceTool_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _GeomAbs_Shape_HeaderFile
#include <GeomAbs_Shape.hxx>
#endif
#ifndef _Handle_Adaptor3d_HSurface_HeaderFile
#include <Handle_Adaptor3d_HSurface.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Vec_HeaderFile
#include <gp_Vec.hxx>
#endif
#ifndef _GeomAbs_SurfaceType_HeaderFile
#include <GeomAbs_SurfaceType.hxx>
#endif
#ifndef _gp_Pln_HeaderFile
#include <gp_Pln.hxx>
#endif
#ifndef _gp_Cylinder_HeaderFile
#include <gp_Cylinder.hxx>
#endif
#ifndef _gp_Cone_HeaderFile
#include <gp_Cone.hxx>
#endif
#ifndef _gp_Torus_HeaderFile
#include <gp_Torus.hxx>
#endif
#ifndef _gp_Sphere_HeaderFile
#include <gp_Sphere.hxx>
#endif
#ifndef _Handle_Geom_BezierSurface_HeaderFile
#include <Handle_Geom_BezierSurface.hxx>
#endif
#ifndef _Handle_Geom_BSplineSurface_HeaderFile
#include <Handle_Geom_BSplineSurface.hxx>
#endif
#ifndef _gp_Ax1_HeaderFile
#include <gp_Ax1.hxx>
#endif
#ifndef _gp_Dir_HeaderFile
#include <gp_Dir.hxx>
#endif
#ifndef _Handle_Adaptor3d_HCurve_HeaderFile
#include <Handle_Adaptor3d_HCurve.hxx>
#endif
class Standard_NoSuchObject;
class Standard_OutOfRange;
class BRepAdaptor_Surface;
class TColStd_Array1OfReal;
class Adaptor3d_HSurface;
class gp_Pnt;
class gp_Vec;
class Geom_BezierSurface;
class Geom_BSplineSurface;
class Adaptor3d_HCurve;



class HLRBRep_BSurfaceTool  {
public:

  DEFINE_STANDARD_ALLOC

  
      static  Standard_Real FirstUParameter(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Real FirstVParameter(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Real LastUParameter(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Real LastVParameter(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer NbUIntervals(const BRepAdaptor_Surface& S,const GeomAbs_Shape Sh) ;
  
      static  Standard_Integer NbVIntervals(const BRepAdaptor_Surface& S,const GeomAbs_Shape Sh) ;
  
      static  void UIntervals(const BRepAdaptor_Surface& S,TColStd_Array1OfReal& T,const GeomAbs_Shape Sh) ;
  
      static  void VIntervals(const BRepAdaptor_Surface& S,TColStd_Array1OfReal& T,const GeomAbs_Shape Sh) ;
  //! If <First> >= <Last> <br>
      static  Handle_Adaptor3d_HSurface UTrim(const BRepAdaptor_Surface& S,const Standard_Real First,const Standard_Real Last,const Standard_Real Tol) ;
  //! If <First> >= <Last> <br>
      static  Handle_Adaptor3d_HSurface VTrim(const BRepAdaptor_Surface& S,const Standard_Real First,const Standard_Real Last,const Standard_Real Tol) ;
  
      static  Standard_Boolean IsUClosed(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Boolean IsVClosed(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Boolean IsUPeriodic(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Real UPeriod(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Boolean IsVPeriodic(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Real VPeriod(const BRepAdaptor_Surface& S) ;
  
      static  gp_Pnt Value(const BRepAdaptor_Surface& S,const Standard_Real u,const Standard_Real v) ;
  
      static  void D0(const BRepAdaptor_Surface& S,const Standard_Real u,const Standard_Real v,gp_Pnt& P) ;
  
      static  void D1(const BRepAdaptor_Surface& S,const Standard_Real u,const Standard_Real v,gp_Pnt& P,gp_Vec& D1u,gp_Vec& D1v) ;
  
      static  void D2(const BRepAdaptor_Surface& S,const Standard_Real u,const Standard_Real v,gp_Pnt& P,gp_Vec& D1U,gp_Vec& D1V,gp_Vec& D2U,gp_Vec& D2V,gp_Vec& D2UV) ;
  
      static  void D3(const BRepAdaptor_Surface& S,const Standard_Real u,const Standard_Real v,gp_Pnt& P,gp_Vec& D1U,gp_Vec& D1V,gp_Vec& D2U,gp_Vec& D2V,gp_Vec& D2UV,gp_Vec& D3U,gp_Vec& D3V,gp_Vec& D3UUV,gp_Vec& D3UVV) ;
  
      static  gp_Vec DN(const BRepAdaptor_Surface& S,const Standard_Real u,const Standard_Real v,const Standard_Integer Nu,const Standard_Integer Nv) ;
  
      static  GeomAbs_Shape UContinuity(const BRepAdaptor_Surface& S) ;
  
      static  GeomAbs_Shape VContinuity(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer UDegree(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer NbUPoles(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer NbUKnots(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Boolean IsURational(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer VDegree(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer NbVPoles(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Integer NbVKnots(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Boolean IsVRational(const BRepAdaptor_Surface& S) ;
  
      static  Standard_Real UResolution(const BRepAdaptor_Surface& S,const Standard_Real R3d) ;
  
      static  Standard_Real VResolution(const BRepAdaptor_Surface& S,const Standard_Real R3d) ;
  
      static  GeomAbs_SurfaceType GetType(const BRepAdaptor_Surface& S) ;
  
      static  gp_Pln Plane(const BRepAdaptor_Surface& S) ;
  
      static  gp_Cylinder Cylinder(const BRepAdaptor_Surface& S) ;
  
      static  gp_Cone Cone(const BRepAdaptor_Surface& S) ;
  
      static  gp_Torus Torus(const BRepAdaptor_Surface& S) ;
  
      static  gp_Sphere Sphere(const BRepAdaptor_Surface& S) ;
  
      static  Handle_Geom_BezierSurface Bezier(const BRepAdaptor_Surface& S) ;
  
      static  Handle_Geom_BSplineSurface BSpline(const BRepAdaptor_Surface& S) ;
  
      static  gp_Ax1 AxeOfRevolution(const BRepAdaptor_Surface& S) ;
  
      static  gp_Dir Direction(const BRepAdaptor_Surface& S) ;
  
      static  Handle_Adaptor3d_HCurve BasisCurve(const BRepAdaptor_Surface& S) ;
  
      static  gp_Ax1 Axis(const BRepAdaptor_Surface& S) ;
  
  Standard_EXPORT   static  Standard_Integer NbSamplesU(const BRepAdaptor_Surface& S) ;
  
  Standard_EXPORT   static  Standard_Integer NbSamplesV(const BRepAdaptor_Surface& S) ;
  
  Standard_EXPORT   static  Standard_Integer NbSamplesU(const BRepAdaptor_Surface& S,const Standard_Real u1,const Standard_Real u2) ;
  
  Standard_EXPORT   static  Standard_Integer NbSamplesV(const BRepAdaptor_Surface& S,const Standard_Real v1,const Standard_Real v2) ;





protected:





private:





};


#include <HLRBRep_BSurfaceTool.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
