// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _HLRBRep_BCurveTool_HeaderFile
#define _HLRBRep_BCurveTool_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _GeomAbs_Shape_HeaderFile
#include <GeomAbs_Shape.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Vec_HeaderFile
#include <gp_Vec.hxx>
#endif
#ifndef _GeomAbs_CurveType_HeaderFile
#include <GeomAbs_CurveType.hxx>
#endif
#ifndef _gp_Lin_HeaderFile
#include <gp_Lin.hxx>
#endif
#ifndef _gp_Circ_HeaderFile
#include <gp_Circ.hxx>
#endif
#ifndef _gp_Elips_HeaderFile
#include <gp_Elips.hxx>
#endif
#ifndef _gp_Hypr_HeaderFile
#include <gp_Hypr.hxx>
#endif
#ifndef _gp_Parab_HeaderFile
#include <gp_Parab.hxx>
#endif
#ifndef _Handle_Geom_BezierCurve_HeaderFile
#include <Handle_Geom_BezierCurve.hxx>
#endif
#ifndef _Handle_Geom_BSplineCurve_HeaderFile
#include <Handle_Geom_BSplineCurve.hxx>
#endif
class Standard_OutOfRange;
class Standard_NoSuchObject;
class Standard_DomainError;
class BRepAdaptor_Curve;
class TColStd_Array1OfReal;
class gp_Pnt;
class gp_Vec;
class Geom_BezierCurve;
class Geom_BSplineCurve;
class TColgp_Array1OfPnt;



class HLRBRep_BCurveTool  {
public:

  DEFINE_STANDARD_ALLOC

  
      static  Standard_Real FirstParameter(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Real LastParameter(const BRepAdaptor_Curve& C) ;
  
      static  GeomAbs_Shape Continuity(const BRepAdaptor_Curve& C) ;
  //! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(myclass) >= <S> <br>
      static  Standard_Integer NbIntervals(BRepAdaptor_Curve& C,const GeomAbs_Shape S) ;
  //! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
      static  void Intervals(BRepAdaptor_Curve& C,TColStd_Array1OfReal& T,const GeomAbs_Shape S) ;
  
      static  Standard_Boolean IsClosed(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Boolean IsPeriodic(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Real Period(const BRepAdaptor_Curve& C) ;
  //! Computes the point of parameter U on the curve. <br>
      static  gp_Pnt Value(const BRepAdaptor_Curve& C,const Standard_Real U) ;
  //! Computes the point of parameter U on the curve. <br>
      static  void D0(const BRepAdaptor_Curve& C,const Standard_Real U,gp_Pnt& P) ;
  //! Computes the point of parameter U on the curve with its <br>
//!  first derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C1. <br>
      static  void D1(const BRepAdaptor_Curve& C,const Standard_Real U,gp_Pnt& P,gp_Vec& V) ;
  
//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>//! Raised if the continuity of the current interval <br>
//!  is not C2. <br>
      static  void D2(const BRepAdaptor_Curve& C,const Standard_Real U,gp_Pnt& P,gp_Vec& V1,gp_Vec& V2) ;
  
//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C3. <br>
      static  void D3(const BRepAdaptor_Curve& C,const Standard_Real U,gp_Pnt& P,gp_Vec& V1,gp_Vec& V2,gp_Vec& V3) ;
  
//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>//! Raised if the continuity of the current interval <br>
//!  is not CN. <br>//! Raised if N < 1. <br>
      static  gp_Vec DN(const BRepAdaptor_Curve& C,const Standard_Real U,const Standard_Integer N) ;
  //!  Returns the parametric  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
      static  Standard_Real Resolution(const BRepAdaptor_Curve& C,const Standard_Real R3d) ;
  //! Returns  the  type of the   curve  in the  current <br>
//!          interval :   Line,   Circle,   Ellipse, Hyperbola, <br>
//!          Parabola, BezierCurve, BSplineCurve, OtherCurve. <br>
      static  GeomAbs_CurveType GetType(const BRepAdaptor_Curve& C) ;
  
      static  gp_Lin Line(const BRepAdaptor_Curve& C) ;
  
      static  gp_Circ Circle(const BRepAdaptor_Curve& C) ;
  
      static  gp_Elips Ellipse(const BRepAdaptor_Curve& C) ;
  
      static  gp_Hypr Hyperbola(const BRepAdaptor_Curve& C) ;
  
      static  gp_Parab Parabola(const BRepAdaptor_Curve& C) ;
  
  Standard_EXPORT   static  Handle_Geom_BezierCurve Bezier(const BRepAdaptor_Curve& C) ;
  
  Standard_EXPORT   static  Handle_Geom_BSplineCurve BSpline(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Integer Degree(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Boolean IsRational(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Integer NbPoles(const BRepAdaptor_Curve& C) ;
  
      static  Standard_Integer NbKnots(const BRepAdaptor_Curve& C) ;
  
  Standard_EXPORT   static  void Poles(const BRepAdaptor_Curve& C,TColgp_Array1OfPnt& T) ;
  
  Standard_EXPORT   static  void PolesAndWeights(const BRepAdaptor_Curve& C,TColgp_Array1OfPnt& T,TColStd_Array1OfReal& W) ;
  
  Standard_EXPORT   static  Standard_Integer NbSamples(const BRepAdaptor_Curve& C,const Standard_Real U0,const Standard_Real U1) ;





protected:





private:





};


#include <HLRBRep_BCurveTool.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
