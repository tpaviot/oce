// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _HLRBRep_FaceIterator_HeaderFile
#define _HLRBRep_FaceIterator_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_HLRAlgo_WiresBlock_HeaderFile
#include <Handle_HLRAlgo_WiresBlock.hxx>
#endif
#ifndef _Handle_HLRAlgo_EdgesBlock_HeaderFile
#include <Handle_HLRAlgo_EdgesBlock.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopAbs_Orientation_HeaderFile
#include <TopAbs_Orientation.hxx>
#endif
class HLRAlgo_WiresBlock;
class HLRAlgo_EdgesBlock;
class HLRBRep_FaceData;



class HLRBRep_FaceIterator  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   HLRBRep_FaceIterator();
  //! Begin an exploration of the edges of the face <fd> <br>
  Standard_EXPORT     void InitEdge(HLRBRep_FaceData& fd) ;
  
        Standard_Boolean MoreEdge() const;
  
  Standard_EXPORT     void NextEdge() ;
  //! Returns True if the current edge is the first of a <br>
//!          wire. <br>
//! <br>
        Standard_Boolean BeginningOfWire() const;
  //! Returns True if the current edge is the  last of a <br>
//!          wire. <br>
//! <br>
        Standard_Boolean EndOfWire() const;
  //! Skip the current wire in the exploration. <br>
//! <br>
        void SkipWire() ;
  //! Returns the edges of the current wire. <br>
//! <br>
        Handle_HLRAlgo_EdgesBlock Wire() const;
  
        Standard_Integer Edge() const;
  
        TopAbs_Orientation Orientation() const;
  
        Standard_Boolean OutLine() const;
  
        Standard_Boolean Internal() const;
  
        Standard_Boolean Double() const;
  
        Standard_Boolean IsoLine() const;





protected:





private:



Standard_Integer iWire;
Standard_Integer nbWires;
Standard_Integer iEdge;
Standard_Integer nbEdges;
Handle_HLRAlgo_WiresBlock myWires;
Handle_HLRAlgo_EdgesBlock myEdges;


};


#include <HLRBRep_FaceIterator.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
