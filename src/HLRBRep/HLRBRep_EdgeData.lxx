// Created on: 1997-04-17
// Created by: Christophe MARION
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define EMaskSelected ((Standard_Boolean)1)
#define EMaskUsed     ((Standard_Boolean)2)
#define EMaskRg1Line  ((Standard_Boolean)4)
#define EMaskVertical ((Standard_Boolean)8)
#define EMaskSimple   ((Standard_Boolean)16)
#define EMaskOutLVSta ((Standard_Boolean)32)
#define EMaskOutLVEnd ((Standard_Boolean)64)
#define EMaskIntDone  ((Standard_Boolean)128)
#define EMaskCutAtSta ((Standard_Boolean)256)
#define EMaskCutAtEnd ((Standard_Boolean)512)
#define EMaskVerAtSta ((Standard_Boolean)1024)
#define EMaskVerAtEnd ((Standard_Boolean)2048)
#define EMaskRgNLine  ((Standard_Boolean)4096)

//=======================================================================
//function : Selected
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::Selected () const
{ return (myFlags & EMaskSelected) != 0; }

//=======================================================================
//function : Selected
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::Selected (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskSelected;
  else   myFlags &= ~EMaskSelected;
}

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::Rg1Line () const
{ return (myFlags & EMaskRg1Line) != 0; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::Rg1Line (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskRg1Line;
  else   myFlags &= ~EMaskRg1Line;
}

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::RgNLine () const
{ return (myFlags & EMaskRgNLine) != 0; }

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::RgNLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskRgNLine;
  else   myFlags &= ~EMaskRgNLine;
}

//=======================================================================
//function : Vertical
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::Vertical () const
{ return (myFlags & EMaskVertical) != 0; }

//=======================================================================
//function : Vertical
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::Vertical(const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskVertical;
  else   myFlags &= ~EMaskVertical;
}

//=======================================================================
//function : Simple
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::Simple () const
{ return (myFlags & EMaskSimple) != 0; }

//=======================================================================
//function : Simple
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::Simple (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskSimple;
  else   myFlags &= ~EMaskSimple;
}

//=======================================================================
//function : OutLVSta
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::OutLVSta () const
{ return (myFlags & EMaskOutLVSta) != 0; }

//=======================================================================
//function : OutLVSta
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::OutLVSta (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskOutLVSta;
  else   myFlags &= ~EMaskOutLVSta;
}

//=======================================================================
//function : OutLVEnd
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::OutLVEnd () const
{ return (myFlags & EMaskOutLVEnd) != 0; }

//=======================================================================
//function : OutLVEnd
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::OutLVEnd (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskOutLVEnd;
  else   myFlags &= ~EMaskOutLVEnd;
}

//=======================================================================
//function : CutAtSta
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::CutAtSta () const
{ return (myFlags & EMaskCutAtSta) != 0; }

//=======================================================================
//function : CutAtSta
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::CutAtSta (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskCutAtSta;
  else   myFlags &= ~EMaskCutAtSta;
}

//=======================================================================
//function : CutAtEnd
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::CutAtEnd () const
{ return (myFlags & EMaskCutAtEnd) != 0; }

//=======================================================================
//function : CutAtEnd
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::CutAtEnd (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskCutAtEnd;
  else   myFlags &= ~EMaskCutAtEnd;
}

//=======================================================================
//function : VerAtSta
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::VerAtSta () const
{ return (myFlags & EMaskVerAtSta) != 0; }

//=======================================================================
//function : VerAtSta
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::VerAtSta (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskVerAtSta;
  else   myFlags &= ~EMaskVerAtSta;
}

//=======================================================================
//function : VerAtEnd
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::VerAtEnd () const
{ return (myFlags & EMaskVerAtEnd) != 0; }

//=======================================================================
//function : VerAtEnd
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::VerAtEnd (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskVerAtEnd;
  else   myFlags &= ~EMaskVerAtEnd;
}

//=======================================================================
//function : AutoIntersectionDone
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::AutoIntersectionDone () const
{ return (myFlags & EMaskIntDone) != 0; }

//=======================================================================
//function : AutoIntersectionDone
//purpose  : 
//=======================================================================

inline void 
HLRBRep_EdgeData::AutoIntersectionDone (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskIntDone;
  else   myFlags &= ~EMaskIntDone;
}

//=======================================================================
//function : Used
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_EdgeData::Used () const
{ return (myFlags & EMaskUsed) != 0; }

//=======================================================================
//function : Used
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::Used (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskUsed;
  else   myFlags &= ~EMaskUsed;
}

//=======================================================================
//function : HideCount
//purpose  : 
//=======================================================================

inline Standard_Integer HLRBRep_EdgeData::HideCount () const
{ return myHideCount; }

//=======================================================================
//function : HideCount
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::HideCount (const Standard_Integer I)
{ myHideCount = I; }

//=======================================================================
//function : VSta
//purpose  : 
//=======================================================================

inline Standard_Integer HLRBRep_EdgeData::VSta() const
{ return myVSta; }

//=======================================================================
//function : VSta
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::VSta (const Standard_Integer I)
{ myVSta = I; }

//=======================================================================
//function : VEnd
//purpose  : 
//=======================================================================

inline Standard_Integer HLRBRep_EdgeData::VEnd () const
{ return myVEnd; }

//=======================================================================
//function : VEnd
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeData::VEnd (const Standard_Integer I)
{ myVEnd = I; }

//=======================================================================
//function : MinMax
//purpose  : 
//=======================================================================

inline Standard_Address HLRBRep_EdgeData::MinMax () const
{ return (Standard_Address)&myMinMax; }

//=======================================================================
//function : Status
//purpose  : 
//=======================================================================

inline HLRAlgo_EdgeStatus & HLRBRep_EdgeData::Status ()
{ return myStatus; }

//=======================================================================
//function : ChangeGeometry
//purpose  : 
//=======================================================================

inline HLRBRep_Curve & HLRBRep_EdgeData::ChangeGeometry ()
{ return myGeometry; }

//=======================================================================
//function : Geometry
//purpose  : 
//=======================================================================

inline const HLRBRep_Curve & HLRBRep_EdgeData::Geometry () const
{ return myGeometry; }

//=======================================================================
//function : Curve
//purpose  : 
//=======================================================================

inline Standard_Address HLRBRep_EdgeData::Curve ()
{ return ((Standard_Address)&myGeometry); }

//=======================================================================
//function : Tolerance
//purpose  : 
//=======================================================================

inline Standard_ShortReal HLRBRep_EdgeData::Tolerance () const
{ return myTolerance; }
