// Created on: 1997-04-17
// Created by: Christophe MARION
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define EMaskOrient   ((Standard_Boolean)15)
#define FMaskSelected ((Standard_Boolean)16)
#define FMaskBack     ((Standard_Boolean)32)
#define FMaskSide     ((Standard_Boolean)64)
#define FMaskClosed   ((Standard_Boolean)128)
#define FMaskHiding   ((Standard_Boolean)256)
#define FMaskSimple   ((Standard_Boolean)512)
#define FMaskCut      ((Standard_Boolean)1024)
#define FMaskWithOutL ((Standard_Boolean)2048)
#define FMaskPlane    ((Standard_Boolean)4096)
#define FMaskCylinder ((Standard_Boolean)8192)
#define FMaskCone     ((Standard_Boolean)16384)
#define FMaskSphere   ((Standard_Boolean)32768)
#define FMaskTorus    ((Standard_Boolean)65536)

//=======================================================================
//function : Selected
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Selected() const
{ return (myFlags & FMaskSelected) != 0; }

//=======================================================================
//function : Selected
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Selected(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskSelected;
  else   myFlags &= ~FMaskSelected;
}

//=======================================================================
//function : Back
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Back() const
{ return (myFlags & FMaskBack) != 0; }

//=======================================================================
//function : Back
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Back(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskBack;
  else   myFlags &= ~FMaskBack;
}

//=======================================================================
//function : Side
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Side() const
{ return (myFlags & FMaskSide) != 0; }

//=======================================================================
//function : Side
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Side(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskSide;
  else   myFlags &= ~FMaskSide;
}

//=======================================================================
//function : Closed
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Closed() const
{ return (myFlags & FMaskClosed) != 0; }

//=======================================================================
//function : Closed
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Closed(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskClosed;
  else   myFlags &= ~FMaskClosed;
}

//=======================================================================
//function : Hiding
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Hiding() const
{ return (myFlags & FMaskHiding) != 0; }

//=======================================================================
//function : Hiding
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Hiding(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskHiding;
  else   myFlags &= ~FMaskHiding;
}

//=======================================================================
//function : Simple
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Simple() const
{ return (myFlags & FMaskSimple) != 0; }

//=======================================================================
//function : Simple
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Simple(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskSimple;
  else   myFlags &= ~FMaskSimple;
}

//=======================================================================
//function : Cut
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Cut() const
{ return (myFlags & FMaskCut) != 0; }

//=======================================================================
//function : Cut
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Cut(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskCut;
  else   myFlags &= ~FMaskCut;
}

//=======================================================================
//function : WithOutL
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::WithOutL() const
{ return (myFlags & FMaskWithOutL) != 0; }

//=======================================================================
//function : WithOutL
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::WithOutL(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskWithOutL;
  else   myFlags &= ~FMaskWithOutL;
}

//=======================================================================
//function : Plane
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Plane() const
{ return (myFlags & FMaskPlane) != 0; }

//=======================================================================
//function : Plane
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Plane(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskPlane;
  else   myFlags &= ~FMaskPlane;
}

//=======================================================================
//function : Cylinder
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Cylinder() const
{ return (myFlags & FMaskCylinder) != 0; }

//=======================================================================
//function : Cylinder
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Cylinder(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskCylinder;
  else   myFlags &= ~FMaskCylinder;
}

//=======================================================================
//function : Cone
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Cone() const
{ return (myFlags & FMaskCone) != 0; }

//=======================================================================
//function : Cone
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Cone(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskCone;
  else   myFlags &= ~FMaskCone;
}

//=======================================================================
//function : Sphere
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Sphere() const
{ return (myFlags & FMaskSphere) != 0; }

//=======================================================================
//function : Sphere
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Sphere(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskSphere;
  else   myFlags &= ~FMaskSphere;
}

//=======================================================================
//function : Torus
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceData::Torus() const
{ return (myFlags & FMaskTorus) != 0; }

//=======================================================================
//function : Torus
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Torus(const Standard_Boolean B)
{
  if (B) myFlags |=  FMaskTorus;
  else   myFlags &= ~FMaskTorus;
}

//=======================================================================
//function : Size
//purpose  : 
//=======================================================================

inline Standard_Real HLRBRep_FaceData::Size() const
{ return mySize; }

//=======================================================================
//function : Size
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Size(const Standard_Real S)
{ mySize = S; }

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation HLRBRep_FaceData::Orientation() const
{ return ((TopAbs_Orientation)(myFlags & EMaskOrient)); }

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceData::Orientation(const TopAbs_Orientation O)
{
  myFlags &= ~EMaskOrient;
  myFlags |= (((Standard_Boolean)O) & EMaskOrient);
}

//=======================================================================
//function : Wires
//purpose  : 
//=======================================================================

inline Handle(HLRAlgo_WiresBlock)& HLRBRep_FaceData::Wires()
{ return myWires; }

//=======================================================================
//function : Geometry
//purpose  : 
//=======================================================================

inline HLRBRep_Surface& HLRBRep_FaceData::Geometry()
{ return myGeometry; }

//=======================================================================
//function : Tolerance
//purpose  : 
//=======================================================================

inline Standard_ShortReal HLRBRep_FaceData::Tolerance () const
{ return myTolerance; }
