// Created on: 1997-04-17
// Created by: Christophe MARION
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <HLRAlgo_WiresBlock.hxx>
#include <HLRAlgo_EdgesBlock.hxx>

//=======================================================================
//function : MoreEdge
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::MoreEdge () const
{ return iWire <= nbWires;}

//=======================================================================
//function : BeginningOfWire
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::BeginningOfWire () const
{ return iEdge == 1;}

//=======================================================================
//function : EndOfWire
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::EndOfWire () const
{ return iEdge == nbEdges;}

//=======================================================================
//function : SkipWire
//purpose  : 
//=======================================================================

inline void HLRBRep_FaceIterator::SkipWire ()
{ 
  iEdge = nbEdges;
  NextEdge();
}

//=======================================================================
//function : Wire
//purpose  : 
//=======================================================================

inline Handle(HLRAlgo_EdgesBlock) HLRBRep_FaceIterator::Wire() const
{ return myWires->Wire(iWire); }

//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline Standard_Integer HLRBRep_FaceIterator::Edge () const
{ return myEdges->Edge(iEdge); }

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation HLRBRep_FaceIterator::Orientation() const
{ return myEdges->Orientation(iEdge); }

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::OutLine() const
{ return myEdges->OutLine(iEdge); }

//=======================================================================
//function : Internal
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::Internal() const
{ return myEdges->Internal(iEdge); }

//=======================================================================
//function : Double
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::Double() const
{ return myEdges->Double(iEdge); }

//=======================================================================
//function : IsoLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::IsoLine() const
{ return myEdges->IsoLine(iEdge); }
