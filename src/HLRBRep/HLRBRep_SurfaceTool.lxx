// Created by: Laurent BUCHARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <gp_Pnt.hxx>
#include <gp_Vec.hxx>
#include <gp_Pln.hxx>
#include <gp_Cylinder.hxx>
#include <gp_Cone.hxx>
#include <gp_Torus.hxx>
#include <gp_Sphere.hxx>
#include <gp_Ax1.hxx>
#include <gp_Dir.hxx>
#include <Handle_Geom_BezierSurface.hxx>
#include <Handle_Geom_BSplineSurface.hxx>
#include <Handle_Adaptor3d_HSurface.hxx>
#include <Handle_Adaptor3d_HCurve.hxx>
#include <BRepAdaptor_Surface.hxx>

inline Standard_Real HLRBRep_SurfaceTool::FirstUParameter(const Standard_Address Surf){  return ((BRepAdaptor_Surface *)Surf)->FirstUParameter(); }
inline Standard_Real HLRBRep_SurfaceTool::FirstVParameter(const Standard_Address Surf){  return ((BRepAdaptor_Surface *)Surf)->FirstVParameter();}
inline Standard_Real HLRBRep_SurfaceTool::LastUParameter(const Standard_Address Surf){  return ((BRepAdaptor_Surface *)Surf)->LastUParameter();}
inline Standard_Real HLRBRep_SurfaceTool::LastVParameter(const Standard_Address Surf){  return ((BRepAdaptor_Surface *)Surf)->LastVParameter();}

inline Standard_Integer HLRBRep_SurfaceTool::NbUIntervals(const Standard_Address Surf,
							  const GeomAbs_Shape S){
  return ((BRepAdaptor_Surface *)Surf)->NbUIntervals(S);
}

inline Standard_Integer HLRBRep_SurfaceTool::NbVIntervals(const Standard_Address Surf,
							  const GeomAbs_Shape S){
  return ((BRepAdaptor_Surface *)Surf)->NbVIntervals(S);
}

inline void HLRBRep_SurfaceTool::UIntervals(const Standard_Address Surf,
							TColStd_Array1OfReal& Tab,
							const GeomAbs_Shape S){
  ((BRepAdaptor_Surface *)Surf)->UIntervals(Tab,S);
}

inline void HLRBRep_SurfaceTool::VIntervals(const Standard_Address Surf,
						     TColStd_Array1OfReal& Tab,
						     const GeomAbs_Shape S){
  ((BRepAdaptor_Surface *)Surf)->VIntervals(Tab,S);
}


inline Handle_Adaptor3d_HSurface HLRBRep_SurfaceTool::UTrim(const Standard_Address Surf,
								   const Standard_Real F,
								   const Standard_Real L,
								   const Standard_Real Tol) { 
  return ((BRepAdaptor_Surface *)Surf)->UTrim(F,L,Tol);
}

inline Handle_Adaptor3d_HSurface HLRBRep_SurfaceTool::VTrim(const Standard_Address Surf,
								   const Standard_Real F,
								   const Standard_Real L,
								   const Standard_Real Tol) { 
  return ((BRepAdaptor_Surface *)Surf)->VTrim(F,L,Tol);
}




inline Standard_Boolean HLRBRep_SurfaceTool::IsUClosed(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->IsUClosed();
}

inline Standard_Boolean HLRBRep_SurfaceTool::IsVClosed(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->IsVClosed();
}

inline Standard_Boolean HLRBRep_SurfaceTool::IsUPeriodic(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->IsUPeriodic();
}

inline Standard_Real HLRBRep_SurfaceTool::UPeriod(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->UPeriod();
}

inline Standard_Boolean HLRBRep_SurfaceTool::IsVPeriodic(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->IsVPeriodic();
}

inline Standard_Real HLRBRep_SurfaceTool::VPeriod(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->VPeriod();
}

inline gp_Pnt HLRBRep_SurfaceTool::Value(const Standard_Address S,
					 const Standard_Real U,
					 const Standard_Real V )
{
  return ((BRepAdaptor_Surface *)S)->Value(U,V);
}

inline void HLRBRep_SurfaceTool::D0(const Standard_Address S,
				    const Standard_Real U,
				    const Standard_Real V,
				    gp_Pnt& P)
{
  ((BRepAdaptor_Surface *)S)->D0(U,V,P);
}

inline void HLRBRep_SurfaceTool::D1(const Standard_Address S,
				    const Standard_Real U,
				    const Standard_Real V,
				    gp_Pnt& P,
				    gp_Vec& D1U,
				    gp_Vec& D1V) 
{
  ((BRepAdaptor_Surface *)S)->D1(U,V,P,D1U,D1V);
}

inline void HLRBRep_SurfaceTool::D2(const Standard_Address S,
				    const Standard_Real U,
				    const Standard_Real V,
				    gp_Pnt& P,
				    gp_Vec& D1U,
				    gp_Vec& D1V,
				    gp_Vec& D2U,
				    gp_Vec& D2V,
				    gp_Vec& D2UV)
{
  ((BRepAdaptor_Surface *)S)->D2(U,V,P,D1U,D1V,D2U,D2V,D2UV);
}

inline void HLRBRep_SurfaceTool::D3(const Standard_Address S,
				    const Standard_Real U,
				    const Standard_Real V,
				    gp_Pnt& P,
				    gp_Vec& D1U,
				    gp_Vec& D1V, 
				    gp_Vec& D2U,
				    gp_Vec& D2V,
				    gp_Vec& D2UV,
				    gp_Vec& D3U,
				    gp_Vec& D3V,
				    gp_Vec& D3UUV,
				    gp_Vec& D3UVV)
{
  ((BRepAdaptor_Surface *)S)->D3(U,V,P,D1U,D1V,D2U,D2V,D2UV,D3U,D3V,D3UUV,D3UVV);
}

inline gp_Vec HLRBRep_SurfaceTool::DN(const Standard_Address S,
				      const Standard_Real U,
				      const Standard_Real V,
				      const Standard_Integer Nu,
				      const Standard_Integer Nv)
{
  return ((BRepAdaptor_Surface *)S)->DN(U,V,Nu,Nv);
}

inline Standard_Real HLRBRep_SurfaceTool::UResolution(const Standard_Address S,
						      const Standard_Real R3d)
{
  return ((BRepAdaptor_Surface *)S)->UResolution(R3d);
}

inline Standard_Real HLRBRep_SurfaceTool::VResolution(const Standard_Address S,
						      const Standard_Real R3d)
{
  return ((BRepAdaptor_Surface *)S)->VResolution(R3d);
}

inline GeomAbs_SurfaceType HLRBRep_SurfaceTool::GetType(const Standard_Address S )
{
  return ((BRepAdaptor_Surface *)S)->GetType();
}

inline gp_Pln HLRBRep_SurfaceTool::Plane(const Standard_Address S)
{
  return ((BRepAdaptor_Surface *)S)->Plane();
}

inline gp_Cylinder HLRBRep_SurfaceTool::Cylinder(const Standard_Address S) 
{
  return ((BRepAdaptor_Surface *)S)->Cylinder();
}

inline gp_Cone HLRBRep_SurfaceTool::Cone(const Standard_Address S) 
{
  return ((BRepAdaptor_Surface *)S)->Cone();
}

inline gp_Sphere HLRBRep_SurfaceTool::Sphere(const Standard_Address S) 
{
  return ((BRepAdaptor_Surface *)S)->Sphere();
}

inline gp_Torus HLRBRep_SurfaceTool::Torus(const Standard_Address S) 
{
  return ((BRepAdaptor_Surface *)S)->Torus();
}


inline Handle(Geom_BezierSurface) HLRBRep_SurfaceTool::Bezier(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->Bezier());
}

inline Handle(Geom_BSplineSurface) HLRBRep_SurfaceTool::BSpline(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->BSpline());
}


inline gp_Ax1  HLRBRep_SurfaceTool::AxeOfRevolution(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->AxeOfRevolution());
}

inline gp_Dir  HLRBRep_SurfaceTool::Direction(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->Direction());
}

inline Handle(Adaptor3d_HCurve)  HLRBRep_SurfaceTool::BasisCurve(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->BasisCurve());
}

inline Handle(Adaptor3d_HSurface) HLRBRep_SurfaceTool::BasisSurface(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->BasisSurface());
}

inline Standard_Real HLRBRep_SurfaceTool::OffsetValue(const Standard_Address S) { 
  return(((BRepAdaptor_Surface *)S)->OffsetValue());
}
