// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESGeom_OffsetSurface_HeaderFile
#define _IGESGeom_OffsetSurface_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESGeom_OffsetSurface_HeaderFile
#include <Handle_IGESGeom_OffsetSurface.hxx>
#endif

#ifndef _gp_XYZ_HeaderFile
#include <gp_XYZ.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Handle_IGESData_IGESEntity_HeaderFile
#include <Handle_IGESData_IGESEntity.hxx>
#endif
#ifndef _IGESData_IGESEntity_HeaderFile
#include <IGESData_IGESEntity.hxx>
#endif
class IGESData_IGESEntity;
class gp_XYZ;
class gp_Vec;


//! defines IGESOffsetSurface, Type <140> Form <0> <br>
//!          in package IGESGeom <br>
//!          An offset surface is a surface defined in terms of an <br>
//!          already existing surface.If S(u, v) is a parametrised <br>
//!          regular surface and N(u, v) is a differential field of <br>
//!          unit normal vectors defined on the whole surface, and <br>
//!          "d" a fixed non zero real number, then offset surface <br>
//!          to S is a parametrised surface S(u, v) given by <br>
//!          O(u, v) = S(u, v) + d * N(u, v); <br>
//!          u1 <= u <= u2; v1 <= v <= v2; <br>
class IGESGeom_OffsetSurface : public IGESData_IGESEntity {

public:

  
  Standard_EXPORT   IGESGeom_OffsetSurface();
  //! This method is used to set the fields of the class <br>
//!           OffsetSurface <br>
//!       - anIndicator : Offset indicator <br>
//!       - aDistance   : Offset distance <br>
//!       - aSurface    : Surface that is offset <br>
  Standard_EXPORT     void Init(const gp_XYZ& anIndicatoR,const Standard_Real aDistance,const Handle(IGESData_IGESEntity)& aSurface) ;
  //! returns the offset indicator <br>
  Standard_EXPORT     gp_Vec OffsetIndicator() const;
  //! returns the offset indicator after applying Transf. Matrix <br>
  Standard_EXPORT     gp_Vec TransformedOffsetIndicator() const;
  //! returns the distance by which surface is offset <br>
  Standard_EXPORT     Standard_Real Distance() const;
  //! returns the surface that has been offset <br>
  Standard_EXPORT     Handle_IGESData_IGESEntity Surface() const;




  DEFINE_STANDARD_RTTI(IGESGeom_OffsetSurface)

protected:




private: 


gp_XYZ theIndicator;
Standard_Real theDistance;
Handle_IGESData_IGESEntity theSurface;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
