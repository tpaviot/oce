// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Adaptor3d_Curve.hxx>

//=======================================================================
//function : FirstParameter
//purpose  : 
//=======================================================================

inline Standard_Real Adaptor3d_HCurve::FirstParameter() const 
{
  return Curve().FirstParameter();
}

//=======================================================================
//function : LastParameter
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HCurve::LastParameter() const 
{
  return Curve().LastParameter();
}

//=======================================================================
//function : Continuity
//purpose  : 
//=======================================================================

 inline GeomAbs_Shape Adaptor3d_HCurve::Continuity() const 
{
  return Curve().Continuity();
}

//=======================================================================
//function : NbIntervals
//purpose  : 
//=======================================================================

 inline Standard_Integer Adaptor3d_HCurve::NbIntervals(const GeomAbs_Shape S) const
{
  return Curve().NbIntervals(S);
}

//=======================================================================
//function : Intervals
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HCurve::Intervals(TColStd_Array1OfReal& T,
                                         const GeomAbs_Shape S) const
{
  Curve().Intervals(T,S);
}

//=======================================================================
//function : Trim
//purpose  : 
//=======================================================================

 inline Handle(Adaptor3d_HCurve) Adaptor3d_HCurve::Trim
 (const Standard_Real First,
  const Standard_Real Last,
  const Standard_Real Tol) const 
{
  return Curve().Trim(First,Last,Tol);
}

//=======================================================================
//function : IsClosed
//purpose  : 
//=======================================================================

 inline Standard_Boolean Adaptor3d_HCurve::IsClosed() const 
{
  return Curve().IsClosed();
}

//=======================================================================
//function : IsPeriodic
//purpose  : 
//=======================================================================

 inline Standard_Boolean Adaptor3d_HCurve::IsPeriodic() const 
{
  return Curve().IsPeriodic();
}

//=======================================================================
//function : Period
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HCurve::Period() const 
{
  return Curve().Period();
}

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

 inline gp_Pnt Adaptor3d_HCurve::Value(const Standard_Real U) const 
{
  return Curve().Value(U);
}

//=======================================================================
//function : D0
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HCurve::D0(const Standard_Real U, gp_Pnt& P) const 
{
  Curve().D0(U,P);
}

//=======================================================================
//function : D1
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HCurve::D1(const Standard_Real U, gp_Pnt& P, gp_Vec& V) const 
{
  Curve().D1(U,P,V);
}

//=======================================================================
//function : D2
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HCurve::D2(const Standard_Real U, gp_Pnt& P, gp_Vec& V1, gp_Vec& V2) const 
{
  Curve().D2(U,P,V1,V2);
}

//=======================================================================
//function : D3
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HCurve::D3(const Standard_Real U, gp_Pnt& P, gp_Vec& V1, gp_Vec& V2, gp_Vec& V3) const 
{
  Curve().D3(U,P,V1,V2,V3);
}

//=======================================================================
//function : DN
//purpose  : 
//=======================================================================

 inline gp_Vec Adaptor3d_HCurve::DN(const Standard_Real U, const Standard_Integer N) const 
{
  return Curve().DN(U,N);
}

//=======================================================================
//function : Resolution
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HCurve::Resolution(const Standard_Real R3d) const 
{
  return Curve().Resolution(R3d);
}

//=======================================================================
//function : GetType
//purpose  : 
//=======================================================================

 inline GeomAbs_CurveType Adaptor3d_HCurve::GetType() const 
{
  return Curve().GetType();
}

//=======================================================================
//function : Line
//purpose  : 
//=======================================================================

 inline gp_Lin Adaptor3d_HCurve::Line() const 
{
  return Curve().Line();
}

//=======================================================================
//function : Circle
//purpose  : 
//=======================================================================

 inline gp_Circ Adaptor3d_HCurve::Circle() const 
{
  return Curve().Circle();
}

//=======================================================================
//function : Ellipse
//purpose  : 
//=======================================================================

 inline gp_Elips Adaptor3d_HCurve::Ellipse() const 
{
  return Curve().Ellipse();
}

//=======================================================================
//function : Hyperbola
//purpose  : 
//=======================================================================

 inline gp_Hypr Adaptor3d_HCurve::Hyperbola() const 
{
  return Curve().Hyperbola();
}

//=======================================================================
//function : Parabola
//purpose  : 
//=======================================================================

 inline gp_Parab Adaptor3d_HCurve::Parabola() const 
{
  return Curve().Parabola();
}

//=======================================================================
//function : Degree
//purpose  : 
//=======================================================================

inline  Standard_Integer  Adaptor3d_HCurve::Degree() const 
{
   return Curve().Degree() ;
 }
//=======================================================================
//function : IsRational
//purpose  : 
//=======================================================================

inline  Standard_Boolean  Adaptor3d_HCurve::IsRational() const
{
 return  Curve().IsRational() ;
} 
//=======================================================================
//function : NbPoles
//purpose  : 
//=======================================================================
inline Standard_Integer  Adaptor3d_HCurve::NbPoles() const
{
 return Curve().NbPoles() ;
}
//=======================================================================
//function : NbKnots
//purpose  : 
//=======================================================================

inline Standard_Integer  Adaptor3d_HCurve::NbKnots() const
{
 return Curve().NbKnots() ;
}

//=======================================================================
//function : Bezier
//purpose  : 
//=======================================================================

 inline Handle(Geom_BezierCurve) Adaptor3d_HCurve::Bezier() const 
{
  return Curve().Bezier();
}

//=======================================================================
//function : BSpline
//purpose  : 
//=======================================================================

 inline Handle(Geom_BSplineCurve) Adaptor3d_HCurve::BSpline() const 
{
  return Curve().BSpline();
}

