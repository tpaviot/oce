// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Adaptor3d_CurveOnSurface_HeaderFile
#define _Adaptor3d_CurveOnSurface_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Adaptor3d_HSurface_HeaderFile
#include <Handle_Adaptor3d_HSurface.hxx>
#endif
#ifndef _Handle_Adaptor2d_HCurve2d_HeaderFile
#include <Handle_Adaptor2d_HCurve2d.hxx>
#endif
#ifndef _GeomAbs_CurveType_HeaderFile
#include <GeomAbs_CurveType.hxx>
#endif
#ifndef _gp_Circ_HeaderFile
#include <gp_Circ.hxx>
#endif
#ifndef _gp_Lin_HeaderFile
#include <gp_Lin.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfReal_HeaderFile
#include <Handle_TColStd_HArray1OfReal.hxx>
#endif
#ifndef _GeomAbs_Shape_HeaderFile
#include <GeomAbs_Shape.hxx>
#endif
#ifndef _Adaptor3d_Curve_HeaderFile
#include <Adaptor3d_Curve.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Adaptor3d_HCurve_HeaderFile
#include <Handle_Adaptor3d_HCurve.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Geom_BezierCurve_HeaderFile
#include <Handle_Geom_BezierCurve.hxx>
#endif
#ifndef _Handle_Geom_BSplineCurve_HeaderFile
#include <Handle_Geom_BSplineCurve.hxx>
#endif
class Adaptor3d_HSurface;
class Adaptor2d_HCurve2d;
class TColStd_HArray1OfReal;
class Standard_NoSuchObject;
class Standard_DomainError;
class Standard_OutOfRange;
class TColStd_Array1OfReal;
class Adaptor3d_HCurve;
class gp_Pnt;
class gp_Vec;
class gp_Lin;
class gp_Circ;
class gp_Elips;
class gp_Hypr;
class gp_Parab;
class Geom_BezierCurve;
class Geom_BSplineCurve;
class gp_Pnt2d;
class gp_Vec2d;


//! An interface between the services provided by a curve <br>
//! lying on a surface from the package Geom and those <br>
//! required of the curve by algorithms which use it. The <br>
//! curve is defined as a 2D curve from the Geom2d <br>
//! package, in the parametric space of the surface. <br>
class Adaptor3d_CurveOnSurface  : public Adaptor3d_Curve {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   Adaptor3d_CurveOnSurface();
  
  Standard_EXPORT   Adaptor3d_CurveOnSurface(const Handle(Adaptor3d_HSurface)& S);
  //! Creates a CurveOnSurface from the 2d curve <C> and <br>
//!          the surface <S>. <br>
  Standard_EXPORT   Adaptor3d_CurveOnSurface(const Handle(Adaptor2d_HCurve2d)& C,const Handle(Adaptor3d_HSurface)& S);
  //! Changes the surface. <br>
  Standard_EXPORT     void Load(const Handle(Adaptor3d_HSurface)& S) ;
  //! Changes the 2d curve. <br>
  Standard_EXPORT     void Load(const Handle(Adaptor2d_HCurve2d)& C) ;
  
  Standard_EXPORT    const Handle_Adaptor2d_HCurve2d& GetCurve() const;
  
  Standard_EXPORT    const Handle_Adaptor3d_HSurface& GetSurface() const;
  
  Standard_EXPORT     Handle_Adaptor2d_HCurve2d& ChangeCurve() ;
  
  Standard_EXPORT     Handle_Adaptor3d_HSurface& ChangeSurface() ;
  
  Standard_EXPORT     Standard_Real FirstParameter() const;
  
  Standard_EXPORT     Standard_Real LastParameter() const;
  
  Standard_EXPORT     GeomAbs_Shape Continuity() const;
  //! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
  Standard_EXPORT     Standard_Integer NbIntervals(const GeomAbs_Shape S) ;
  //! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
  Standard_EXPORT     void Intervals(TColStd_Array1OfReal& T,const GeomAbs_Shape S) ;
  //! Returns    a  curve equivalent   of  <me>  between <br>
//!          parameters <First>  and <Last>. <Tol>  is used  to <br>
//!          test for 3d points confusion. <br>//! If <First> >= <Last> <br>
  Standard_EXPORT     Handle_Adaptor3d_HCurve Trim(const Standard_Real First,const Standard_Real Last,const Standard_Real Tol) const;
  
  Standard_EXPORT     Standard_Boolean IsClosed() const;
  
  Standard_EXPORT     Standard_Boolean IsPeriodic() const;
  
  Standard_EXPORT     Standard_Real Period() const;
  //! Computes the point of parameter U on the curve. <br>
  Standard_EXPORT     gp_Pnt Value(const Standard_Real U) const;
  //! Computes the point of parameter U on the curve. <br>
  Standard_EXPORT     void D0(const Standard_Real U,gp_Pnt& P) const;
  //! Computes the point of parameter U on the curve with its <br>
//!  first derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C1. <br>
  Standard_EXPORT     void D1(const Standard_Real U,gp_Pnt& P,gp_Vec& V) const;
  
//!  Returns the point P of parameter U, the first and second <br>
//!  derivatives V1 and V2. <br>//! Raised if the continuity of the current interval <br>
//!  is not C2. <br>
  Standard_EXPORT     void D2(const Standard_Real U,gp_Pnt& P,gp_Vec& V1,gp_Vec& V2) const;
  
//!  Returns the point P of parameter U, the first, the second <br>
//!  and the third derivative. <br>//! Raised if the continuity of the current interval <br>
//!  is not C3. <br>
  Standard_EXPORT     void D3(const Standard_Real U,gp_Pnt& P,gp_Vec& V1,gp_Vec& V2,gp_Vec& V3) const;
  
//!  The returned vector gives the value of the derivative for the <br>
//!  order of derivation N. <br>//! Raised if the continuity of the current interval <br>
//!  is not CN. <br>//! Raised if N < 1. <br>
  Standard_EXPORT     gp_Vec DN(const Standard_Real U,const Standard_Integer N) const;
  //!  Returns the parametric  resolution corresponding <br>
//!         to the real space resolution <R3d>. <br>
  Standard_EXPORT     Standard_Real Resolution(const Standard_Real R3d) const;
  //! Returns  the  type of the   curve  in the  current <br>
//!          interval :   Line,   Circle,   Ellipse, Hyperbola, <br>
//!          Parabola, BezierCurve, BSplineCurve, OtherCurve. <br>
  Standard_EXPORT     GeomAbs_CurveType GetType() const;
  
  Standard_EXPORT     gp_Lin Line() const;
  
  Standard_EXPORT     gp_Circ Circle() const;
  
  Standard_EXPORT     gp_Elips Ellipse() const;
  
  Standard_EXPORT     gp_Hypr Hyperbola() const;
  
  Standard_EXPORT     gp_Parab Parabola() const;
  
  Standard_EXPORT     Standard_Integer Degree() const;
  
  Standard_EXPORT     Standard_Boolean IsRational() const;
  
  Standard_EXPORT     Standard_Integer NbPoles() const;
  
  Standard_EXPORT     Standard_Integer NbKnots() const;
  
  Standard_EXPORT     Handle_Geom_BezierCurve Bezier() const;
  
  Standard_EXPORT     Handle_Geom_BSplineCurve BSpline() const;





protected:





private:

  
  Standard_EXPORT     void EvalKPart() ;
  //!  Evaluates  myFirstSurf and myLastSurf <br>
//!	  for trimming the curve on surface. <br>//! Following  methods  output left-bottom and right-top points <br>
//!  of located part on surface <br>
//!  for trimming the curve on surface. <br>
  Standard_EXPORT     void EvalFirstLastSurf() ;
  
  Standard_EXPORT     void LocatePart(const gp_Pnt2d& UV,const gp_Vec2d& DUV,const Handle(Adaptor3d_HSurface)& S,gp_Pnt2d& LeftBot,gp_Pnt2d& RightTop) const;
  
  Standard_EXPORT     Standard_Boolean LocatePart_RevExt(const gp_Pnt2d& UV,const gp_Vec2d& DUV,const Handle(Adaptor3d_HSurface)& S,gp_Pnt2d& LeftBot,gp_Pnt2d& RightTop) const;
  
  Standard_EXPORT     Standard_Boolean LocatePart_Offset(const gp_Pnt2d& UV,const gp_Vec2d& DUV,const Handle(Adaptor3d_HSurface)& S,gp_Pnt2d& LeftBot,gp_Pnt2d& RightTop) const;
  //! Extracts the numbers of knots which equal <br>
//!  the point and checks derivative components <br>
//!  by  zero equivalence. <br>
  Standard_EXPORT     void FindBounds(const TColStd_Array1OfReal& Arr,const Standard_Real XYComp,const Standard_Real DUVComp,Standard_Integer& Bnd1,Standard_Integer& Bnd2,Standard_Boolean& DerIsNull) const;


Handle_Adaptor3d_HSurface mySurface;
Handle_Adaptor2d_HCurve2d myCurve;
GeomAbs_CurveType myType;
gp_Circ myCirc;
gp_Lin myLin;
Handle_Adaptor3d_HSurface myFirstSurf;
Handle_Adaptor3d_HSurface myLastSurf;
Handle_TColStd_HArray1OfReal myIntervals;
GeomAbs_Shape myIntCont;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
