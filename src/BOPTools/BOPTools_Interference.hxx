// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPTools_Interference_HeaderFile
#define _BOPTools_Interference_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _BooleanOperations_KindOfInterference_HeaderFile
#include <BooleanOperations_KindOfInterference.hxx>
#endif


//! class for storing information about an interference <br>
//!         that  takes  place  between  given  shape and shape <br>
//!         with  DS-index =aWith <br>
class BOPTools_Interference  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty constructor <br>
  Standard_EXPORT   BOPTools_Interference();
  //!  constructor <br>
//! aWith  -  DS-index for the opposite shape <br>
//! aType  -  the type of the  interference <br>
//! anIndex-  the index of the result in corresponding <br>
//! interference table  (if the result is computed <br>
//! but there is no result  ->   anIndex=0) <br>
  Standard_EXPORT   BOPTools_Interference(const Standard_Integer aWith,const BooleanOperations_KindOfInterference aType,const Standard_Integer anIndex);
  
//! Modifier <br>
  Standard_EXPORT     void SetWith(const Standard_Integer aWith) ;
  
//! Modifier <br>
  Standard_EXPORT     void SetType(const BooleanOperations_KindOfInterference aType) ;
  
//! Modifier <br>
  Standard_EXPORT     void SetIndex(const Standard_Integer anIndex) ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer With() const;
  
//! Selector <br>
  Standard_EXPORT     BooleanOperations_KindOfInterference Type() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Index() const;





protected:





private:



Standard_Integer myWith;
BooleanOperations_KindOfInterference myType;
Standard_Integer myIndex;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
