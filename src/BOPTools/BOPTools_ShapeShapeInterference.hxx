// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPTools_ShapeShapeInterference_HeaderFile
#define _BOPTools_ShapeShapeInterference_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif



//!  Root class for storing  an  Interference <br>
//!  between a couple BRep shapes <br>
class BOPTools_ShapeShapeInterference  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty constructor <br>
  Standard_EXPORT   BOPTools_ShapeShapeInterference();
  
//! Constructor <br>
  Standard_EXPORT   BOPTools_ShapeShapeInterference(const Standard_Integer anIndex1,const Standard_Integer anIndex2);
  
//! Modifier <br>
//! Sets DS-index for the first shape from the  couple <br>
  Standard_EXPORT     void SetIndex1(const Standard_Integer anIndex1) ;
  
//! Modifier <br>
//! Sets DS-index for the second shape from the  couple <br>
  Standard_EXPORT     void SetIndex2(const Standard_Integer anIndex2) ;
  
//! Modifier <br>
//! Sets DS-index for the new shape <br>
  Standard_EXPORT     void SetNewShape(const Standard_Integer anIndex) ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Index1() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Index2() const;
  
//! Selector <br>
  Standard_EXPORT     void Indices(Standard_Integer& anIndex1,Standard_Integer& anIndex2) const;
  
//! Selector <br>
//! Gets the value of index <br>
//! if  anIndex==myIndex1 it returns myIndex2; <br>
//! if  anIndex==myIndex2 it returns myIndex1; <br>
//! otherwise it returns 0; <br>
  Standard_EXPORT     Standard_Integer OppositeIndex(const Standard_Integer anIndex) const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer NewShape() const;





protected:





private:



Standard_Integer myIndex1;
Standard_Integer myIndex2;
Standard_Integer myNewShape;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
