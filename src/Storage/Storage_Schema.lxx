// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Storage_Data.hxx>
#include <Storage_InternalData.hxx>
#include <Storage_BaseDriver.hxx>


inline void Storage_Schema::WritePersistentObjectHeader(const Handle(Standard_Persistent)& sp,Storage_BaseDriver& f) 
{
  f.WritePersistentObjectHeader(sp->_refnum,sp->_typenum);
}

inline void Storage_Schema::ReadPersistentObjectHeader(Storage_BaseDriver& f) 
{
  Standard_Integer i,j;

  f.ReadPersistentObjectHeader(i,j);
}

inline Standard_Boolean Storage_Schema::HasTypeBinding(const TCollection_AsciiString& aTypeName) const
{
  return Storage_Schema::ICurrentData()->InternalData()->myTypeBinding.IsBound(aTypeName);
}

inline void Storage_Schema::WritePersistentReference(const Handle(Standard_Persistent)& sp,Storage_BaseDriver& f) 
{
  if (!sp.IsNull()) {
    f.PutReference(sp->_refnum);
  }
  else {
    f.PutReference(0);
  }
}

