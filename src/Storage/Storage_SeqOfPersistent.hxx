// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Storage_SeqOfPersistent_HeaderFile
#define _Storage_SeqOfPersistent_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TCollection_BaseSequence_HeaderFile
#include <TCollection_BaseSequence.hxx>
#endif
#ifndef _Handle_Standard_Persistent_HeaderFile
#include <Handle_Standard_Persistent.hxx>
#endif
#ifndef _Handle_Storage_SequenceNodeOfSeqOfPersistent_HeaderFile
#include <Handle_Storage_SequenceNodeOfSeqOfPersistent.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_NoSuchObject;
class Standard_OutOfRange;
class Standard_Persistent;
class Storage_SequenceNodeOfSeqOfPersistent;



class Storage_SeqOfPersistent  : public TCollection_BaseSequence {
public:

  DEFINE_STANDARD_ALLOC

  
      Storage_SeqOfPersistent();
  
  Standard_EXPORT     void Clear() ;
~Storage_SeqOfPersistent()
{
  Clear();
}
  
  Standard_EXPORT    const Storage_SeqOfPersistent& Assign(const Storage_SeqOfPersistent& Other) ;
   const Storage_SeqOfPersistent& operator =(const Storage_SeqOfPersistent& Other) 
{
  return Assign(Other);
}
  
  Standard_EXPORT     void Append(const Handle(Standard_Persistent)& T) ;
  
        void Append(Storage_SeqOfPersistent& S) ;
  
  Standard_EXPORT     void Prepend(const Handle(Standard_Persistent)& T) ;
  
        void Prepend(Storage_SeqOfPersistent& S) ;
  
        void InsertBefore(const Standard_Integer Index,const Handle(Standard_Persistent)& T) ;
  
        void InsertBefore(const Standard_Integer Index,Storage_SeqOfPersistent& S) ;
  
  Standard_EXPORT     void InsertAfter(const Standard_Integer Index,const Handle(Standard_Persistent)& T) ;
  
        void InsertAfter(const Standard_Integer Index,Storage_SeqOfPersistent& S) ;
  
  Standard_EXPORT    const Handle_Standard_Persistent& First() const;
  
  Standard_EXPORT    const Handle_Standard_Persistent& Last() const;
  
        void Split(const Standard_Integer Index,Storage_SeqOfPersistent& Sub) ;
  
  Standard_EXPORT    const Handle_Standard_Persistent& Value(const Standard_Integer Index) const;
   const Handle_Standard_Persistent& operator()(const Standard_Integer Index) const
{
  return Value(Index);
}
  
  Standard_EXPORT     void SetValue(const Standard_Integer Index,const Handle(Standard_Persistent)& I) ;
  
  Standard_EXPORT     Handle_Standard_Persistent& ChangeValue(const Standard_Integer Index) ;
    Handle_Standard_Persistent& operator()(const Standard_Integer Index) 
{
  return ChangeValue(Index);
}
  
  Standard_EXPORT     void Remove(const Standard_Integer Index) ;
  
  Standard_EXPORT     void Remove(const Standard_Integer FromIndex,const Standard_Integer ToIndex) ;





protected:





private:

  
  Standard_EXPORT   Storage_SeqOfPersistent(const Storage_SeqOfPersistent& Other);




};

#define SeqItem Handle_Standard_Persistent
#define SeqItem_hxx <Standard_Persistent.hxx>
#define TCollection_SequenceNode Storage_SequenceNodeOfSeqOfPersistent
#define TCollection_SequenceNode_hxx <Storage_SequenceNodeOfSeqOfPersistent.hxx>
#define Handle_TCollection_SequenceNode Handle_Storage_SequenceNodeOfSeqOfPersistent
#define TCollection_SequenceNode_Type_() Storage_SequenceNodeOfSeqOfPersistent_Type_()
#define TCollection_Sequence Storage_SeqOfPersistent
#define TCollection_Sequence_hxx <Storage_SeqOfPersistent.hxx>

#include <TCollection_Sequence.lxx>

#undef SeqItem
#undef SeqItem_hxx
#undef TCollection_SequenceNode
#undef TCollection_SequenceNode_hxx
#undef Handle_TCollection_SequenceNode
#undef TCollection_SequenceNode_Type_
#undef TCollection_Sequence
#undef TCollection_Sequence_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
