// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Graphic3d_Group.hxx>
#include <Prs3d_LineAspect.hxx>
#include <TColgp_SequenceOfPnt.hxx>

//=======================================================================
//function : Add
//purpose  : 
//=======================================================================

void Prs3d_HLRShape::Add(const Handle (Prs3d_Presentation)& aPresentation,
			 const anyShape&                    aShape,
			 const Handle (Prs3d_Drawer)&       aDrawer,
			 const Handle (Prs3d_Projector)&    aProjector)
{
  HLRShapeTool Tool(aShape,aProjector->Projector());
  Standard_Integer NbEdge = Tool.NbEdges();
  Standard_Integer i;
  Standard_Real U1,U2;
  anyCurve TheCurve;
  Standard_Real def = aDrawer->MaximalChordialDeviation();
  Handle(Graphic3d_Group) aGroup = Prs3d_Root::CurrentGroup(aPresentation);

  aGroup->SetPrimitivesAspect(aDrawer->SeenLineAspect()->Aspect());
  
  Standard_Real anAngle = aDrawer->DeviationAngle();
  TColgp_SequenceOfPnt Points;
  for (i=1;i<=NbEdge;i++){
    for(Tool.InitVisible(i);Tool.MoreVisible();Tool.NextVisible()){
      Tool.Visible(TheCurve,U1,U2);
      CurvePresentation::Add(aPresentation,TheCurve,U1,U2,def, Points, anAngle);
    }
  }

  if(aDrawer->DrawHiddenLine())
  {
    aGroup->SetPrimitivesAspect(aDrawer->HiddenLineAspect()->Aspect());     
    
    for (i=1;i<=NbEdge;i++){
      for(Tool.InitHidden(i);Tool.MoreHidden();Tool.NextHidden()){
	Tool.Hidden(TheCurve,U1,U2);
	CurvePresentation::Add(aPresentation,TheCurve,U1,U2,def, Points, anAngle);
      }
    }
  }
}   

