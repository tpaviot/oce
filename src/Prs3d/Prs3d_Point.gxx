// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Graphic3d_Vertex.hxx>
#include <Graphic3d_Group.hxx>
#include <Prs3d_PointAspect.hxx>

static void DrawPoint (const anyPoint& aPoint,
                       const Handle(Graphic3d_Group) aGroup)
{
  Quantity_Length x,y,z;
  PointTool::Coord(aPoint,x,y,z);
  Graphic3d_Vertex Vertex(x,y,z);
  aGroup->Marker(Vertex);
}

void Prs3d_Point::Add (const Handle (Prs3d_Presentation)& aPresentation,
		     const anyPoint& aPoint,
		     const Handle (Prs3d_Drawer)& aDrawer)
{
  Handle(Graphic3d_Group) TheGroup = Prs3d_Root::CurrentGroup(aPresentation);
  TheGroup->SetPrimitivesAspect(aDrawer->PointAspect()->Aspect());
  DrawPoint(aPoint,TheGroup);
}

void Prs3d_Point::Add (const Handle (Prs3d_Presentation)& aPresentation, const anyPoint& aPoint)
{
  DrawPoint(aPoint,Prs3d_Root::CurrentGroup(aPresentation));
}


Standard_Boolean Prs3d_Point::Match (const anyPoint& aPoint,
				     const Quantity_Length X,
				     const Quantity_Length Y,
				     const Quantity_Length Z,
				     const Quantity_Length aDistance)
{
  Quantity_Length x,y,z;
  PointTool::Coord(aPoint,x,y,z);
  return Sqrt( (X-x)*(X-x) + (Y-y)*(Y-y) + (Z-z)*(Z-z) ) <= aDistance;
}
