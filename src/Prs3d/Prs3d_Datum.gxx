// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#define IMP120100   // YFR/GG 10/01/2000 
//      Enable to compute the triedhron color texts and arrows.

#include <Graphic3d_Group.hxx>
#include <Graphic3d_AspectMarker3d.hxx>
#include <Graphic3d_AspectLine3d.hxx>
#include <Prs3d_Arrow.hxx>
#include <gp_Dir.hxx>
#include <gp_Pnt.hxx>
#include <gp_Ax2.hxx>
#include <Prs3d_LineAspect.hxx>
#include <Prs3d_DatumAspect.hxx>
#include <Prs3d_TextAspect.hxx>
#include <Prs3d_ArrowAspect.hxx>
#include <Graphic3d_ArrayOfSegments.hxx>

void Prs3d_Datum::Add( const Handle(Prs3d_Presentation)& aPresentation,
                       const anyDatum& aDatum,
                       const Handle(Prs3d_Drawer)& aDrawer )
{
  Handle(Prs3d_DatumAspect) DA = aDrawer->DatumAspect();
  Handle(Graphic3d_Group) G = Prs3d_Root::CurrentGroup(aPresentation);

  Quantity_Color Col; Aspect_TypeOfLine Tol; Standard_Real W;
  DA->FirstAxisAspect()->Aspect()->Values(Col,Tol,W);

  Handle(Graphic3d_AspectMarker3d) Asp = new Graphic3d_AspectMarker3d(Aspect_TOM_BALL,Col,.1);

  gp_Ax2 Axis = DatumTool::Ax2(aDatum);
  gp_Pnt Orig = Axis.Location();
  gp_Dir oX = Axis.XDirection();
  gp_Dir oY = Axis.YDirection();
  gp_Dir oZ = Axis.Direction();

//
// Trace d'une petite sphere au debut du vecteur:
//

  Quantity_Length xo,yo,zo;
  Orig.Coord(xo,yo,zo);
  G->SetPrimitivesAspect(Asp);
  G->Marker(Graphic3d_Vertex (xo,yo,zo));

  Quantity_Length DS;
  Quantity_Length arrowAngle = aDrawer->ArrowAspect()->Angle();
  Quantity_Length textHeight = aDrawer->TextAspect()->Height();

  Handle(Graphic3d_ArrayOfSegments) aPrims;
  if (DA->DrawFirstAndSecondAxis())
  {
    DS = DA->FirstAxisLength();
    const gp_Pnt p1(Orig.XYZ() + oX.XYZ()*DS);
    
    G->SetPrimitivesAspect(DA->FirstAxisAspect()->Aspect());
    aPrims = new Graphic3d_ArrayOfSegments(2);
    aPrims->AddVertex(Orig);
    aPrims->AddVertex(p1);
    G->AddPrimitiveArray(aPrims);

    G->SetPrimitivesAspect(aDrawer->ArrowAspect()->Aspect());
    Prs3d_Arrow::Draw(aPresentation,p1,oX,arrowAngle,DS/10.);
    G->SetPrimitivesAspect(aDrawer->TextAspect()->Aspect());
    Graphic3d_Vertex v1(p1.X(),p1.Y(),p1.Z());
    G->Text(Standard_CString("X"),v1,16.);

    DS = DA->SecondAxisLength();
    const gp_Pnt p2(Orig.XYZ() + oY.XYZ()*DS);

    G->SetPrimitivesAspect(DA->SecondAxisAspect()->Aspect());
    aPrims = new Graphic3d_ArrayOfSegments(2);
    aPrims->AddVertex(Orig);
    aPrims->AddVertex(p2);
    G->AddPrimitiveArray(aPrims);

    G->SetPrimitivesAspect(aDrawer->ArrowAspect()->Aspect());
    Prs3d_Arrow::Draw(aPresentation,p2,oY,arrowAngle,DS/10.);
    G->SetPrimitivesAspect(aDrawer->TextAspect()->Aspect());
    Graphic3d_Vertex v2(p2.X(),p2.Y(),p2.Z());
    G->Text(Standard_CString("Y"),v2,16.);
  }
  if (DA->DrawThirdAxis())
  {
    DS = DA->ThirdAxisLength();
    const gp_Pnt p3(Orig.XYZ() + oZ.XYZ()*DS);

    G->SetPrimitivesAspect(DA->ThirdAxisAspect()->Aspect());
    aPrims = new Graphic3d_ArrayOfSegments(2);
    aPrims->AddVertex(Orig);
    aPrims->AddVertex(p3);
    G->AddPrimitiveArray(aPrims);

    G->SetPrimitivesAspect(aDrawer->ArrowAspect()->Aspect());
    Prs3d_Arrow::Draw(aPresentation,p3,oZ,arrowAngle,DS/10.);
    G->SetPrimitivesAspect(aDrawer->TextAspect()->Aspect());
    Graphic3d_Vertex v3(p3.X(),p3.Y(),p3.Z());
    G->Text(Standard_CString("Z"),v3,16.);
  }
}
