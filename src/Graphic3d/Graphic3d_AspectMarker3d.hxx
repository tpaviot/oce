// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Graphic3d_AspectMarker3d_HeaderFile
#define _Graphic3d_AspectMarker3d_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectMarker3d_HeaderFile
#include <Handle_Graphic3d_AspectMarker3d.hxx>
#endif

#ifndef _Handle_TColStd_HArray1OfByte_HeaderFile
#include <Handle_TColStd_HArray1OfByte.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Aspect_AspectMarker_HeaderFile
#include <Aspect_AspectMarker.hxx>
#endif
#ifndef _Aspect_TypeOfMarker_HeaderFile
#include <Aspect_TypeOfMarker.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class TColStd_HArray1OfByte;
class Quantity_Color;


//! Creates and updates an attribute group for <br>
//!	    marker type primitives. This group contains the type <br>
//!	    of marker, its colour, and its scale factor. <br>
class Graphic3d_AspectMarker3d : public Aspect_AspectMarker {

public:

  //! Creates a context table for marker primitives <br>
//!	    defined with the following default values: <br>
  Standard_EXPORT   Graphic3d_AspectMarker3d();
  
  Standard_EXPORT   Graphic3d_AspectMarker3d(const Aspect_TypeOfMarker AType,const Quantity_Color& AColor,const Standard_Real AScaleOrId);
  //! Creates a context table for marker primitives <br>
//!	    defined with the specified values. <br>
  Standard_EXPORT   Graphic3d_AspectMarker3d(const Aspect_TypeOfMarker AType,const Quantity_Color& AColor,const Standard_Real AScaleOrId,const Standard_Integer AWidth,const Standard_Integer AHeight,const Handle(TColStd_HArray1OfByte)& ATexture);
  //! Returns marker's texture size. <br>
  Standard_EXPORT     void GetTextureSize(Standard_Integer& AWidth,Standard_Integer& AHeight) ;
  //! Returns marker's texture. <br>
  Standard_EXPORT    const Handle_TColStd_HArray1OfByte& GetTexture() ;
  
  Standard_EXPORT     void SetTexture(const Standard_Integer AWidth,const Standard_Integer AHeight,const Handle(TColStd_HArray1OfByte)& ATexture) ;




  DEFINE_STANDARD_RTTI(Graphic3d_AspectMarker3d)

protected:


Handle_TColStd_HArray1OfByte MyTexture;
Standard_Integer MyTextureWidth;
Standard_Integer MyTextureHeight;


private: 




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
