// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Geom2dGcc_Circ2d2TanOn_HeaderFile
#define _Geom2dGcc_Circ2d2TanOn_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TColgp_Array1OfCirc2d_HeaderFile
#include <TColgp_Array1OfCirc2d.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _GccEnt_Array1OfPosition_HeaderFile
#include <GccEnt_Array1OfPosition.hxx>
#endif
#ifndef _TColStd_Array1OfInteger_HeaderFile
#include <TColStd_Array1OfInteger.hxx>
#endif
#ifndef _TColgp_Array1OfPnt2d_HeaderFile
#include <TColgp_Array1OfPnt2d.hxx>
#endif
#ifndef _TColStd_Array1OfReal_HeaderFile
#include <TColStd_Array1OfReal.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Handle_Geom2d_Point_HeaderFile
#include <Handle_Geom2d_Point.hxx>
#endif
#ifndef _GccEnt_Position_HeaderFile
#include <GccEnt_Position.hxx>
#endif
class StdFail_NotDone;
class GccEnt_BadQualifier;
class Standard_OutOfRange;
class Geom2dGcc_QualifiedCurve;
class Geom2dAdaptor_Curve;
class Geom2d_Point;
class GccAna_Circ2d2TanOn;
class Geom2dGcc_MyCirc2d2TanOn;
class gp_Circ2d;
class gp_Pnt2d;


//! This class implements the algorithms used to <br>
//!          create 2d circles TANgent to 2 entities and <br>
//!          having the center ON a curve. <br>
//!          The order of the tangency argument is always <br>
//!          QualifiedCirc, QualifiedLin, QualifiedCurv, Pnt2d. <br>
//!          the arguments are : <br>
//!            - The two tangency arguments. <br>
//!            - The center line. <br>
//!            - The parameter for each tangency argument which <br>
//!            is a curve. <br>
//!            - The tolerance. <br>
class Geom2dGcc_Circ2d2TanOn  {
public:

  DEFINE_STANDARD_ALLOC

  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to two curves and <br>
//!          having the center ON a 2d curve. <br>
//!          Param1 is the initial guess on the first curve QualifiedCurv. <br>
//!          Param1 is the initial guess on the second curve QualifiedCurv. <br>
//!          ParamOn is the initial guess on the center curve OnCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOn(const Geom2dGcc_QualifiedCurve& Qualified1,const Geom2dGcc_QualifiedCurve& Qualified2,const Geom2dAdaptor_Curve& OnCurve,const Standard_Real Tolerance,const Standard_Real Param1,const Standard_Real Param2,const Standard_Real ParamOn);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to one curve and one point and <br>
//!          having the center ON a 2d curve. <br>
//!          Param1 is the initial guess on the first curve QualifiedCurv. <br>
//!          ParamOn is the initial guess on the center curve OnCurv. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOn(const Geom2dGcc_QualifiedCurve& Qualified1,const Handle(Geom2d_Point)& Point,const Geom2dAdaptor_Curve& OnCurve,const Standard_Real Tolerance,const Standard_Real Param1,const Standard_Real ParamOn);
  //! This method implements the algorithms used to <br>
//!          create 2d circles TANgent to two points and <br>
//!          having the center ON a 2d curve. <br>
//!          Tolerance is used for the limit cases. <br>
  Standard_EXPORT   Geom2dGcc_Circ2d2TanOn(const Handle(Geom2d_Point)& Point1,const Handle(Geom2d_Point)& Point2,const Geom2dAdaptor_Curve& OnCurve,const Standard_Real Tolerance);
  
  Standard_EXPORT     void Results(const GccAna_Circ2d2TanOn& Circ) ;
  
  Standard_EXPORT     void Results(const Geom2dGcc_MyCirc2d2TanOn& Circ) ;
  //! Returns true if the construction algorithm does not fail <br>
//!          (even if it finds no solution). <br>
//!          Note: IsDone protects against a failure arising from a <br>
//!          more internal intersection algorithm, which has <br>
//!          reached its numeric limits. <br>
  Standard_EXPORT     Standard_Boolean IsDone() const;
  //! This method returns the number of solutions. <br>
//!          NotDone is raised if the algorithm failed. <br>
  Standard_EXPORT     Standard_Integer NbSolutions() const;
  //! Returns the solution number Index and raises OutOfRange <br>
//! exception if Index is greater than the number of solutions. <br>
//! Be carefull: the Index is only a way to get all the <br>
//! solutions, but is not associated to theses outside the context <br>
//! of the algorithm-object. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is less than or equal <br>
//! to zero or greater than the number of solutions <br>
//! computed by this algorithm. <br>
//! StdFail_NotDone if the construction fails. <br>
  Standard_EXPORT     gp_Circ2d ThisSolution(const Standard_Integer Index) const;
  //! It returns the informations about the qualifiers of <br>
//!          the tangency <br>
//!          arguments concerning the solution number Index. <br>
//!          It returns the real qualifiers (the qualifiers given to the <br>
//!          constructor method in case of enclosed, enclosing and outside <br>
//!          and the qualifiers computedin case of unqualified). <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is less than zero or <br>
//! greater than the number of solutions computed by this algorithm. <br>
//! StdFail_NotDone if the construction fails. <br>
  Standard_EXPORT     void WhichQualifier(const Standard_Integer Index,GccEnt_Position& Qualif1,GccEnt_Position& Qualif2) const;
  //! Returns informations about the tangency point between the <br>
//! result and the first argument. <br>
//! ParSol is the intrinsic parameter of the point PntSol on the solution curv. <br>
//! ParArg is the intrinsic parameter of the point PntSol on the argument curv. <br>
  Standard_EXPORT     void Tangency1(const Standard_Integer Index,Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns informations about the tangency point between the <br>
//! result and the second argument. <br>
//! ParSol is the intrinsic parameter of the point PntSol on the solution curv. <br>
//! ParArg is the intrinsic parameter of the point PntSol on the argument curv. <br>
  Standard_EXPORT     void Tangency2(const Standard_Integer Index,Standard_Real& ParSol,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns the center PntSol of the solution of index Index <br>
//! computed by this algorithm. <br>
//! ParArg is the parameter of the point PntSol on the third argument. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is less than zero or <br>
//! greater than the number of solutions computed by this algorithm. <br>
//! StdFail_NotDone if the construction fails. <br>
  Standard_EXPORT     void CenterOn3(const Standard_Integer Index,Standard_Real& ParArg,gp_Pnt2d& PntSol) const;
  //! Returns true if the solution of index Index and, <br>
//! respectively, the first or second argument of this <br>
//! algorithm are the same (i.e. there are 2 identical circles). <br>
//! If Rarg is the radius of the first or second argument, <br>
//! Rsol is the radius of the solution and dist is the <br>
//! distance between the two centers, we consider the two <br>
//! circles to be identical if |Rarg - Rsol| and dist <br>
//! are less than or equal to the tolerance criterion given at <br>
//! the time of construction of this algorithm. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is less than zero or <br>
//! greater than the number of solutions computed by this algorithm. <br>
//! StdFail_NotDone if the construction fails. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame1(const Standard_Integer Index) const;
  //! Returns true if the solution of index Index and, <br>
//! respectively, the first or second argument of this <br>
//! algorithm are the same (i.e. there are 2 identical circles). <br>
//! If Rarg is the radius of the first or second argument, <br>
//! Rsol is the radius of the solution and dist is the <br>
//! distance between the two centers, we consider the two <br>
//! circles to be identical if |Rarg - Rsol| and dist <br>
//! are less than or equal to the tolerance criterion given at <br>
//! the time of construction of this algorithm. <br>
//! Exceptions <br>
//! Standard_OutOfRange if Index is less than zero or <br>
//! greater than the number of solutions computed by this algorithm. <br>
//! StdFail_NotDone if the construction fails. <br>
  Standard_EXPORT     Standard_Boolean IsTheSame2(const Standard_Integer Index) const;





protected:





private:



Standard_Boolean WellDone;
TColgp_Array1OfCirc2d cirsol;
Standard_Integer NbrSol;
GccEnt_Array1OfPosition qualifier1;
GccEnt_Array1OfPosition qualifier2;
TColStd_Array1OfInteger TheSame1;
TColStd_Array1OfInteger TheSame2;
TColgp_Array1OfPnt2d pnttg1sol;
TColgp_Array1OfPnt2d pnttg2sol;
TColgp_Array1OfPnt2d pntcen;
TColStd_Array1OfReal par1sol;
TColStd_Array1OfReal par2sol;
TColStd_Array1OfReal pararg1;
TColStd_Array1OfReal pararg2;
TColStd_Array1OfReal parcen3;
Standard_Boolean Invert;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
