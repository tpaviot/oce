// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//=============================================================================

inline void Extrema_FuncExtCC::SetCurve (const Standard_Integer theRank, const Curve1& C)
{
  Standard_OutOfRange_Raise_if (theRank < 1 || theRank > 2, "Extrema_FuncExtCC::SetCurve()")
  if (theRank == 1) {myC1 = (Standard_Address)&C;}
  else {myC2 = (Standard_Address)&C;}
}

//=============================================================================

inline void Extrema_FuncExtCC::SetTolerance (const Standard_Real theTol)
{
  myTol = theTol;
}

//=============================================================================

inline Standard_Integer Extrema_FuncExtCC::NbVariables () const { return 2; }

//=============================================================================

inline Standard_Integer Extrema_FuncExtCC::NbEquations () const { return 2; }

//=============================================================================

inline Standard_Integer Extrema_FuncExtCC::NbExt () const { return mySqDist.Length(); }

//=============================================================================

inline Standard_Real Extrema_FuncExtCC::SquareDistance (const Standard_Integer N) const
{
  return mySqDist.Value(N);
}

//=============================================================================

inline Standard_Address Extrema_FuncExtCC::CurvePtr (const Standard_Integer theRank) const
{
  Standard_OutOfRange_Raise_if (theRank < 1 || theRank > 2, "Extrema_FuncExtCC::SetCurve()")
  return (theRank == 1 ? myC1 : myC2);
}

//=============================================================================

inline Standard_Real Extrema_FuncExtCC::Tolerance() const
{
  return myTol;
}
