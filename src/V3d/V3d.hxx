// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _V3d_HeaderFile
#define _V3d_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _V3d_TypeOfOrientation_HeaderFile
#include <V3d_TypeOfOrientation.hxx>
#endif
#ifndef _Handle_Graphic3d_Group_HeaderFile
#include <Handle_Graphic3d_Group.hxx>
#endif
#ifndef _V3d_Coordinate_HeaderFile
#include <V3d_Coordinate.hxx>
#endif
#ifndef _V3d_Parameter_HeaderFile
#include <V3d_Parameter.hxx>
#endif
#ifndef _Quantity_PlaneAngle_HeaderFile
#include <Quantity_PlaneAngle.hxx>
#endif
#ifndef _Handle_V3d_View_HeaderFile
#include <Handle_V3d_View.hxx>
#endif
#ifndef _Handle_V3d_Viewer_HeaderFile
#include <Handle_V3d_Viewer.hxx>
#endif
#ifndef _Quantity_Length_HeaderFile
#include <Quantity_Length.hxx>
#endif
class Graphic3d_Vector;
class Graphic3d_Group;
class V3d_View;
class V3d_Viewer;
class V3d_Viewer;
class V3d_View;
class V3d_OrthographicView;
class V3d_PerspectiveView;
class V3d_LayerMgr;
class V3d_Light;
class V3d_AmbientLight;
class V3d_PositionLight;
class V3d_PositionalLight;
class V3d_DirectionalLight;
class V3d_SpotLight;
class V3d_Plane;
class V3d_ListOfTransient;
class V3d_RectangularGrid;
class V3d_CircularGrid;
class V3d_ColorScale;
class V3d_ColorScaleLayerItem;


//! This package contains the set of commands and services <br>
//!          of the 3D Viewer. It provides a set of high level commands <br>
//!          to control the views and viewing modes. This package is <br>
//!          complementary to the Visual3D graphic package. <br>
//!    Warning <br>
//! The CSF_WALKTHROUGH variable enables you to <br>
//! manage the perspective of the view in the viewer by <br>
//! defining setenv CSF_WALKTHROUGH "Yes". <br>
//! If you use the syntax unsetenv <br>
//! CSF_WALKTHROUGH, you undefine the variable <br>
//! (you make sure that the variable is deactivated). In <br>
//! this case, the eye is located outside the 3D bounding <br>
//! box of the view. This is the default behavior for <br>
//! managing the view perspective. <br>
class V3d  {
public:

  DEFINE_STANDARD_ALLOC

  //! Determines the orientation vector corresponding <br>
//!          to the predefined orientation type. <br>
  Standard_EXPORT   static  Graphic3d_Vector GetProjAxis(const V3d_TypeOfOrientation Orientation) ;
  //! Compute the graphic structure of arrow. <br>
//!          X0,Y0,Z0 : coordinate of the arrow. <br>
//!          DX,DY,DZ : Direction of the arrow. <br>
//!          Alpha    : Angle of arrow. <br>
//!          Lng      : Length of arrow. <br>
  Standard_EXPORT   static  void ArrowOfRadius(const Handle(Graphic3d_Group)& garrow,const V3d_Coordinate X0,const V3d_Coordinate Y0,const V3d_Coordinate Z0,const V3d_Parameter DX,const V3d_Parameter DY,const V3d_Parameter DZ,const Quantity_PlaneAngle Alpha,const V3d_Parameter Lng) ;
  //! Compute the graphic structure of circle. <br>
//!          X0,Y0,Z0 : Center of circle. <br>
//!          VX,VY,VZ : Axis of circle. <br>
//!          Radius   : Radius of circle. <br>
  Standard_EXPORT   static  void CircleInPlane(const Handle(Graphic3d_Group)& gcircle,const V3d_Coordinate X0,const V3d_Coordinate Y0,const V3d_Coordinate Z0,const V3d_Parameter VX,const V3d_Parameter VY,const V3d_Parameter VZ,const V3d_Parameter Radius) ;
  
  Standard_EXPORT   static  void SwitchViewsinWindow(const Handle(V3d_View)& aPreviousView,const Handle(V3d_View)& aNextView) ;
  //! test. <br>
  Standard_EXPORT   static  void DrawSphere(const Handle(V3d_Viewer)& aViewer,const Quantity_Length aRadius = 1000) ;
  //! test. <br>
  Standard_EXPORT   static  void PickGrid(const Handle(V3d_Viewer)& aViewer,const Quantity_Length aRadius = 1000) ;
  //! test. <br>
  Standard_EXPORT   static  void SetPlane(const Handle(V3d_Viewer)& aViewer,const Quantity_Length x1,const Quantity_Length y1,const Quantity_Length z1,const Quantity_Length x2,const Quantity_Length y2,const Quantity_Length z2) ;





protected:





private:




friend class V3d_Viewer;
friend class V3d_View;
friend class V3d_OrthographicView;
friend class V3d_PerspectiveView;
friend class V3d_LayerMgr;
friend class V3d_Light;
friend class V3d_AmbientLight;
friend class V3d_PositionLight;
friend class V3d_PositionalLight;
friend class V3d_DirectionalLight;
friend class V3d_SpotLight;
friend class V3d_Plane;
friend class V3d_ListOfTransient;
friend class V3d_RectangularGrid;
friend class V3d_CircularGrid;
friend class V3d_ColorScale;
friend class V3d_ColorScaleLayerItem;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
