// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepMesh_GeomTool_HeaderFile
#define _BRepMesh_GeomTool_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _GCPnts_TangentialDeflection_HeaderFile
#include <GCPnts_TangentialDeflection.hxx>
#endif
#ifndef _GeomAbs_IsoType_HeaderFile
#include <GeomAbs_IsoType.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_BRepAdaptor_HSurface_HeaderFile
#include <Handle_BRepAdaptor_HSurface.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class BRepAdaptor_Curve;
class BRepAdaptor_HSurface;
class gp_Pnt;
class gp_Pnt2d;
class gp_Dir;



class BRepMesh_GeomTool  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   BRepMesh_GeomTool(BRepAdaptor_Curve& C,const Standard_Real Ufirst,const Standard_Real Ulast,const Standard_Real AngDefl,const Standard_Real Deflection,const Standard_Integer nbpointsmin = 2);
  
  Standard_EXPORT   BRepMesh_GeomTool(const Handle(BRepAdaptor_HSurface)& S,const Standard_Real ParamIso,const GeomAbs_IsoType Type,const Standard_Real Ufirst,const Standard_Real Ulast,const Standard_Real AngDefl,const Standard_Real Deflection,const Standard_Integer nbpointsmin = 2);
  //! Add point to already calculated points (or replace existing) <br>
//!          Returns index of new added point <br>
//!           or founded with parametric tolerance (replaced if theIsReplace is true) <br>
  Standard_EXPORT     Standard_Integer AddPoint(const gp_Pnt& thePnt,const Standard_Real theParam,const Standard_Boolean theIsReplace = Standard_True) ;
  
  Standard_EXPORT     Standard_Integer NbPoints() const;
  
  Standard_EXPORT     void Value(const Standard_Real IsoParam,const Standard_Integer Index,Standard_Real& W,gp_Pnt& P,gp_Pnt2d& UV) const;
  
  Standard_EXPORT     void Value(const BRepAdaptor_Curve& C,const Handle(BRepAdaptor_HSurface)& S,const Standard_Integer Index,Standard_Real& W,gp_Pnt& P,gp_Pnt2d& UV) const;
  
  Standard_EXPORT   static  void D0(const Handle(BRepAdaptor_HSurface)& F,const Standard_Real U,const Standard_Real V,gp_Pnt& P) ;
  //! return false if the normal can not be computed <br>
  Standard_EXPORT   static  Standard_Boolean Normal(const Handle(BRepAdaptor_HSurface)& F,const Standard_Real U,const Standard_Real V,gp_Pnt& P,gp_Dir& Nor) ;





protected:





private:



GCPnts_TangentialDeflection pnts;
GeomAbs_IsoType parametric;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
