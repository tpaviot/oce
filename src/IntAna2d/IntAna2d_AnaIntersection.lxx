// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <StdFail_NotDone.hxx>
#include <Standard_OutOfRange.hxx>

inline Standard_Boolean IntAna2d_AnaIntersection::IsDone () const {
  return done;
}

inline Standard_Boolean IntAna2d_AnaIntersection::IsEmpty () const {
  
  if (!done) {
    StdFail_NotDone::Raise();
  }
  return ((nbp==0)&&(!iden));
}

inline Standard_Boolean IntAna2d_AnaIntersection::IdenticalElements () const {
  
  if (!done) {
    StdFail_NotDone::Raise();
  }
  return iden ;
}

inline Standard_Boolean IntAna2d_AnaIntersection::ParallelElements () const {
  
  if (!done) {
    StdFail_NotDone::Raise();
  }
  return para ;
}

inline Standard_Integer IntAna2d_AnaIntersection::NbPoints () const {
  
  if (!done) {
    StdFail_NotDone::Raise();
  }
  return nbp ;
}

inline const IntAna2d_IntPoint& IntAna2d_AnaIntersection::Point (const Standard_Integer N) const {
  
  if (!done) {
    StdFail_NotDone::Raise();
    return lpnt[0];
  }
  else {
    if ((N<=0)||(N>nbp)) {
      Standard_OutOfRange::Raise();
      return lpnt[0];
    }
    else {
      return lpnt[N-1];
    }
  }
}

