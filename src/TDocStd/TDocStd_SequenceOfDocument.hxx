// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TDocStd_SequenceOfDocument_HeaderFile
#define _TDocStd_SequenceOfDocument_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TCollection_BaseSequence_HeaderFile
#include <TCollection_BaseSequence.hxx>
#endif
#ifndef _Handle_TDocStd_Document_HeaderFile
#include <Handle_TDocStd_Document.hxx>
#endif
#ifndef _Handle_TDocStd_SequenceNodeOfSequenceOfDocument_HeaderFile
#include <Handle_TDocStd_SequenceNodeOfSequenceOfDocument.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_NoSuchObject;
class Standard_OutOfRange;
class TDocStd_Document;
class TDocStd_SequenceNodeOfSequenceOfDocument;



class TDocStd_SequenceOfDocument  : public TCollection_BaseSequence {
public:

  DEFINE_STANDARD_ALLOC

  
      TDocStd_SequenceOfDocument();
  
  Standard_EXPORT     void Clear() ;
~TDocStd_SequenceOfDocument()
{
  Clear();
}
  
  Standard_EXPORT    const TDocStd_SequenceOfDocument& Assign(const TDocStd_SequenceOfDocument& Other) ;
   const TDocStd_SequenceOfDocument& operator =(const TDocStd_SequenceOfDocument& Other) 
{
  return Assign(Other);
}
  
  Standard_EXPORT     void Append(const Handle(TDocStd_Document)& T) ;
  
        void Append(TDocStd_SequenceOfDocument& S) ;
  
  Standard_EXPORT     void Prepend(const Handle(TDocStd_Document)& T) ;
  
        void Prepend(TDocStd_SequenceOfDocument& S) ;
  
        void InsertBefore(const Standard_Integer Index,const Handle(TDocStd_Document)& T) ;
  
        void InsertBefore(const Standard_Integer Index,TDocStd_SequenceOfDocument& S) ;
  
  Standard_EXPORT     void InsertAfter(const Standard_Integer Index,const Handle(TDocStd_Document)& T) ;
  
        void InsertAfter(const Standard_Integer Index,TDocStd_SequenceOfDocument& S) ;
  
  Standard_EXPORT    const Handle_TDocStd_Document& First() const;
  
  Standard_EXPORT    const Handle_TDocStd_Document& Last() const;
  
        void Split(const Standard_Integer Index,TDocStd_SequenceOfDocument& Sub) ;
  
  Standard_EXPORT    const Handle_TDocStd_Document& Value(const Standard_Integer Index) const;
   const Handle_TDocStd_Document& operator()(const Standard_Integer Index) const
{
  return Value(Index);
}
  
  Standard_EXPORT     void SetValue(const Standard_Integer Index,const Handle(TDocStd_Document)& I) ;
  
  Standard_EXPORT     Handle_TDocStd_Document& ChangeValue(const Standard_Integer Index) ;
    Handle_TDocStd_Document& operator()(const Standard_Integer Index) 
{
  return ChangeValue(Index);
}
  
  Standard_EXPORT     void Remove(const Standard_Integer Index) ;
  
  Standard_EXPORT     void Remove(const Standard_Integer FromIndex,const Standard_Integer ToIndex) ;





protected:





private:

  
  Standard_EXPORT   TDocStd_SequenceOfDocument(const TDocStd_SequenceOfDocument& Other);




};

#define SeqItem Handle_TDocStd_Document
#define SeqItem_hxx <TDocStd_Document.hxx>
#define TCollection_SequenceNode TDocStd_SequenceNodeOfSequenceOfDocument
#define TCollection_SequenceNode_hxx <TDocStd_SequenceNodeOfSequenceOfDocument.hxx>
#define Handle_TCollection_SequenceNode Handle_TDocStd_SequenceNodeOfSequenceOfDocument
#define TCollection_SequenceNode_Type_() TDocStd_SequenceNodeOfSequenceOfDocument_Type_()
#define TCollection_Sequence TDocStd_SequenceOfDocument
#define TCollection_Sequence_hxx <TDocStd_SequenceOfDocument.hxx>

#include <TCollection_Sequence.lxx>

#undef SeqItem
#undef SeqItem_hxx
#undef TCollection_SequenceNode
#undef TCollection_SequenceNode_hxx
#undef Handle_TCollection_SequenceNode
#undef TCollection_SequenceNode_Type_
#undef TCollection_Sequence
#undef TCollection_Sequence_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
