// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TDocStd_XLinkRoot_HeaderFile
#define _TDocStd_XLinkRoot_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_TDocStd_XLinkRoot_HeaderFile
#include <Handle_TDocStd_XLinkRoot.hxx>
#endif

#ifndef _TDocStd_XLinkPtr_HeaderFile
#include <TDocStd_XLinkPtr.hxx>
#endif
#ifndef _TDF_Attribute_HeaderFile
#include <TDF_Attribute.hxx>
#endif
#ifndef _Handle_TDF_Data_HeaderFile
#include <Handle_TDF_Data.hxx>
#endif
#ifndef _Handle_TDF_Attribute_HeaderFile
#include <Handle_TDF_Attribute.hxx>
#endif
#ifndef _Handle_TDF_RelocationTable_HeaderFile
#include <Handle_TDF_RelocationTable.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class TDocStd_XLinkIterator;
class Standard_GUID;
class TDF_Data;
class TDF_Attribute;
class TDF_RelocationTable;


//! This attribute is the root of all external <br>
//!          references contained in a Data from TDF. Only one <br>
//!          instance of this class is added to the TDF_Data <br>
//!          root label. Starting from this attribute all the <br>
//!          Reference are linked together, to be found <br>
//!          easely. <br>
class TDocStd_XLinkRoot : public TDF_Attribute {

public:

  //! Returns the ID: 2a96b61d-ec8b-11d0-bee7-080009dc3333 <br>
//! <br>
  Standard_EXPORT   static const Standard_GUID& GetID() ;
  //! Sets an empty XLinkRoot to Root or gets the <br>
//!          existing one. Only one attribute per TDF_Data. <br>
  Standard_EXPORT   static  Handle_TDocStd_XLinkRoot Set(const Handle(TDF_Data)& aDF) ;
  //! Inserts <anXLinkPtr> at the beginning of the XLink chain. <br>
  Standard_EXPORT   static  void Insert(const TDocStd_XLinkPtr& anXLinkPtr) ;
  //! Removes <anXLinkPtr> from the XLink chain, if it exists. <br>
  Standard_EXPORT   static  void Remove(const TDocStd_XLinkPtr& anXLinkPtr) ;
  //! Returns the ID of the attribute. <br>
//! <br>
  Standard_EXPORT    const Standard_GUID& ID() const;
  //! Returns a null handle. <br>
  Standard_EXPORT     Handle_TDF_Attribute BackupCopy() const;
  //! Does nothing. <br>
  Standard_EXPORT     void Restore(const Handle(TDF_Attribute)& anAttribute) ;
  //! Returns a null handle. <br>
  Standard_EXPORT     Handle_TDF_Attribute NewEmpty() const;
  //! Does nothing. <br>
  Standard_EXPORT     void Paste(const Handle(TDF_Attribute)& intoAttribute,const Handle(TDF_RelocationTable)& aRelocationTable) const;
  //! Dumps the attribute on <aStream>. <br>
  Standard_EXPORT     Standard_OStream& Dump(Standard_OStream& anOS) const;


friend class TDocStd_XLinkIterator;


  DEFINE_STANDARD_RTTI(TDocStd_XLinkRoot)

protected:




private: 

  //! Initializes fields. <br>
  Standard_EXPORT   TDocStd_XLinkRoot();
  //! Sets the field <myFirst> with <anXLinkPtr>. <br>
//! <br>
        void First(const TDocStd_XLinkPtr& anXLinkPtr) ;
  //! Returns the contents of the field <myFirst>. <br>
//! <br>
        TDocStd_XLinkPtr First() const;

TDocStd_XLinkPtr myFirst;


};


#include <TDocStd_XLinkRoot.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
