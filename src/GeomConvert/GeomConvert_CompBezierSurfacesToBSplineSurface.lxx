// Created on: 1996-06-07
// Created by: Philippe MANGIN
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <TColStd_HArray1OfReal.hxx>
#include <TColgp_HArray2OfPnt.hxx>

// ================================================================================
inline Standard_Integer 
GeomConvert_CompBezierSurfacesToBSplineSurface::NbUKnots() const 
// ================================================================================
{
  return myUKnots->Length();
}

// ================================================================================
inline Standard_Integer
GeomConvert_CompBezierSurfacesToBSplineSurface::NbUPoles() const 
// ================================================================================
{
  return myPoles->ColLength(); 
}

// ================================================================================
inline Standard_Integer 
GeomConvert_CompBezierSurfacesToBSplineSurface::NbVKnots() const 
// ================================================================================
{
  return myVKnots->Length();
}

// ================================================================================
inline Standard_Integer 
GeomConvert_CompBezierSurfacesToBSplineSurface::NbVPoles() const 
// ================================================================================
{
 return myPoles->RowLength();
}

// ================================================================================
inline const Handle(TColgp_HArray2OfPnt)& 
GeomConvert_CompBezierSurfacesToBSplineSurface::Poles() const 
// ================================================================================
{
 return myPoles;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfReal)& 
GeomConvert_CompBezierSurfacesToBSplineSurface::UKnots() const
// ================================================================================ 
{
 return myUKnots;
}

// ================================================================================
inline Standard_Integer 
GeomConvert_CompBezierSurfacesToBSplineSurface::UDegree() const
// ================================================================================ 
{
 return myUDegree;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfReal)& 
GeomConvert_CompBezierSurfacesToBSplineSurface::VKnots() const 
// ================================================================================
{
 return myVKnots;
}

// ================================================================================
inline Standard_Integer 
GeomConvert_CompBezierSurfacesToBSplineSurface::VDegree() const
// ================================================================================ 
{
 return myVDegree;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfInteger)& 
GeomConvert_CompBezierSurfacesToBSplineSurface::UMultiplicities() const 
// ================================================================================
{
  return myUMults;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfInteger)& 
GeomConvert_CompBezierSurfacesToBSplineSurface::VMultiplicities() const 
// ================================================================================
{
  return myVMults;
}

