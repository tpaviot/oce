// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GeomConvert_CompCurveToBSplineCurve_HeaderFile
#define _GeomConvert_CompCurveToBSplineCurve_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Geom_BSplineCurve_HeaderFile
#include <Handle_Geom_BSplineCurve.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Convert_ParameterisationType_HeaderFile
#include <Convert_ParameterisationType.hxx>
#endif
#ifndef _Handle_Geom_BoundedCurve_HeaderFile
#include <Handle_Geom_BoundedCurve.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Geom_BSplineCurve;
class Geom_BoundedCurve;


//! Concat several curve in an BSplineCurve <br>
class GeomConvert_CompCurveToBSplineCurve  {
public:

  DEFINE_STANDARD_ALLOC

  //! Initialize the algorithme with one curve <br>
//!        - Parameterisation is used to convert <br>
  Standard_EXPORT   GeomConvert_CompCurveToBSplineCurve(const Handle(Geom_BoundedCurve)& BasisCurve,const Convert_ParameterisationType Parameterisation = Convert_TgtThetaOver2);
  //! Append a curve in  the BSpline Return False if the <br>
//!          curve is not G0  with the BSplineCurve.  Tolerance <br>
//!             is   used to   check   continuity  and decrease <br>
//!          Multiplicity at the common Knot until MinM <br>
//!          if MinM = 0, the common Knot can be removed <br>
  Standard_EXPORT     Standard_Boolean Add(const Handle(Geom_BoundedCurve)& NewCurve,const Standard_Real Tolerance,const Standard_Boolean After = Standard_False,const Standard_Boolean WithRatio = Standard_True,const Standard_Integer MinM = 0) ;
  
  Standard_EXPORT     Handle_Geom_BSplineCurve BSplineCurve() const;





protected:





private:

  //! Concat two BSplineCurves. <br>
  Standard_EXPORT     void Add(Handle(Geom_BSplineCurve)& FirstCurve,Handle(Geom_BSplineCurve)& SecondCurve,const Standard_Boolean After,const Standard_Boolean WithRatio,const Standard_Integer MinM) ;


Handle_Geom_BSplineCurve myCurve;
Standard_Real myTol;
Convert_ParameterisationType myType;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
