// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Visual3d_ClipPlane_HeaderFile
#define _Visual3d_ClipPlane_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Visual3d_ClipPlane_HeaderFile
#include <Handle_Visual3d_ClipPlane.hxx>
#endif

#ifndef _Graphic3d_CPlane_HeaderFile
#include <Graphic3d_CPlane.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Visual3d_View;


//! This class allows the definition and update <br>
//!	    of clipping planes in the space model. <br>
class Visual3d_ClipPlane : public MMgt_TShared {

public:

  //! Creates a clipping plane from the equation : <br>
//!	    <ACoefA>*X + <ACoefB>*Y + <ACoefC>*Z + <ACoefD> = 0.0 <br>
  Standard_EXPORT   Visual3d_ClipPlane(const Standard_Real ACoefA,const Standard_Real ACoefB,const Standard_Real ACoefC,const Standard_Real ACoefD);
  //! Modifies the plane equation. <br>
  Standard_EXPORT     void SetPlane(const Standard_Real ACoefA,const Standard_Real ACoefB,const Standard_Real ACoefC,const Standard_Real ACoefD) ;
  //! Maximum number of activatable clipping planes. <br>
  Standard_EXPORT   static  Standard_Integer Limit() ;
  //! Returns the values of the clipping plane <me>. <br>
  Standard_EXPORT     void Plane(Standard_Real& ACoefA,Standard_Real& ACoefB,Standard_Real& ACoefC,Standard_Real& ACoefD) const;


friend class Visual3d_View;


  DEFINE_STANDARD_RTTI(Visual3d_ClipPlane)

protected:




private: 

  //! Returns the plane identification. <br>
  Standard_EXPORT     Standard_Integer Identification() const;

Graphic3d_CPlane MyCPlane;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
