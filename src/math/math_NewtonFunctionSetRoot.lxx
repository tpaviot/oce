// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <StdFail_NotDone.hxx>

inline Standard_Boolean math_NewtonFunctionSetRoot::IsDone()  const
                                                    { return Done;}

inline Standard_OStream& operator<<(Standard_OStream& o,
				    const math_NewtonFunctionSetRoot& N)
{
  N.Dump(o);
  return o;
}


inline const math_Vector& math_NewtonFunctionSetRoot::Root() const{ 
  StdFail_NotDone_Raise_if(!Done, " ");
  return Sol;
}


inline void math_NewtonFunctionSetRoot::Root(math_Vector& Root) const{
  StdFail_NotDone_Raise_if(!Done, " ");
  Root = Sol;
}


inline const math_Matrix& math_NewtonFunctionSetRoot::Derivative() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Jacobian;
}


inline  void math_NewtonFunctionSetRoot::Derivative(math_Matrix& Der) const{
  StdFail_NotDone_Raise_if(!Done, " ");
  Der = Jacobian;
}


inline const math_Vector& math_NewtonFunctionSetRoot::FunctionSetErrors() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return DeltaX;
}


inline  void math_NewtonFunctionSetRoot::FunctionSetErrors(math_Vector& Err) const{ 
  StdFail_NotDone_Raise_if(!Done, " ");
  Err = DeltaX;
}


inline  Standard_Integer math_NewtonFunctionSetRoot::NbIterations() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Iter;
}


