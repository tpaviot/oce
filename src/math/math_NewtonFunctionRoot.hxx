// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _math_NewtonFunctionRoot_HeaderFile
#define _math_NewtonFunctionRoot_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class StdFail_NotDone;
class math_FunctionWithDerivative;



//! This class implements the calculation of a root of a function of <br>
//! a single variable starting from an initial near guess using the <br>
//! Newton algorithm. Knowledge of the derivative is required. <br>
class math_NewtonFunctionRoot  {
public:

  DEFINE_STANDARD_ALLOC

  
//! The Newton method is done to find the root of the function F <br>
//! from the initial guess Guess. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! The solution is found when : <br>
//!  abs(Xi - Xi-1) <= EpsX and abs(F(Xi))<= EpsF <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
  Standard_EXPORT   math_NewtonFunctionRoot(math_FunctionWithDerivative& F,const Standard_Real Guess,const Standard_Real EpsX,const Standard_Real EpsF,const Standard_Integer NbIterations = 100);
  
//! The Newton method is done to find the root of the function F <br>
//! from the initial guess Guess. <br>
//! The solution must be inside the interval [A, B]. <br>
//! The tolerance required on the root is given by Tolerance. <br>
//! The solution is found when : <br>
//!  abs(Xi - Xi-1) <= EpsX and abs(F(Xi))<= EpsF <br>
//! The maximum number of iterations allowed is given by NbIterations. <br>
  Standard_EXPORT   math_NewtonFunctionRoot(math_FunctionWithDerivative& F,const Standard_Real Guess,const Standard_Real EpsX,const Standard_Real EpsF,const Standard_Real A,const Standard_Real B,const Standard_Integer NbIterations = 100);
  //! is used in a sub-class to initialize correctly all the fields <br>
//!          of this class. <br>
  Standard_EXPORT   math_NewtonFunctionRoot(const Standard_Real A,const Standard_Real B,const Standard_Real EpsX,const Standard_Real EpsF,const Standard_Integer NbIterations = 100);
  //! is used internally by the constructors. <br>
  Standard_EXPORT     void Perform(math_FunctionWithDerivative& F,const Standard_Real Guess) ;
  //! Returns true if the computations are successful, otherwise returns false. <br>
        Standard_Boolean IsDone() const;
  //! Returns the value of the root of function <F>. <br>
//! Exception NotDone is raised if the root was not found. <br>
        Standard_Real Root() const;
  //! returns the value of the derivative at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
        Standard_Real Derivative() const;
  //! returns the value of the function at the root. <br>
//! Exception NotDone is raised if the root was not found. <br>
        Standard_Real Value() const;
  //! Returns the number of iterations really done on the <br>
//! computation of the Root. <br>
//! Exception NotDone is raised if the root was not found. <br>
        Standard_Integer NbIterations() const;
  //! Prints information on the current state of the object. <br>
  Standard_EXPORT     void Dump(Standard_OStream& o) const;





protected:





private:



Standard_Boolean Done;
Standard_Real X;
Standard_Real Fx;
Standard_Real DFx;
Standard_Integer It;
Standard_Real EpsilonX;
Standard_Real EpsilonF;
Standard_Integer Itermax;
Standard_Real Binf;
Standard_Real Bsup;


};


#include <math_NewtonFunctionRoot.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
