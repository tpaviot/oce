// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>
#include <Standard_DimensionError.hxx>

inline void math_FunctionSetRoot::Delete() const
{
}


inline Standard_Boolean math_FunctionSetRoot::IsSolutionReached(math_FunctionSetWithDerivatives&)
{
  for (Standard_Integer i = 1; i <= Sol.Length(); ++i)
    if ( Abs(Delta(i)) > Tol(i) )
      return Standard_False;

  return Standard_True;
}


inline Standard_Boolean math_FunctionSetRoot::IsDone() const
{
  return Done;
}


inline Standard_OStream& operator<<(Standard_OStream& o,
				    const math_FunctionSetRoot& F)
{
  F.Dump(o);
  return o;
}


inline const math_Vector& math_FunctionSetRoot::Root() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Sol;
}


inline const math_Vector& math_FunctionSetRoot::FunctionSetErrors() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Delta;
}


inline const math_Matrix& math_FunctionSetRoot::Derivative() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return DF;
}

inline void math_FunctionSetRoot::Derivative(math_Matrix& Der) const{
  StdFail_NotDone_Raise_if(!Done, " ");
  Standard_DimensionError_Raise_if(Der.ColNumber() != Sol.Length(), " ");
  Der = DF;
}


inline Standard_Integer math_FunctionSetRoot::StateNumber() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return State;
}


inline Standard_Integer math_FunctionSetRoot::NbIterations() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Kount;
}    

inline Standard_Boolean math_FunctionSetRoot::IsDivergent() const
{
  return myIsDivergent;
}
