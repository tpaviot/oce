// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

// lpa, le 29/10/91

#include <Standard_DimensionError.hxx>

inline Standard_OStream& operator<<(Standard_OStream& o, 
				    const math_Vector& vec) 
{
  vec.Dump(o);
  return o;
}

inline math_Vector operator* (const Standard_Real Left,
			      const math_Vector& Right) 
{
  return Right.Multiplied(Left);
}


inline Standard_Integer math_Vector::Length() const
       { return UpperIndex - LowerIndex +1;}
   // length of a vector.


inline Standard_Integer math_Vector::Lower() const
       { return LowerIndex;}
   // value of the lower index of a vector.


inline Standard_Integer math_Vector::Upper() const
       {return UpperIndex;}
   // value of the Upper index of a vector.


inline Standard_Real& math_Vector::Value(const Standard_Integer Num) const {

  Standard_RangeError_Raise_if(Num < LowerIndex || Num > UpperIndex, " ");
  
  return Array(Num);
} 


