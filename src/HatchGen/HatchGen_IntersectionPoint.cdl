-- Created on: 1993-10-29
-- Created by: Jean Marc LACHAUME
-- Copyright (c) 1993-1999 Matra Datavision
-- Copyright (c) 1999-2014 OPEN CASCADE SAS
--
-- This file is part of Open CASCADE Technology software library.
--
-- This library is free software; you can redistribute it and/or modify it under
-- the terms of the GNU Lesser General Public License version 2.1 as published
-- by the Free Software Foundation, with special exception defined in the file
-- OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
-- distribution for complete text of the license and disclaimer of any warranty.
--
-- Alternatively, this file may be used under the terms of Open CASCADE
-- commercial license or contractual agreement.

deferred class IntersectionPoint from HatchGen

uses
    Orientation       from TopAbs ,
    State             from TopAbs ,
    IntersectionPoint from IntRes2d

is


    Initialize
    
    	---Purpose: Creates an empty intersection point.

      	---Category: IntersectionPoint

    	is protected ;


    SetIndex (me : in out ; Index : Integer from Standard)

       	---Purpose: Sets the index of the supporting curve.

      	---Category: IntersectionPoint

    	is static ;


    Index (me)
    
    	---Purpose: Returns the index of the supporting curve.

    	---Category: IntersectionPoint

    	returns Integer from Standard
	is static ;


    SetParameter (me : in out ; Parameter : Real from Standard)

       	---Purpose: Sets the parameter on the curve.

      	---Category: IntersectionPoint

    	is static ;


    Parameter (me)

       	---Purpose: Returns the parameter on the curve.

      	---Category: IntersectionPoint

    	returns Real from Standard
    	is static ;


    SetPosition (me : in out ; Position : Orientation from TopAbs)
		 
    	---Purpose: Sets the position of the point on the curve.

      	---Category: IntersectionPoint

    	is static ;


    Position (me)
    
      	---Purpose: Returns the position of the point on the curve.

      	---Category: IntersectionPoint

    	returns Orientation from TopAbs
    	is static ;


    SetStateBefore (me : in out ; State : State from TopAbs)
		   
      	---Purpose: Sets the transition state before the intersection.

      	---Category: IntersectionPoint

    	is static ;


    StateBefore (me)
    
      	---Purpose: Returns the transition state before the intersection.

      	---Category: IntersectionPoint

    	returns State from TopAbs
    	is static ;


    SetStateAfter (me : in out ; State : State from TopAbs)
		   
      	---Purpose: Sets the transition state after the intersection.

      	---Category: IntersectionPoint

    	is static ;


    StateAfter (me)
    
      	---Purpose: Returns the transition state after of the intersection.

      	---Category: IntersectionPoint

    	returns State from TopAbs
    	is static ;


    SetSegmentBeginning (me : in out ; State : Boolean from Standard = Standard_True)
    
    	---Purpose: Sets the flag that the point is the beginning of a segment.

      	---Category: IntersectionPoint

    	is static ;


    SegmentBeginning (me)
    
    	---Purpose: Returns the flag that the point is the beginning of a segment.

      	---Category: IntersectionPoint

    	returns Boolean from Standard
    	is static ;


    SetSegmentEnd (me : in out ; State : Boolean from Standard = Standard_True)
    
    	---Purpose: Sets the flag that the point is the end of a segment.

      	---Category: IntersectionPoint

    	is static ;


    SegmentEnd (me)
    
    	---Purpose: Returns the flag that the point is the end of a segment.

      	---Category: IntersectionPoint

    	returns Boolean from Standard
    	is static ;


    Dump (me; Index : Integer from Standard = 0)
    
    	---Purpose: Dump of the point on element.

    	is deferred;

    ---C++: alias "  Standard_EXPORT virtual ~HatchGen_IntersectionPoint();"
	

fields

    myIndex  : Integer         from Standard is protected ;
    myParam  : Real            from Standard is protected ;
    myPosit  : Orientation     from TopAbs   is protected ;
    myBefore : State           from TopAbs   is protected ;
    myAfter  : State           from TopAbs   is protected ;
    mySegBeg : Boolean         from Standard is protected ;
    mySegEnd : Boolean         from Standard is protected ;

end IntersectionPoint from HatchGen ;
