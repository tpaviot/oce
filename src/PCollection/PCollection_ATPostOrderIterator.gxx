// Created on: 1992-08-13
// Created by: Mireille MERCIEN
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_OutOfRange.hxx>
#include <Standard_NoSuchObject.hxx>
#include <Standard_NoMoreObject.hxx>

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// Purpose: Permits to iterate through an ArbitraryTree beginning by 
//          the most left leave and its rightSibling, then upward to
//          its parent, ..
//          IF theTree is (  A (B (C D E)) F G (H (I J K)))
//          THEN it will read ( C D E B F I J K H G A)


// --------
// Create
// --------
PCollection_ATPostOrderIterator::
       PCollection_ATPostOrderIterator
         (const Handle(PCollection_HArbitraryTree)& ATree) 
{
   CurrentStack = new PCollection_StackArbitraryTree;			
   if (ATree.IsNull()) {
     HasMore = Standard_False;
   }
   else {
     HasMore = Standard_True;
     RecursiveAppend(ATree);
     CurrentTree = CurrentStack->Top();
   }
}

// --------
// More
// --------
Standard_Boolean PCollection_ATPostOrderIterator::More () const
{
  return HasMore;
}

// --------
// Value
// --------
Handle(PCollection_HArbitraryTree) 
   PCollection_ATPostOrderIterator::Value () const
{
  if (!HasMore) Standard_NoSuchObject::Raise();
  return CurrentTree;
}

// --------
// Clear
// --------
void PCollection_ATPostOrderIterator::Clear ()
{
  CurrentTree.Nullify();
  CurrentStack.Nullify();
  HasMore = Standard_False;
}

// --------
// Next
// --------
void PCollection_ATPostOrderIterator::Next ()
{
   if (!HasMore) Standard_NoMoreObject::Raise();
// ... removes the last tree
   CurrentStack->Pop();
   if (CurrentStack->IsEmpty())  {
     HasMore = Standard_False;
   }
   else  {
//   ... is there still someone on the right ? 
//   ... if yes, go on to the right
     Handle(PCollection_HArbitraryTree) Temp = CurrentTree->RightSibling();
     if (!Temp.IsNull())  { 
       RecursiveAppend(Temp);
     }
     CurrentTree = CurrentStack->Top();
   }
}  

// PRIVATE TOOLS TO MANAGE CURRENTSTACK

// --------
// --------
void PCollection_ATPostOrderIterator::RecursiveAppend (
                  const Handle(PCollection_HArbitraryTree)& ATree) 
{
   CurrentStack->Push(ATree);    
// ... is there still some child ?
   if ( !ATree->IsLeaf()) {
     RecursiveAppend( ATree->Child(1));
   }
}     






