// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

// Hash.gxx doesn't contains methods. All methods are inline methods.


// methods for hash class from PCollection.
// Written by JPT FEB,24 1992
// -----------------
// Empty constructor
// -----------------
PCollection_Hash::PCollection_Hash(){}


// -----------------------------------------------------------------
// To remove the ambigous compilation warning between Hash::HashCode 
// and Storable::Hashcode
// -----------------------------------------------------------------
//Standard_Integer PCollection_Hash::HashCode
//                    (const Standard_Integer Upper) const { 
      
//   return this % Upper; 
//}

// ------------------------------
// The PCollection::Hascode method
// ------------------------------
Standard_Integer PCollection_Hash::HashCode(const key& K,
						  const Standard_Integer Upper)
const  {

   return ::HashCode(K,Upper);
}


// -----------------------------
// A method to compare two items
// ------------------------------
Standard_Boolean PCollection_Hash::Compare (const key& one,
						  const key& two) const {

  return(one == two);
}



