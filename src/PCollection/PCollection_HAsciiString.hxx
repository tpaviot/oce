// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _PCollection_HAsciiString_HeaderFile
#define _PCollection_HAsciiString_HeaderFile

#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_PCollection_HAsciiString_HeaderFile
#include <Handle_PCollection_HAsciiString.hxx>
#endif

#ifndef _TCollection_AsciiString_HeaderFile
#include <TCollection_AsciiString.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Handle_PCollection_HAsciiString_HeaderFile
#include <Handle_PCollection_HAsciiString.hxx>
#endif
#ifndef _Standard_Character_HeaderFile
#include <Standard_Character.hxx>
#endif
#ifndef _DBC_VArrayOfCharacter_HeaderFile
#include <DBC_VArrayOfCharacter.hxx>
#endif
#ifndef _Standard_Persistent_HeaderFile
#include <Standard_Persistent.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Handle_PCollection_HExtendedString_HeaderFile
#include <Handle_PCollection_HExtendedString.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
class Standard_OutOfRange;
class Standard_NegativeValue;
class Standard_NumericError;
class TCollection_AsciiString;
class PCollection_HExtendedString;
class DBC_VArrayOfCharacter;


class PCollection_HAsciiString : public Standard_Persistent {

public:

  //! Creation and initialization with the string S. <br>
  Standard_EXPORT   PCollection_HAsciiString(const Standard_CString S);
  //! Creation and initialization with the string S from TCollection. <br>
  Standard_EXPORT   PCollection_HAsciiString(const TCollection_AsciiString& S);
  //! Creation and initialization with the character C. <br>
  Standard_EXPORT   PCollection_HAsciiString(const Standard_Character C);
  //! Creation of a sub-string of the string S. <br>
//! The sub-string starts at the index FromIndex and ends <br>
//! at the index ToIndex <br>
  Standard_EXPORT   PCollection_HAsciiString(const Handle(PCollection_HAsciiString)& S,const Standard_Integer FromIndex,const Standard_Integer ToIndex);
  //! Creation by converting an extended string to a normal <br>
//! string. Raises OutOfRange if the String is not in the "Ascii range". <br>
  Standard_EXPORT   PCollection_HAsciiString(const Handle(PCollection_HExtendedString)& S);
  //! Creation and initialization by converting the real <br>
//! value into a string. <br>
//! F describes a format using "C" conventions. <br>
  Standard_EXPORT   PCollection_HAsciiString(const Standard_Real R,const Standard_CString F = "%f");
  //! Creation and initialization by converting the Integer <br>
//! value into a string. <br>
//! F describes a format using "C" conventions. <br>
  Standard_EXPORT   PCollection_HAsciiString(const Standard_Integer I,const Standard_CString F = "%d");
  //! Pushing a string at the end of the string me <br>
  Standard_EXPORT     void Append(const Handle(PCollection_HAsciiString)& S) ;
  //! Converts the first character into its corresponding <br>
//! upper-case character and the other characters into lowercase <br>
  Standard_EXPORT     void Capitalize() ;
  //! center <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler <br>
//! Raises an exception if Width is less than zero <br>
//! if Width < Length nothing happens <br>
  Standard_EXPORT     void Center(const Standard_Integer Width,const Standard_Character Filler) ;
  //! Substitutes all the characters equal to C by NewC in the <br>
//! string <me>.The substition can be case sensitive. <br>
  Standard_EXPORT     void ChangeAll(const Standard_Character C,const Standard_Character NewC,const Standard_Boolean CaseSensitive) ;
  //! Remove all characters in the string <me>. <br>
//! Length is equal to zero now. <br>
  Standard_EXPORT     void Clear() ;
  //! Converts a persistent HAsciiString to a non <br>
//! persistent AsciiString. <br>
  Standard_EXPORT     TCollection_AsciiString Convert() const;
  //! Returns the index of the first character of <Set> founded in <me>. <br>
//! The search begins to the index FromIndex and ends to the <br>
//! the index ToIndex. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
  Standard_EXPORT     Standard_Integer FirstLocationInSet(const Handle(PCollection_HAsciiString)& Set,const Standard_Integer FromIndex,const Standard_Integer ToIndex) const;
  //! Returns the index of the first character of <me> <br>
//! that is not present in the set <Set>. <br>
//! The search begins to the index FromIndex and ends to the <br>
//! the index ToIndex in <me>. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
  Standard_EXPORT     Standard_Integer FirstLocationNotInSet(const Handle(PCollection_HAsciiString)& Set,const Standard_Integer FromIndex,const Standard_Integer ToIndex) const;
  //! Pushing a string after a specific index in the string <me>. <br>
//! Raises an exception if Index is out of bounds. <br>
  Standard_EXPORT     void InsertAfter(const Standard_Integer Index,const Handle(PCollection_HAsciiString)& S) ;
  //! Pushing a string before a specific index in the string <me> <br>
//! Raises an exception if Index is out of bounds <br>
  Standard_EXPORT     void InsertBefore(const Standard_Integer Index,const Handle(PCollection_HAsciiString)& S) ;
  //! Returns the integer value corresponding to the string <me> <br>
//! Raises an exception if the string does not correspond to <br>
//! an integer value. <br>
  Standard_EXPORT     Standard_Integer IntegerValue() const;
  //! Test if characters are different <br>
//! between <me> and <other>. <br>
  Standard_EXPORT     Standard_Boolean IsDifferent(const Handle(PCollection_HAsciiString)& other) const;
  //!  Returns True if the string <me> contains zero character <br>
  Standard_EXPORT     Standard_Boolean IsEmpty() const;
  //! Returns TRUE if <me> is 'ASCII' greater than <other>. <br>
  Standard_EXPORT     Standard_Boolean IsGreater(const Handle(PCollection_HAsciiString)& other) const;
  //! Returns True if the string contains an integer value. <br>
  Standard_EXPORT     Standard_Boolean IsIntegerValue() const;
  //! Returns TRUE if <me> is 'ASCII' less than <other>. <br>
  Standard_EXPORT     Standard_Boolean IsLess(const Handle(PCollection_HAsciiString)& other) const;
  //! Returns True if the string contains an Real value. <br>
  Standard_EXPORT     Standard_Boolean IsRealValue() const;
  //! Returns True if two strings are equal. <br>
//! The comparison is case sensitive. <br>
  Standard_EXPORT     Standard_Boolean IsSameString(const Handle(PCollection_HAsciiString)& S) const;
  //! Returns True if two strings are equal. <br>
//! The comparison is case sensitive if the flag is set. <br>
  Standard_EXPORT     Standard_Boolean IsSameString(const Handle(PCollection_HAsciiString)& S,const Standard_Boolean CaseSensitive) const;
  //! Removes all space characters in the begining of the <br>
//! string. <br>
  Standard_EXPORT     void LeftAdjust() ;
  //! Left justify. <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler. <br>
//! If Width < Length nothing happens. <br>
//! Raises an exception if Width is less than zero. <br>
  Standard_EXPORT     void LeftJustify(const Standard_Integer Width,const Standard_Character Filler) ;
  //! Number of characters of the String. <br>
  Standard_EXPORT     Standard_Integer Length() const;
  //! Returns the index of the nth occurence of the character C <br>
//! in the string <me> from the starting index FromIndex to the <br>
//! ending index ToIndex. <br>
//! Returns zero if failure. <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
  Standard_EXPORT     Standard_Integer Location(const Standard_Integer N,const Standard_Character C,const Standard_Integer FromIndex,const Standard_Integer ToIndex) const;
  //! Returns an index in the string <me> of the first occurence <br>
//! of the string S in the string <me> from the starting index <br>
//! FromIndex to the ending index ToIndex <br>
//! returns zero if failure <br>
//! Raises an exception if FromIndex or ToIndex is out of range. <br>
  Standard_EXPORT     Standard_Integer Location(const Handle(PCollection_HAsciiString)& S,const Standard_Integer FromIndex,const Standard_Integer ToIndex) const;
  //! Converts any upper-case character to its corresponding <br>
//! lower-case character in the string <me>. If there is no <br>
//! corresponding lower-case character, the character is <br>
//! unchanged <br>
//! before <br>
//! me = "aBAcd123" <br>
//! after <br>
//! me = "abacd123" <br>
  Standard_EXPORT     void Lowercase() ;
  //! Pushing a string at the begining of the string <me> <br>
//! before <br>
//!  me = "cde" , S = "ab" <br>
//! after <br>
//!  me = "abcde" , S = "ab" <br>
  Standard_EXPORT     void Prepend(const Handle(PCollection_HAsciiString)& S) ;
  //! Prints the content of <me> on the stream S. <br>
  Standard_EXPORT     void Print(Standard_OStream& S) const;
  //! Returns the real value corresponding to the string <me>. <br>
//! Raises an exception if the string does not correspond to a real value. <br>
  Standard_EXPORT     Standard_Real RealValue() const;
  //! Removes the character located at the index Index in the string. <br>
//! Raises an exception if Index is out of bounds. <br>
  Standard_EXPORT     void Remove(const Standard_Integer Index) ;
  //! Removes all the characters from the index FromIndex to the <br>
//! index ToIndex. <br>
//! Raises an exception if FromIndex or ToIndex is out of bounds. <br>
  Standard_EXPORT     void Remove(const Standard_Integer FromIndex,const Standard_Integer ToIndex) ;
  //! Removes all the occurences of the character C in the string <br>
  Standard_EXPORT     void RemoveAll(const Standard_Character C,const Standard_Boolean CaseSensitive) ;
  //! Removes all space characters at the end of the string. <br>
  Standard_EXPORT     void RightAdjust() ;
  //! Right justify. <br>
//! Length becomes equal to Width and the new characters are <br>
//! equal to Filler. <br>
//! If Width < Length nothing happens. <br>
//! Raises an exception if Width is less than zero. <br>
  Standard_EXPORT     void RightJustify(const Standard_Integer Width,const Standard_Character Filler) ;
  //! Substitutes the character located to the position Index <br>
//! by the character C. <br>
//! Raises an exception if the Index is out of bounds. <br>
  Standard_EXPORT     void SetValue(const Standard_Integer Index,const Standard_Character C) ;
  //! Substitutes from the index Index to the end by the string S. <br>
//! Raises an exception if Index is out of bounds. <br>
  Standard_EXPORT     void SetValue(const Standard_Integer Index,const Handle(PCollection_HAsciiString)& S) ;
  //! Splits a string of characters into two sub-strings. <br>
  Standard_EXPORT     Handle_PCollection_HAsciiString Split(const Standard_Integer Index) ;
  //! Creation of a sub-string of the string <me>. <br>
//! The sub-string starts to the index Fromindex and ends <br>
//! to the index ToIndex. <br>
//! Raises an exception if ToIndex or FromIndex is out of bounds. <br>
  Standard_EXPORT     Handle_PCollection_HAsciiString SubString(const Standard_Integer FromIndex,const Standard_Integer ToIndex) const;
  //! Extracts <aString> token from <me>. <br>
//! The token extracted is the indice number <num>. <br>
  Standard_EXPORT     Handle_PCollection_HAsciiString Token(const Standard_CString separators = " \t",const Standard_Integer whichone = 1) const;
  //! Transforms all the characters into upper-case. <br>
//! If there is no corresponding upper-case character, the <br>
//! character is unchanged. <br>
  Standard_EXPORT     void Uppercase() ;
  //! Length of the string ignoring all spaces (' ') and the <br>
//! control character at the end. <br>
  Standard_EXPORT     Standard_Integer UsefullLength() const;
  //! Returns the character of index Index of the string <br>
  Standard_EXPORT     Standard_Character Value(const Standard_Integer Index) const;
  
  Standard_EXPORT   virtual  void ShallowDump(Standard_OStream& s) const;

  PCollection_HAsciiString( )
{
  
}
PCollection_HAsciiString(const Storage_stCONSTclCOM& a) : Standard_Persistent(a)
{
  
}
    const DBC_VArrayOfCharacter& _CSFDB_GetPCollection_HAsciiStringData() const { return Data; }



  DEFINE_STANDARD_RTTI(PCollection_HAsciiString)

protected:




private: 

  //! Assigns the field of the current structure with <br>
//! the given value.Private method. <br>
  Standard_EXPORT     void Assign(const DBC_VArrayOfCharacter& TheData) ;

DBC_VArrayOfCharacter Data;


};





// other Inline functions and methods (like "C++: function call" methods)
inline void ShallowDump(const Handle_PCollection_HAsciiString& me,Standard_OStream& s) {
 me->ShallowDump(s);
}



#endif
