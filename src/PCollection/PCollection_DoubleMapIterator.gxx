// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//-Version: 

//  Version	Date         Purpose
//              07/01/93     Creation   

//-Language     C++2.0

//-Declarations
#include <Standard_NoSuchObject.hxx>
#include <Standard_NoMoreObject.hxx>

//=======================================================================
// Function : DoubleMapIterator
//=======================================================================

PCollection_DoubleMapIterator::PCollection_DoubleMapIterator
  ( const Handle(PCollection_HDoubleMap) &aDoubleMap )
{
  Standard_Boolean Found = Standard_False;

  myBuckets = aDoubleMap->GetArrayKey();
// Sets the index and the node on the first "no empty" entry
  if ( aDoubleMap->IsEmpty() ) myCurrentIndex = myBuckets->Length() + 1;
  else myCurrentIndex = 1;
  
  while ( myCurrentIndex <= myBuckets->Length() && !Found ) {
    if ( ! myBuckets->Value(myCurrentIndex).IsNull() ) {
      myCurrentNode = myBuckets->Value(myCurrentIndex);
      Found = Standard_True;
    }
    else myCurrentIndex++;
  }
}

//=======================================================================
// Function : More
//=======================================================================

Standard_Boolean PCollection_DoubleMapIterator::More() const
{
  Standard_Boolean Ok = ( myCurrentIndex <= myBuckets->Length()) && 
                        (! myCurrentNode.IsNull());

  return Ok;
}
						      
//=======================================================================
// Function : Next
//=======================================================================

void PCollection_DoubleMapIterator::Next()
{
  Standard_Boolean Found = Standard_False;
  Standard_Boolean HasMore = ( myCurrentIndex <= myBuckets->Length()) && 
                        (! myCurrentNode.IsNull());

  if ( !HasMore ) Standard_NoMoreObject::Raise();

  myCurrentNode = myCurrentNode->NextKey();
  if ( myCurrentNode.IsNull() ) {
    myCurrentIndex++;
    while ( myCurrentIndex <= myBuckets->Length() && !Found ) {
      myCurrentNode = myBuckets->Value(myCurrentIndex);
      if ( myCurrentNode.IsNull() ) 
	myCurrentIndex++;
      else
	Found = Standard_True;
    }
  }
    
}
						      
//=======================================================================
// Function : KeyValue
//=======================================================================

Key PCollection_DoubleMapIterator::KeyValue () const
{
  if ( myCurrentNode.IsNull() ) Standard_NoSuchObject::Raise();
  return myCurrentNode->GetKey();
}
						      
//=======================================================================
// Function : ItemValue
//=======================================================================

Item PCollection_DoubleMapIterator::ItemValue () const
{
  if ( myCurrentNode.IsNull() ) Standard_NoSuchObject::Raise();
  return myCurrentNode->GetItem();
}
