// Created on: 1992-10-09
// Created by: Mireille MERCIEN
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_OutOfRange.hxx>
#include <Standard_NoSuchObject.hxx>
#include <Standard_NoMoreObject.hxx>

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

//----------------------------------------------------------------
// Create
//----------------------------------------------------------------
PCollection_MapIterator::PCollection_MapIterator
                       (const Handle(PCollection_HDataMap)& AMap) 
{
  if (AMap->IsEmpty()) {
    Index = 0;
    Node.Nullify();
    Buckets.Nullify();
    HasMore = False;
  } 
  else {
//  stop at the first element of the first "no empty" bucket entry
    HasMore = True;
    Buckets = AMap->GetArray();
    NbBuck = AMap->NbBuckets();
    Boolean Found = False;
    Index = 1 ;
    while ( Index <= NbBuck && !Found ) {
      Node = Buckets->Value(Index);
      if (Node.IsNull())    
        Index++;
      else 
        Found = True;
    }           
    if (!Found) HasMore = False;
  }
}

//----------------------------------------------------------------
// More
//----------------------------------------------------------------
Standard_Boolean PCollection_MapIterator::More() const
{
   return HasMore; 
}


//----------------------------------------------------------------
// Value
//----------------------------------------------------------------
Item PCollection_MapIterator::Value() const
{
  if (Node.IsNull()) Standard_NoSuchObject::Raise();
  return (Node->Value());
}

//----------------------------------------------------------------
// GetKey
//----------------------------------------------------------------
Key PCollection_MapIterator::GetKey() const
{
  if (Node.IsNull()) Standard_NoSuchObject::Raise();
  return (Node->GetKey());
}

//----------------------------------------------------------------
// Next
//----------------------------------------------------------------
void PCollection_MapIterator::Next()
{
  if (!HasMore) Standard_NoMoreObject::Raise();
  Node = Node->Next();
  if (Node.IsNull()) {
     Boolean Found = False;
     Index++;
     while ( Index <= NbBuck && !Found ) {
       Node = Buckets->Value(Index);
       if (Node.IsNull()) 
         Index++;
       else
         Found = True;
     }           
     if (!Found) HasMore = False;
   }
}


