// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <StdFail_NotDone.hxx>

#include IntWalk_TheIWLine_hxx

inline void IntWalk_IWalking::SetTolerance(const Standard_Real Epsilon,
					   const Standard_Real Deflection,
					   const Standard_Real Increment )
{
  fleche = Deflection;
  pas = Increment;
  epsilon = Epsilon*Epsilon;
}


inline Standard_Boolean IntWalk_IWalking::IsDone() const
{
 return done;
}

inline Standard_Integer IntWalk_IWalking::NbLines() const
{ 
  if(!done) StdFail_NotDone::Raise(); 
  return lines.Length();
}

inline const Handle(IntWalk_TheIWLine)& IntWalk_IWalking::Value
  (const Standard_Integer Index) const
{ 
  if(!done) StdFail_NotDone::Raise();
  return lines.Value(Index);
}

inline Standard_Integer IntWalk_IWalking::NbSinglePnts() const 
{
    if(!done) StdFail_NotDone::Raise();
    return seqSingle.Length();
}

inline const ThePointOfPath& IntWalk_IWalking::SinglePnt
  (const Standard_Integer Index) const
{
  if(!done) StdFail_NotDone::Raise();
  return seqSingle.Value(Index);
}




