// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _MeshVS_Tool_HeaderFile
#define _MeshVS_Tool_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Graphic3d_AspectFillArea3d_HeaderFile
#include <Handle_Graphic3d_AspectFillArea3d.hxx>
#endif
#ifndef _Handle_MeshVS_Drawer_HeaderFile
#include <Handle_MeshVS_Drawer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectLine3d_HeaderFile
#include <Handle_Graphic3d_AspectLine3d.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectMarker3d_HeaderFile
#include <Handle_Graphic3d_AspectMarker3d.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectText3d_HeaderFile
#include <Handle_Graphic3d_AspectText3d.hxx>
#endif
class Graphic3d_AspectFillArea3d;
class MeshVS_Drawer;
class Graphic3d_MaterialAspect;
class Graphic3d_AspectLine3d;
class Graphic3d_AspectMarker3d;
class Graphic3d_AspectText3d;
class TColStd_Array1OfReal;
class gp_Vec;


//! This class provides auxiliary methods to create differents aspects <br>
class MeshVS_Tool  {
public:

  DEFINE_STANDARD_ALLOC

  //! Creates fill area aspect with values from Drawer according to keys from DrawerAttribute <br>
  Standard_EXPORT   static  Handle_Graphic3d_AspectFillArea3d CreateAspectFillArea3d(const Handle(MeshVS_Drawer)& theDr,const Standard_Boolean UseDefaults = Standard_True) ;
  //! Creates fill aspect with values from Drawer according to keys from DrawerAttribute <br>
//! and specific material aspect <br>
  Standard_EXPORT   static  Handle_Graphic3d_AspectFillArea3d CreateAspectFillArea3d(const Handle(MeshVS_Drawer)& theDr,const Graphic3d_MaterialAspect& Mat,const Standard_Boolean UseDefaults = Standard_True) ;
  //! Creates line aspect with values from Drawer according to keys from DrawerAttribute <br>
  Standard_EXPORT   static  Handle_Graphic3d_AspectLine3d CreateAspectLine3d(const Handle(MeshVS_Drawer)& theDr,const Standard_Boolean UseDefaults = Standard_True) ;
  //! Creates marker aspect with values from Drawer according to keys from DrawerAttribute <br>
  Standard_EXPORT   static  Handle_Graphic3d_AspectMarker3d CreateAspectMarker3d(const Handle(MeshVS_Drawer)& theDr,const Standard_Boolean UseDefaults = Standard_True) ;
  //! Creates text aspect with values from Drawer according to keys from DrawerAttribute <br>
  Standard_EXPORT   static  Handle_Graphic3d_AspectText3d CreateAspectText3d(const Handle(MeshVS_Drawer)& theDr,const Standard_Boolean UseDefaults = Standard_True) ;
  //! Get one of normals to polygon described by these points. <br>
//!          If the polygon isn't planar, function returns false <br>
  Standard_EXPORT   static  Standard_Boolean GetNormal(const TColStd_Array1OfReal& Nodes,gp_Vec& Norm) ;
  //! Get an average of normals to non-planar polygon described by these points or compute <br>
//!          normal of planar polygon. If the polygon isn't planar, function returns false <br>
  Standard_EXPORT   static  Standard_Boolean GetAverageNormal(const TColStd_Array1OfReal& Nodes,gp_Vec& Norm) ;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
