// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _MeshVS_ElementalColorPrsBuilder_HeaderFile
#define _MeshVS_ElementalColorPrsBuilder_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_MeshVS_ElementalColorPrsBuilder_HeaderFile
#include <Handle_MeshVS_ElementalColorPrsBuilder.hxx>
#endif

#ifndef _MeshVS_DataMapOfIntegerColor_HeaderFile
#include <MeshVS_DataMapOfIntegerColor.hxx>
#endif
#ifndef _MeshVS_DataMapOfIntegerTwoColors_HeaderFile
#include <MeshVS_DataMapOfIntegerTwoColors.hxx>
#endif
#ifndef _MeshVS_PrsBuilder_HeaderFile
#include <MeshVS_PrsBuilder.hxx>
#endif
#ifndef _Handle_MeshVS_Mesh_HeaderFile
#include <Handle_MeshVS_Mesh.hxx>
#endif
#ifndef _MeshVS_DisplayModeFlags_HeaderFile
#include <MeshVS_DisplayModeFlags.hxx>
#endif
#ifndef _Handle_MeshVS_DataSource_HeaderFile
#include <Handle_MeshVS_DataSource.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _MeshVS_BuilderPriority_HeaderFile
#include <MeshVS_BuilderPriority.hxx>
#endif
#ifndef _Handle_Prs3d_Presentation_HeaderFile
#include <Handle_Prs3d_Presentation.hxx>
#endif
#ifndef _TColStd_PackedMapOfInteger_HeaderFile
#include <TColStd_PackedMapOfInteger.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _MeshVS_TwoColors_HeaderFile
#include <MeshVS_TwoColors.hxx>
#endif
class MeshVS_Mesh;
class MeshVS_DataSource;
class Prs3d_Presentation;
class MeshVS_DataMapOfIntegerColor;
class Quantity_Color;
class MeshVS_DataMapOfIntegerTwoColors;


//! This class provides methods to create presentation of elements with <br>
//! assigned colors. The class contains two color maps: map of same colors for front <br>
//! and back side of face and map of different ones, <br>
class MeshVS_ElementalColorPrsBuilder : public MeshVS_PrsBuilder {

public:

  //! Constructor <br>
  Standard_EXPORT   MeshVS_ElementalColorPrsBuilder(const Handle(MeshVS_Mesh)& Parent,const MeshVS_DisplayModeFlags& Flags = MeshVS_DMF_ElementalColorDataPrs,const Handle(MeshVS_DataSource)& DS = 0,const Standard_Integer Id = -1,const MeshVS_BuilderPriority& Priority = MeshVS_BP_ElemColor);
  //! Builds presentation of elements with assigned colors. <br>
  Standard_EXPORT   virtual  void Build(const Handle(Prs3d_Presentation)& Prs,const TColStd_PackedMapOfInteger& IDs,TColStd_PackedMapOfInteger& IDsToExclude,const Standard_Boolean IsElement,const Standard_Integer DisplayMode) const;
  //! Returns map of colors same for front and back side of face. <br>
  Standard_EXPORT    const MeshVS_DataMapOfIntegerColor& GetColors1() const;
  //! Sets map of colors same for front and back side of face. <br>
  Standard_EXPORT     void SetColors1(const MeshVS_DataMapOfIntegerColor& Map) ;
  //! Returns true, if map of colors isn't empty <br>
  Standard_EXPORT     Standard_Boolean HasColors1() const;
  //! Returns color assigned with element number ID <br>
  Standard_EXPORT     Standard_Boolean GetColor1(const Standard_Integer ID,Quantity_Color& theColor) const;
  //! Sets color assigned with element number ID <br>
  Standard_EXPORT     void SetColor1(const Standard_Integer ID,const Quantity_Color& theColor) ;
  //! Returns map of different colors for front and back side of face <br>
  Standard_EXPORT    const MeshVS_DataMapOfIntegerTwoColors& GetColors2() const;
  //! Sets map of different colors for front and back side of face <br>
  Standard_EXPORT     void SetColors2(const MeshVS_DataMapOfIntegerTwoColors& Map) ;
  //! Returns true, if map isn't empty <br>
  Standard_EXPORT     Standard_Boolean HasColors2() const;
  //! Returns colors assigned with element number ID <br>
  Standard_EXPORT     Standard_Boolean GetColor2(const Standard_Integer ID,MeshVS_TwoColors& theColor) const;
  //! Returns colors assigned with element number ID <br>
//! theColor1 is the front element color <br>
//! theColor2 is the back element color <br>
  Standard_EXPORT     Standard_Boolean GetColor2(const Standard_Integer ID,Quantity_Color& theColor1,Quantity_Color& theColor2) const;
  //! Sets colors assigned with element number ID <br>
  Standard_EXPORT     void SetColor2(const Standard_Integer ID,const MeshVS_TwoColors& theTwoColors) ;
  //! Sets color assigned with element number ID <br>
//! theColor1 is the front element color <br>
//! theColor2 is the back element color <br>
  Standard_EXPORT     void SetColor2(const Standard_Integer ID,const Quantity_Color& theColor1,const Quantity_Color& theColor2) ;




  DEFINE_STANDARD_RTTI(MeshVS_ElementalColorPrsBuilder)

protected:




private: 


MeshVS_DataMapOfIntegerColor myElemColorMap1;
MeshVS_DataMapOfIntegerTwoColors myElemColorMap2;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
