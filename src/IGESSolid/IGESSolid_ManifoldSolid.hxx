// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESSolid_ManifoldSolid_HeaderFile
#define _IGESSolid_ManifoldSolid_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESSolid_ManifoldSolid_HeaderFile
#include <Handle_IGESSolid_ManifoldSolid.hxx>
#endif

#ifndef _Handle_IGESSolid_Shell_HeaderFile
#include <Handle_IGESSolid_Shell.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_IGESSolid_HArray1OfShell_HeaderFile
#include <Handle_IGESSolid_HArray1OfShell.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfInteger_HeaderFile
#include <Handle_TColStd_HArray1OfInteger.hxx>
#endif
#ifndef _IGESData_IGESEntity_HeaderFile
#include <IGESData_IGESEntity.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class IGESSolid_Shell;
class IGESSolid_HArray1OfShell;
class TColStd_HArray1OfInteger;
class Standard_DimensionMismatch;
class Standard_OutOfRange;


//! defines ManifoldSolid, Type <186> Form Number <0> <br>
//!          in package IGESSolid <br>
//!          A manifold solid is a bounded, closed, and finite volume <br>
//!          in three dimensional Euclidean space <br>
class IGESSolid_ManifoldSolid : public IGESData_IGESEntity {

public:

  
  Standard_EXPORT   IGESSolid_ManifoldSolid();
  //! This method is used to set the fields of the class <br>
//!           ManifoldSolid <br>
//!       - aShell         : pointer to the shell <br>
//!       - shellflag      : orientation flag of shell <br>
//!       - voidShells     : the void shells <br>
//!       - voidShellFlags : orientation of the void shells <br>
//! raises exception if length of voidShells and voidShellFlags <br>
//! do not match <br>
  Standard_EXPORT     void Init(const Handle(IGESSolid_Shell)& aShell,const Standard_Boolean shellflag,const Handle(IGESSolid_HArray1OfShell)& voidShells,const Handle(TColStd_HArray1OfInteger)& voidShellFlags) ;
  //! returns the Shell entity which is being referred <br>
  Standard_EXPORT     Handle_IGESSolid_Shell Shell() const;
  //! returns the orientation flag of the shell <br>
  Standard_EXPORT     Standard_Boolean OrientationFlag() const;
  //! returns the number of void shells <br>
  Standard_EXPORT     Standard_Integer NbVoidShells() const;
  //! returns Index'th void shell. <br>
//! raises exception if Index  <= 0 or Index > NbVoidShells() <br>
  Standard_EXPORT     Handle_IGESSolid_Shell VoidShell(const Standard_Integer Index) const;
  //! returns Index'th orientation flag. <br>
//! raises exception if Index  <= 0 or Index > NbVoidShells() <br>
  Standard_EXPORT     Standard_Boolean VoidOrientationFlag(const Standard_Integer Index) const;




  DEFINE_STANDARD_RTTI(IGESSolid_ManifoldSolid)

protected:




private: 


Handle_IGESSolid_Shell theShell;
Standard_Boolean theOrientationFlag;
Handle_IGESSolid_HArray1OfShell theVoidShells;
Handle_TColStd_HArray1OfInteger theOrientFlags;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
