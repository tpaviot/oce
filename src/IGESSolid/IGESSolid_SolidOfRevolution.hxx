// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESSolid_SolidOfRevolution_HeaderFile
#define _IGESSolid_SolidOfRevolution_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESSolid_SolidOfRevolution_HeaderFile
#include <Handle_IGESSolid_SolidOfRevolution.hxx>
#endif

#ifndef _Handle_IGESData_IGESEntity_HeaderFile
#include <Handle_IGESData_IGESEntity.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _gp_XYZ_HeaderFile
#include <gp_XYZ.hxx>
#endif
#ifndef _IGESData_IGESEntity_HeaderFile
#include <IGESData_IGESEntity.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class IGESData_IGESEntity;
class gp_XYZ;
class gp_Pnt;
class gp_Dir;


//! defines SolidOfRevolution, Type <162> Form Number <0,1> <br>
//!          in package IGESSolid <br>
//!          This entity is defined by revolving the area determined <br>
//!          by a planar curve about a specified axis through a given <br>
//!          fraction of full rotation. <br>
class IGESSolid_SolidOfRevolution : public IGESData_IGESEntity {

public:

  
  Standard_EXPORT   IGESSolid_SolidOfRevolution();
  //! This method is used to set the fields of the class <br>
//!           SolidOfRevolution <br>
//!       - aCurve     : the curve entity that is to be revolved <br>
//!       - aFract     : the fraction of full rotation (default 1.0) <br>
//!       - aAxisPnt   : the point on the axis <br>
//!       - aDirection : the direction of the axis <br>
  Standard_EXPORT     void Init(const Handle(IGESData_IGESEntity)& aCurve,const Standard_Real aFract,const gp_XYZ& aAxisPnt,const gp_XYZ& aDirection) ;
  //! Sets the Curve to be by default, Closed to Axis (Form 0) <br>
//!           if <mode> is True, Closed to Itself (Form 1) else <br>
  Standard_EXPORT     void SetClosedToAxis(const Standard_Boolean mode) ;
  //! Returns True if Form Number = 0 <br>
//! if Form no is 0, then the curve is closed to axis <br>
//! if 1, the curve is closed to itself. <br>
  Standard_EXPORT     Standard_Boolean IsClosedToAxis() const;
  //! returns the curve entity that is to be revolved <br>
  Standard_EXPORT     Handle_IGESData_IGESEntity Curve() const;
  //! returns the fraction of full rotation that the curve is to <br>
//! be rotated <br>
  Standard_EXPORT     Standard_Real Fraction() const;
  //! returns the point on the axis <br>
  Standard_EXPORT     gp_Pnt AxisPoint() const;
  //! returns the point on the axis after applying Trans.Matrix <br>
  Standard_EXPORT     gp_Pnt TransformedAxisPoint() const;
  //! returns the direction of the axis <br>
  Standard_EXPORT     gp_Dir Axis() const;
  //! returns the direction of the axis after applying <br>
//! TransformationMatrix <br>
  Standard_EXPORT     gp_Dir TransformedAxis() const;




  DEFINE_STANDARD_RTTI(IGESSolid_SolidOfRevolution)

protected:




private: 


Handle_IGESData_IGESEntity theCurve;
Standard_Real theFraction;
gp_XYZ theAxisPoint;
gp_XYZ theAxis;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
