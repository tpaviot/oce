// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESSolid_BooleanTree_HeaderFile
#define _IGESSolid_BooleanTree_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESSolid_BooleanTree_HeaderFile
#include <Handle_IGESSolid_BooleanTree.hxx>
#endif

#ifndef _Handle_IGESData_HArray1OfIGESEntity_HeaderFile
#include <Handle_IGESData_HArray1OfIGESEntity.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfInteger_HeaderFile
#include <Handle_TColStd_HArray1OfInteger.hxx>
#endif
#ifndef _IGESData_IGESEntity_HeaderFile
#include <IGESData_IGESEntity.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_IGESData_IGESEntity_HeaderFile
#include <Handle_IGESData_IGESEntity.hxx>
#endif
class IGESData_HArray1OfIGESEntity;
class TColStd_HArray1OfInteger;
class Standard_OutOfRange;
class IGESData_IGESEntity;


//! defines BooleanTree, Type <180> Form Number <0> <br>
//!          in package IGESSolid <br>
//!          The Boolean tree describes a binary tree structure <br>
//!          composed of regularized Boolean operations and operands, <br>
//!          in post-order notation. <br>
class IGESSolid_BooleanTree : public IGESData_IGESEntity {

public:

  
  Standard_EXPORT   IGESSolid_BooleanTree();
  //! This method is used to set the fields of the class <br>
//!           BooleanTree <br>
//!       - operands   : Array containing pointer to DE of operands <br>
//!       - operations : Array containing integer type for operations <br>
  Standard_EXPORT     void Init(const Handle(IGESData_HArray1OfIGESEntity)& operands,const Handle(TColStd_HArray1OfInteger)& operations) ;
  //! returns the length of the post-order list <br>
  Standard_EXPORT     Standard_Integer Length() const;
  //! returns True if Index'th value in the post-order list is an Operand; <br>
//! else returns False if it is an Integer Operations <br>
//! raises exception if Index < 1 or Index > Length() <br>
  Standard_EXPORT     Standard_Boolean IsOperand(const Standard_Integer Index) const;
  //! returns the Index'th value in the post-order list only if it is <br>
//! an operand else returns NULL <br>
//! raises exception if Index < 1 or Index > Length() <br>
  Standard_EXPORT     Handle_IGESData_IGESEntity Operand(const Standard_Integer Index) const;
  //! returns the Index'th value in the post-order list only if it is <br>
//! an operation else returns 0 <br>
//! raises exception if Index < 1 or Index > Length() <br>
  Standard_EXPORT     Standard_Integer Operation(const Standard_Integer Index) const;




  DEFINE_STANDARD_RTTI(IGESSolid_BooleanTree)

protected:




private: 


Handle_IGESData_HArray1OfIGESEntity theOperands;
Handle_TColStd_HArray1OfInteger theOperations;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
