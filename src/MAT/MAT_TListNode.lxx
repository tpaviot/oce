// Created on: 1992-06-24
// Created by: Gilles DEBARBOUILLE
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
//function : MAT_TListNode
//purpose  : 
//=======================================================================

inline MAT_TListNode::MAT_TListNode() {}

//=======================================================================
//function : MAT_TListNode
//purpose  : 
//=======================================================================

inline MAT_TListNode::MAT_TListNode(const Item& anitem)
{
  theitem = anitem;
}

//=======================================================================
//function : GetItem
//purpose  : 
//=======================================================================

inline Item MAT_TListNode::GetItem() const
{
  return theitem;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline Handle(MAT_TListNode) MAT_TListNode::Next() const
{
  return thenext;
}

//=======================================================================
//function : Previous
//purpose  : 
//=======================================================================

inline Handle(MAT_TListNode) MAT_TListNode::Previous() const
{
  return theprevious;
}

//=======================================================================
//function : SetItem
//purpose  : 
//=======================================================================

inline void MAT_TListNode::SetItem(const Item& anitem)
{
  theitem=anitem;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void MAT_TListNode::Next
  (const Handle(MAT_TListNode)& atlistnode)
{
  thenext=atlistnode;
}

//=======================================================================
//function : Previous
//purpose  : 
//=======================================================================

inline void MAT_TListNode::Previous
  (const Handle(MAT_TListNode)& atlistnode)
{
  theprevious=atlistnode;
}
