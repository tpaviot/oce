// Created on: 2009-04-06
// Created by: Sergey ZARITCHNY
// Copyright (c) 2009-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : Signature
//purpose  : 
//=======================================================================

inline Standard_Integer TDataXtd_PatternStd::Signature() const
{
  return mySignature;
}

//=======================================================================
//function : Axis1
//purpose  : 
//=======================================================================

inline Handle(TNaming_NamedShape) TDataXtd_PatternStd::Axis1() const
{
  return myAxis1;
}

//=======================================================================
//function : Axis2
//purpose  : 
//=======================================================================

inline Handle(TNaming_NamedShape) TDataXtd_PatternStd::Axis2() const
{
  return myAxis2;
}

//=======================================================================
//function : Axis1Reversed
//purpose  : 
//=======================================================================

inline Standard_Boolean TDataXtd_PatternStd::Axis1Reversed() const
{
  return myAxis1Reversed;
}

//=======================================================================
//function : Axis2Reversed
//purpose  : 
//=======================================================================

inline Standard_Boolean TDataXtd_PatternStd::Axis2Reversed() const
{
  return myAxis2Reversed;
}

//=======================================================================
//function : Value1
//purpose  : 
//=======================================================================

inline Handle(TDataStd_Real) TDataXtd_PatternStd::Value1() const
{
  return myValue1;
}

//=======================================================================
//function : Value2
//purpose  : 
//=======================================================================

inline Handle(TDataStd_Real) TDataXtd_PatternStd::Value2() const
{
  return myValue2;
}

//=======================================================================
//function : NbInstances1
//purpose  : 
//=======================================================================

inline Handle(TDataStd_Integer) TDataXtd_PatternStd::NbInstances1() const
{
  return myNb1;
}

//=======================================================================
//function : NbInstances2
//purpose  : 
//=======================================================================

inline Handle(TDataStd_Integer) TDataXtd_PatternStd::NbInstances2() const
{
  return myNb2;
}

//=======================================================================
//function : Mirror
//purpose  : 
//=======================================================================

inline Handle(TNaming_NamedShape) TDataXtd_PatternStd::Mirror() const
{
  return myMirror;
}

