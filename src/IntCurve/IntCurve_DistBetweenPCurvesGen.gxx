// Created on: 1992-10-21
// Created by: Laurent BUCHARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



#ifndef DEB
#define No_Standard_RangeError
#define No_Standard_OutOfRange
#endif



#include <math_Vector.hxx>
#include <math_Matrix.hxx>

#include <gp_Vec2d.hxx>
#include <gp_Pnt2d.hxx>


#define THECURVE1 (*((TheCurve *)thecurve1))
#define THECURVE2 (*((TheCurve *)thecurve2))

//======================================================================
IntCurve_DistBetweenPCurvesGen::IntCurve_DistBetweenPCurvesGen( const TheCurve& C1
							       ,const TheCurve& C2) {
  thecurve1 = (Standard_Address) (&C1); 
  thecurve2 = (Standard_Address )(&C2);
}
//======================================================================
Standard_Integer IntCurve_DistBetweenPCurvesGen::NbVariables(void) const {
  return(2);
}
//======================================================================
Standard_Integer IntCurve_DistBetweenPCurvesGen::NbEquations(void) const {
  return(2);
}
//======================================================================
Standard_Boolean IntCurve_DistBetweenPCurvesGen::Value
  (const math_Vector& X
   ,math_Vector& F)  
{
  gp_Pnt2d P1,P2;
  TheCurveTool::D0(THECURVE1,X(1),P1);
  TheCurveTool::D0(THECURVE2,X(2),P2);
  F(1) = P1.X() - P2.X();
  F(2) = P1.Y() - P2.Y();
  return(Standard_True);
}
//======================================================================
Standard_Boolean IntCurve_DistBetweenPCurvesGen::Derivatives
  (const math_Vector& X
   ,math_Matrix& D) 
{
  gp_Vec2d T;
  gp_Pnt2d P;
  TheCurveTool::D1(THECURVE1,X(1),P,T);
  D.Value(1,1) = T.X();
  D.Value(2,1) = T.Y();
 
  TheCurveTool::D1(THECURVE2,X(2),P,T);
  D.Value(1,2) = -(T.X());
  D.Value(2,2) = -(T.Y());

return(Standard_True);
}
//======================================================================
Standard_Boolean IntCurve_DistBetweenPCurvesGen::Values
  (const math_Vector& X
   ,math_Vector& F
   ,math_Matrix& D) 
{

  gp_Vec2d T;
  gp_Pnt2d P1,P2;
  
  TheCurveTool::D1(THECURVE1,X(1),P1,T);
  D.Value(1,1) = T.X();
  D.Value(2,1) = T.Y();
 
  TheCurveTool::D1(THECURVE2,X(2),P2,T);
  D.Value(1,2) = -(T.X());
  D.Value(2,2) = -(T.Y());

  F.Value(1) = P1.X() - P2.X();
  F.Value(2) = P1.Y() - P2.Y();

return(Standard_True);
}
//======================================================================  
					       
