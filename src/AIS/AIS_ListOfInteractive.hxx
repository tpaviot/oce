// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _AIS_ListOfInteractive_HeaderFile
#define _AIS_ListOfInteractive_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Handle_AIS_InteractiveObject_HeaderFile
#include <Handle_AIS_InteractiveObject.hxx>
#endif
#ifndef _Handle_AIS_ListNodeOfListOfInteractive_HeaderFile
#include <Handle_AIS_ListNodeOfListOfInteractive.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class Standard_NoSuchObject;
class AIS_ListIteratorOfListOfInteractive;
class AIS_InteractiveObject;
class AIS_ListNodeOfListOfInteractive;



class AIS_ListOfInteractive  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   AIS_ListOfInteractive();
  
  Standard_EXPORT     void Assign(const AIS_ListOfInteractive& Other) ;
    void operator=(const AIS_ListOfInteractive& Other) 
{
  Assign(Other);
}
  
  Standard_EXPORT     Standard_Integer Extent() const;
  
  Standard_EXPORT     void Clear() ;
~AIS_ListOfInteractive()
{
  Clear();
}
  
        Standard_Boolean IsEmpty() const;
  
  Standard_EXPORT     void Prepend(const Handle(AIS_InteractiveObject)& I) ;
  
  Standard_EXPORT     void Prepend(const Handle(AIS_InteractiveObject)& I,AIS_ListIteratorOfListOfInteractive& theIt) ;
  
  Standard_EXPORT     void Prepend(AIS_ListOfInteractive& Other) ;
  
  Standard_EXPORT     void Append(const Handle(AIS_InteractiveObject)& I) ;
  
  Standard_EXPORT     void Append(const Handle(AIS_InteractiveObject)& I,AIS_ListIteratorOfListOfInteractive& theIt) ;
  
  Standard_EXPORT     void Append(AIS_ListOfInteractive& Other) ;
  
  Standard_EXPORT     Handle_AIS_InteractiveObject& First() const;
  
  Standard_EXPORT     Handle_AIS_InteractiveObject& Last() const;
  
  Standard_EXPORT     void RemoveFirst() ;
  
  Standard_EXPORT     void Remove(AIS_ListIteratorOfListOfInteractive& It) ;
  
  Standard_EXPORT     void InsertBefore(const Handle(AIS_InteractiveObject)& I,AIS_ListIteratorOfListOfInteractive& It) ;
  
  Standard_EXPORT     void InsertBefore(AIS_ListOfInteractive& Other,AIS_ListIteratorOfListOfInteractive& It) ;
  
  Standard_EXPORT     void InsertAfter(const Handle(AIS_InteractiveObject)& I,AIS_ListIteratorOfListOfInteractive& It) ;
  
  Standard_EXPORT     void InsertAfter(AIS_ListOfInteractive& Other,AIS_ListIteratorOfListOfInteractive& It) ;


friend class AIS_ListIteratorOfListOfInteractive;



protected:





private:

  
  Standard_EXPORT   AIS_ListOfInteractive(const AIS_ListOfInteractive& Other);


Standard_Address myFirst;
Standard_Address myLast;


};

#define Item Handle_AIS_InteractiveObject
#define Item_hxx <AIS_InteractiveObject.hxx>
#define TCollection_ListNode AIS_ListNodeOfListOfInteractive
#define TCollection_ListNode_hxx <AIS_ListNodeOfListOfInteractive.hxx>
#define TCollection_ListIterator AIS_ListIteratorOfListOfInteractive
#define TCollection_ListIterator_hxx <AIS_ListIteratorOfListOfInteractive.hxx>
#define Handle_TCollection_ListNode Handle_AIS_ListNodeOfListOfInteractive
#define TCollection_ListNode_Type_() AIS_ListNodeOfListOfInteractive_Type_()
#define TCollection_List AIS_ListOfInteractive
#define TCollection_List_hxx <AIS_ListOfInteractive.hxx>

#include <TCollection_List.lxx>

#undef Item
#undef Item_hxx
#undef TCollection_ListNode
#undef TCollection_ListNode_hxx
#undef TCollection_ListIterator
#undef TCollection_ListIterator_hxx
#undef Handle_TCollection_ListNode
#undef TCollection_ListNode_Type_
#undef TCollection_List
#undef TCollection_List_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
