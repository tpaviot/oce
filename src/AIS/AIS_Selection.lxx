// Created on: 1998-06-23
// Created by: Robert COUBLANC
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define OCC189   //SAV: 18/03/02 array was replaced with list.

#define USE_MAP    //san : 18/04/03 USE_MAP - additional datamap is used to speed up access 
//to certain owners in <myresult> list

#if !defined( OCC189 ) && !defined( USE_MAP )
#include <TColStd_HArray1OfTransient.hxx>
#else
#include <TColStd_MapOfTransient.hxx>
#include <TColStd_MapIteratorOfMapOfTransient.hxx>
#endif


#if !defined( OCC189 ) && !defined( USE_MAP )
inline const Handle(TColStd_HArray1OfTransient)& AIS_Selection::Objects() const
#else
inline const AIS_NListTransient& AIS_Selection::Objects() const       
#endif
{
  return myresult;
}

inline void AIS_Selection::Init()
{
#if !defined( OCC189 ) && !defined( USE_MAP )
  mycuri=1;
#else
  myIterator = AIS_NListTransient::Iterator ( myresult );  
#endif
}

inline Standard_Boolean AIS_Selection::More() const 
{
#if !defined( OCC189 ) && !defined( USE_MAP )  
  return (myresult.IsNull() ? Standard_False : (mycuri<=myNb));
#else
  return myIterator.More();
#endif
}
inline void AIS_Selection::Next () {
#if !defined( OCC189 ) && !defined( USE_MAP )    
  mycuri++;
#else
  myIterator.Next();
#endif
}
inline const Handle(Standard_Transient)& AIS_Selection::Value() const 
{
#if !defined( OCC189 ) && !defined( USE_MAP )   
  return myresult->Value(mycuri);
#else
  return myIterator.Value();  
#endif
}

inline Standard_Integer AIS_Selection::NbStored() const
{
#if !defined( OCC189 ) && !defined( USE_MAP )    
  return myNb;
#else
  return myresult.Extent();
#endif
}
