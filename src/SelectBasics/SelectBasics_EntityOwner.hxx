// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _SelectBasics_EntityOwner_HeaderFile
#define _SelectBasics_EntityOwner_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_SelectBasics_EntityOwner_HeaderFile
#include <Handle_SelectBasics_EntityOwner.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class TopLoc_Location;


//! defines an abstract owner of sensitive primitives. <br>
//!           Owners are typically used to establish a connection <br>
//!           between sensitive entities and high-level objects (e.g. presentations). <br>
class SelectBasics_EntityOwner : public MMgt_TShared {

public:

  //! sets the selectable priority of the owner <br>
        void Set(const Standard_Integer aPriority) ;
  
        Standard_Integer Priority() const;
  
  Standard_EXPORT   virtual  Standard_Boolean HasLocation() const = 0;
  
  Standard_EXPORT   virtual  void SetLocation(const TopLoc_Location& aLoc)  = 0;
  
  Standard_EXPORT   virtual  void ResetLocation()  = 0;
  
  Standard_EXPORT   virtual const TopLoc_Location& Location() const = 0;




  DEFINE_STANDARD_RTTI(SelectBasics_EntityOwner)

protected:

  
  Standard_EXPORT   SelectBasics_EntityOwner(const Standard_Integer aPriority = 0);

Standard_Integer mypriority;


private: 




};


#include <SelectBasics_EntityOwner.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
