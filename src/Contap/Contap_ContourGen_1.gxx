// Created on: 1993-02-05
// Created by: Jacques GOUSSARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_ConstructionError.hxx>


Contap_ContourGen::Contap_ContourGen () : 
       done(Standard_False),modeset(Standard_False)
{}

Contap_ContourGen::Contap_ContourGen (const gp_Vec& Direction) :

       done(Standard_False),modeset(Standard_True)
{
  mySFunc.Set(Direction);
  myAFunc.Set(Direction);
}


Contap_ContourGen::Contap_ContourGen (const gp_Vec& Direction,
				const Standard_Real Angle) :

       done(Standard_False),modeset(Standard_True)
{
  mySFunc.Set(Direction,Angle);
  myAFunc.Set(Direction,Angle);
}

Contap_ContourGen::Contap_ContourGen (const gp_Pnt& Eye) :

       done(Standard_False),modeset(Standard_True)
{
  mySFunc.Set(Eye);
  myAFunc.Set(Eye);
}


Contap_ContourGen::Contap_ContourGen (const TheSurface& Surf,
				const Handle(TheTopolTool)& Domain,
				const gp_Vec& Direction) :

       done(Standard_False),modeset(Standard_True)
{
  Perform(Surf,Domain,Direction);
}


Contap_ContourGen::Contap_ContourGen (const TheSurface& Surf,
				const Handle(TheTopolTool)& Domain,
				const gp_Vec& Direction,
				const Standard_Real Angle) :

       done(Standard_False),modeset(Standard_True)
{
  Perform(Surf,Domain,Direction,Angle);
}


Contap_ContourGen::Contap_ContourGen (const TheSurface& Surf,
				const Handle(TheTopolTool)& Domain,
				const gp_Pnt& Eye) :

       done(Standard_False),modeset(Standard_True)
{
  Perform(Surf,Domain,Eye);
}


void Contap_ContourGen::Init (const gp_Vec& Direction)

{
  done = Standard_False;
  modeset = Standard_True;
  mySFunc.Set(Direction);
  myAFunc.Set(Direction);
}


void Contap_ContourGen::Init(const gp_Vec& Direction,
			  const Standard_Real Angle)
{
  done = Standard_False;
  modeset = Standard_True;
  mySFunc.Set(Direction,Angle);
  myAFunc.Set(Direction,Angle);
}

void Contap_ContourGen::Init (const gp_Pnt& Eye)
{
  done = Standard_False;
  modeset = Standard_True;
  mySFunc.Set(Eye);
  myAFunc.Set(Eye);
}


void Contap_ContourGen::Perform (const TheSurface& Surf,
			      const Handle(TheTopolTool)& Domain)
{
  if (!modeset) {Standard_ConstructionError::Raise();}
  mySFunc.Set(Surf);
  myAFunc.Set(Surf);

  GeomAbs_SurfaceType typS = TheSurfaceTool::GetType(Surf);
  switch (typS) {
  case GeomAbs_Plane:
  case GeomAbs_Sphere:
  case GeomAbs_Cylinder:
  case GeomAbs_Cone:
    {
      PerformAna(Domain); //Surf,Domain,Direction,0.,gp_Pnt(0.,0.,0.),1);
    }
    break;

  default:
    {
      Perform(Domain); //Surf,Domain,Direction,0.,gp_Pnt(0.,0.,0.),1);
    }
    break;
  }

}
			      

void Contap_ContourGen::Perform (const TheSurface& Surf,
			      const Handle(TheTopolTool)& Domain,
			      const gp_Vec& Direction)

{
  Init(Direction);
  Perform(Surf,Domain);
}

void Contap_ContourGen::Perform (const TheSurface& Surf,
			      const Handle(TheTopolTool)& Domain,
			      const gp_Vec& Direction,
			      const Standard_Real Angle)

{
  Init(Direction,Angle);
  Perform(Surf,Domain);
}


void Contap_ContourGen::Perform (const TheSurface& Surf,
			      const Handle(TheTopolTool)& Domain,
			      const gp_Pnt& Eye)

{
  Init(Eye);
  Perform(Surf,Domain);
}


