// Created on: 1992-01-20
// Created by: Remi GILET
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <gp_Vec2d.hxx>
#include <gp_Pnt2d.hxx>
#include <gp_Vec.hxx>
#include <gp_Pnt.hxx>

//=========================================================================
//  soit P1 le point sur la courbe TheCurve d abscisse u.                 +
//  soit C  le centre du cercle TheCirc.                                  +
//  Nous recherchons un point P2 appartenant au cercle tel que :          +
//           --->   -->                                                   +
//        *  P1P2 . CP2 = 0                                               +
//                                                                        +
//        *    -->  2    2                                                +
//           ||CP2||  = R                                                 +
//  Nous cherchons donc les zeros de la fonction suivante:                +
//                         -->  --> 2                                     +
//             -->  2    ( CP1 . T )      2                               +
//           ||CP1||  -  -----------  -  R   =  F(u)                      +
//                          --> 2                                         +
//                         ||T||                                          +
//                                                                        +
//  La derivee de cette fonction est :                                    +
//                                                                        +
//             2*(CP1.T)(CP1.N)     2*(CP1.T)*(CP1.T)*T.N                 +
//  f(u) =  -  ----------------  +  ---------------------                 +
//                  T.T                  (T.T)*(T.T)                      +
//=========================================================================
//                                                                        +
// skv: Small addition: The function and the derivative are normalized    +
//                      by an average square distance between the circle  +
//                      and the curve.                                    +
//=========================================================================

GccIter_FunctionTanCirCu::
  GccIter_FunctionTanCirCu(const gp_Circ2d& Circ   ,
			  const TheCurve&  Curv   ) {
  Curve = Curv;
  TheCirc = Circ;

//  Modified by Sergey KHROMOV - Thu Apr  5 09:51:21 2001 Begin
  Standard_Integer aNbSamp = TheCurveTool::NbSamples(Curve);
  Standard_Real    aFirst  = TheCurveTool::FirstParameter(Curve);
  Standard_Real    aLast   = TheCurveTool::LastParameter(Curve);
  Standard_Real    aStep   = (aLast - aFirst)/aNbSamp;
  Standard_Real    anX     = aFirst + aStep/2.;
  Standard_Integer aNbP    = 0;
  gp_XY            aLoc(0., 0.);

  while (anX <= aLast) {
    aLoc += (TheCurveTool::Value(Curve, anX)).XY();
    anX  += aStep;
    aNbP++;
  }
  myWeight = Max((aLoc - TheCirc.Location().XY()).SquareModulus(), TheCirc.Radius());
//  Modified by Sergey KHROMOV - Thu Apr  5 09:51:25 2001 End
 }


Standard_Boolean GccIter_FunctionTanCirCu::
  Value (const Standard_Real  X    ,
	       Standard_Real& Fval ) {
  gp_Pnt2d Point;
  gp_Vec2d Vect1;
  TheCurveTool::D1(Curve,X,Point,Vect1);
  Standard_Real NormeD1 = Vect1.Magnitude();
  gp_Vec2d TheDirection(TheCirc.Location(),Point);
  Standard_Real squaredir = TheDirection.Dot(TheDirection);
  Standard_Real R = TheCirc.Radius();
  Fval = squaredir-R*R-
    (TheDirection.Dot(Vect1))*(TheDirection.Dot(Vect1))/(NormeD1*NormeD1);
//  Modified by Sergey KHROMOV - Thu Apr  5 17:38:05 2001 Begin
  Fval /= myWeight;
//  Modified by Sergey KHROMOV - Thu Apr  5 17:38:06 2001 End
  return Standard_True;
}

Standard_Boolean GccIter_FunctionTanCirCu::
  Derivative (const Standard_Real  X     ,
	            Standard_Real& Deriv ) {
  gp_Pnt2d Point;
  gp_Vec2d Vect1,Vect2;
  TheCurveTool::D2(Curve,X,Point,Vect1,Vect2);
  Standard_Real NormeD1 = Vect1.SquareMagnitude();
  gp_Vec2d TheDirection(TheCirc.Location(),Point);
  Standard_Real cp1dott = TheDirection.Dot(Vect1);
  Deriv = -2.*(cp1dott/NormeD1)*
    ((TheDirection.Dot(Vect2))-cp1dott*Vect1.Dot(Vect2)/NormeD1);
//  Modified by Sergey KHROMOV - Thu Apr  5 17:38:15 2001 Begin
  Deriv /= myWeight;
//  Modified by Sergey KHROMOV - Thu Apr  5 17:38:15 2001 End
  return Standard_True;
}

Standard_Boolean GccIter_FunctionTanCirCu::
  Values (const Standard_Real  X     ,
	        Standard_Real& Fval  ,
	        Standard_Real& Deriv ) {
  gp_Pnt2d Point;
  gp_Vec2d Vect1,Vect2;
  TheCurveTool::D2(Curve,X,Point,Vect1,Vect2);
  Standard_Real NormeD1 = Vect1.SquareMagnitude();
  gp_Vec2d TheDirection(TheCirc.Location(),Point);
  Standard_Real squaredir = TheDirection.SquareMagnitude();
  Standard_Real cp1dott = TheDirection.Dot(Vect1);
  Standard_Real R = TheCirc.Radius();

  Fval = squaredir-R*R-cp1dott*cp1dott/NormeD1;
//  Modified by Sergey KHROMOV - Thu Apr  5 17:38:28 2001 Begin
  Fval /= myWeight;
//  Modified by Sergey KHROMOV - Thu Apr  5 17:38:28 2001 End

  Deriv = -2.*(cp1dott/NormeD1)*
    ((TheDirection.Dot(Vect2))-cp1dott*Vect1.Dot(Vect2)/NormeD1);
//  Modified by Sergey KHROMOV - Thu Apr  5 17:37:36 2001 Begin
  Deriv /= myWeight;
//  Modified by Sergey KHROMOV - Thu Apr  5 17:37:37 2001 End
  return Standard_True;
}
