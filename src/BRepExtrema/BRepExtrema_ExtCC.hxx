// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepExtrema_ExtCC_HeaderFile
#define _BRepExtrema_ExtCC_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Extrema_ExtCC_HeaderFile
#include <Extrema_ExtCC.hxx>
#endif
#ifndef _Handle_BRepAdaptor_HCurve_HeaderFile
#include <Handle_BRepAdaptor_HCurve.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class BRepAdaptor_HCurve;
class TopoDS_Edge;
class gp_Pnt;


class BRepExtrema_ExtCC
{
 public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }
  
  Standard_EXPORT BRepExtrema_ExtCC()
  {
  }
  //! It calculates all the distances. <br>
  Standard_EXPORT BRepExtrema_ExtCC(const TopoDS_Edge& E1,const TopoDS_Edge& E2);

  Standard_EXPORT void Initialize(const TopoDS_Edge& E2);
  //! An exception is raised if the fields have not been initialized. <br>
  Standard_EXPORT void Perform(const TopoDS_Edge& E1);
  //! True if the distances are found. <br>
  Standard_EXPORT Standard_Boolean IsDone() const
  {
    return myExtCC.IsDone();
  }
  //! Returns the number of extremum distances. <br>
  Standard_EXPORT Standard_Integer NbExt() const
  {
    return myExtCC.NbExt();
  }
  //! Returns True if E1 and E2 are parallel. <br>
  Standard_EXPORT Standard_Boolean IsParallel() const
  {
    return myExtCC.IsParallel();
  }
  //! Returns the value of the <N>th extremum square distance. <br>
  Standard_EXPORT Standard_Real SquareDistance(const Standard_Integer N) const
  {
    return myExtCC.SquareDistance(N);
  }
  //! Returns the parameter on the first edge of the <N>th extremum distance. <br>
  Standard_EXPORT Standard_Real ParameterOnE1(const Standard_Integer N) const;
  //! Returns the Point of the <N>th extremum distance on the edge E1. <br>
  Standard_EXPORT gp_Pnt PointOnE1(const Standard_Integer N) const;
  //! Returns the parameter on the second edge of the <N>th extremum distance. <br>
  Standard_EXPORT Standard_Real ParameterOnE2(const Standard_Integer N) const;
  //! Returns the Point of the <N>th extremum distance on the edge E2. <br>
  Standard_EXPORT gp_Pnt PointOnE2(const Standard_Integer N) const;
  //! if the edges is a trimmed curve, <br>
  //! dist11 is a square distance between the point on E1 <br>
  //! of parameter FirstParameter and the point of <br>
  //! parameter FirstParameter on E2. <br>
  Standard_EXPORT void TrimmedSquareDistances(Standard_Real& dist11,Standard_Real& distP12,Standard_Real& distP21,Standard_Real& distP22,gp_Pnt& P11,gp_Pnt& P12,gp_Pnt& P21,gp_Pnt& P22) const;

 private:

  Extrema_ExtCC myExtCC;
  Handle_BRepAdaptor_HCurve myHC;
};

#endif
