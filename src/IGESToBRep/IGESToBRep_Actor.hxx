// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IGESToBRep_Actor_HeaderFile
#define _IGESToBRep_Actor_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_IGESToBRep_Actor_HeaderFile
#include <Handle_IGESToBRep_Actor.hxx>
#endif

#ifndef _Handle_Interface_InterfaceModel_HeaderFile
#include <Handle_Interface_InterfaceModel.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Transfer_ActorOfTransientProcess_HeaderFile
#include <Transfer_ActorOfTransientProcess.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Standard_Transient_HeaderFile
#include <Handle_Standard_Transient.hxx>
#endif
#ifndef _Handle_Transfer_Binder_HeaderFile
#include <Handle_Transfer_Binder.hxx>
#endif
#ifndef _Handle_Transfer_TransientProcess_HeaderFile
#include <Handle_Transfer_TransientProcess.hxx>
#endif
class Interface_InterfaceModel;
class Standard_Transient;
class Transfer_Binder;
class Transfer_TransientProcess;


//! This class performs the transfer of an Entity from <br>
//!           IGESToBRep <br>
//! <br>
//!           I.E. for each type of Entity, it invokes the appropriate Tool <br>
//!           then returns the Binder which contains the Result <br>
class IGESToBRep_Actor : public Transfer_ActorOfTransientProcess {

public:

  
  Standard_EXPORT   IGESToBRep_Actor();
  
  Standard_EXPORT     void SetModel(const Handle(Interface_InterfaceModel)& model) ;
  //!---Purpose   By default continuity = 0 <br>
//!           if continuity = 1 : try C1 <br>
//!           if continuity = 2 : try C2 <br>
  Standard_EXPORT     void SetContinuity(const Standard_Integer continuity = 0) ;
  //! Return "thecontinuity" <br>
  Standard_EXPORT     Standard_Integer GetContinuity() const;
  
  Standard_EXPORT   virtual  Standard_Boolean Recognize(const Handle(Standard_Transient)& start) ;
  
  Standard_EXPORT   virtual  Handle_Transfer_Binder Transfer(const Handle(Standard_Transient)& start,const Handle(Transfer_TransientProcess)& TP) ;
  //! Returns the tolerance which was actually used, either from <br>
//!           the file or from statics <br>
  Standard_EXPORT     Standard_Real UsedTolerance() const;




  DEFINE_STANDARD_RTTI(IGESToBRep_Actor)

protected:




private: 


Handle_Interface_InterfaceModel themodel;
Standard_Integer thecontinuity;
Standard_Real theeps;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
