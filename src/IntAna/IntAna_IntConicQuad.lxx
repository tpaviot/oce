// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <StdFail_NotDone.hxx>
#include <Standard_DomainError.hxx>
#include <Standard_OutOfRange.hxx>

inline Standard_Boolean IntAna_IntConicQuad::IsDone() const {
  return(done);
}


inline Standard_Boolean IntAna_IntConicQuad::IsInQuadric() const {
  if (!done) {StdFail_NotDone::Raise();}
  return(inquadric);
}


inline Standard_Boolean IntAna_IntConicQuad::IsParallel() const {
  if(!done) {StdFail_NotDone::Raise();}
  return(parallel);
}


inline Standard_Integer IntAna_IntConicQuad::NbPoints() const {
  if(!done) {StdFail_NotDone::Raise();}
  if (parallel || inquadric) {Standard_DomainError::Raise();}
  return(nbpts);
}


inline const gp_Pnt& IntAna_IntConicQuad::Point
  (const Standard_Integer i) const {

  if(!done) {StdFail_NotDone::Raise();}
  if (parallel || inquadric) {Standard_DomainError::Raise();}
  if((i>nbpts)||(i<=0)) {Standard_OutOfRange::Raise();}
  return(pnts[i-1]);
}


inline Standard_Real IntAna_IntConicQuad::ParamOnConic
  (const Standard_Integer i) const {  

  if(!done) {StdFail_NotDone::Raise();}
  if (parallel || inquadric) {Standard_DomainError::Raise();}
  if((i>nbpts)||(i<=0)) {Standard_OutOfRange::Raise();}
  return(paramonc[i-1]);
}
