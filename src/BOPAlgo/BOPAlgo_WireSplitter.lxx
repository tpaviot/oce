// Created by: Peter KURNEV
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <BRep_Builder.hxx>

#include <TopoDS_Edge.hxx>

//=======================================================================
//function : BOPAlgo_EdgeInfo
//purpose  : 
//=======================================================================
class BOPAlgo_EdgeInfo {
 public:
  //
  BOPAlgo_EdgeInfo() : 
    myPassed(Standard_False),
    myInFlag(Standard_False),
    myAngle (-1.) {
  };
  //
  void SetEdge(const TopoDS_Edge& theE) {
    myEdge=theE;
  };
  //
  const TopoDS_Edge& Edge() const{
    return myEdge;
  };
  //
  void SetPassed(const Standard_Boolean theFlag) {
    myPassed=theFlag;
  };
  //
  Standard_Boolean Passed()const {
    return myPassed;
  };
  //
  void SetInFlag(const Standard_Boolean theFlag) {
    myInFlag=theFlag;
  };
  //
  Standard_Boolean IsIn()const {
    return myInFlag;
  };
  //
  void SetAngle(const Standard_Real theAngle) {
    myAngle=theAngle;
  };
  //
  Standard_Real Angle()const {
    return myAngle;
  };
  //
 protected:
  TopoDS_Edge myEdge;
  Standard_Boolean myPassed;
  Standard_Boolean myInFlag;
  Standard_Real myAngle;
};


#include <NCollection_List.hxx> 
typedef NCollection_List<BOPAlgo_EdgeInfo> BOPAlgo_ListOfEdgeInfo; 
typedef BOPAlgo_ListOfEdgeInfo::Iterator BOPAlgo_ListIteratorOfListOfEdgeInfo;  

#define _NCollection_MapHasher
#include <NCollection_IndexedDataMap.hxx>
#include <TopTools_ShapeMapHasher.hxx>

typedef NCollection_IndexedDataMap<TopoDS_Shape, \
  BOPAlgo_ListOfEdgeInfo, \
  TopTools_ShapeMapHasher> BOPAlgo_IndexedDataMapOfShapeListOfEdgeInfo; 
#undef _NCollection_MapHasher


//=======================================================================
//function : MakeWire
//purpose  : 
//=======================================================================
  inline void BOPAlgo_WireSplitter::MakeWire(BOPCol_ListOfShape& aLE, 
					     TopoDS_Wire& aWire)
{
  BRep_Builder aBB;
  aBB.MakeWire(aWire);
  //
  BOPCol_ListIteratorOfListOfShape aIt(aLE);
  for (; aIt.More(); aIt.Next()){
    aBB.Add(aWire, aIt.Value());
  }
}
