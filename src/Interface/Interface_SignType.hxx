// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Interface_SignType_HeaderFile
#define _Interface_SignType_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Interface_SignType_HeaderFile
#include <Handle_Interface_SignType.hxx>
#endif

#ifndef _MoniTool_SignText_HeaderFile
#include <MoniTool_SignText.hxx>
#endif
#ifndef _Handle_Standard_Transient_HeaderFile
#include <Handle_Standard_Transient.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Handle_Interface_InterfaceModel_HeaderFile
#include <Handle_Interface_InterfaceModel.hxx>
#endif
class TCollection_AsciiString;
class Standard_Transient;
class Interface_InterfaceModel;


//! Provides the basic service to get a type name, according <br>
//!           to a norm <br>
//!           It can be used for other classes (general signatures ...) <br>
class Interface_SignType : public MoniTool_SignText {

public:

  //! Returns an identification of the Signature (a word), given at <br>
//!           initialization time <br>//! Specialised to consider context as an InterfaceModel <br>
  Standard_EXPORT     TCollection_AsciiString Text(const Handle(Standard_Transient)& ent,const Handle(Standard_Transient)& context) const;
  //! Returns the Signature for a Transient object. It is specific <br>
//!           of each sub-class of Signature. For a Null Handle, it should <br>
//!           provide "" <br>
//!           It can work with the model which contains the entity <br>
  Standard_EXPORT   virtual  Standard_CString Value(const Handle(Standard_Transient)& ent,const Handle(Interface_InterfaceModel)& model) const = 0;
  //! From a CDL Type Name, returns the Class part (package dropped) <br>
//!           WARNING : buffered, to be immediately copied or printed <br>
  Standard_EXPORT   static  Standard_CString ClassName(const Standard_CString typnam) ;




  DEFINE_STANDARD_RTTI(Interface_SignType)

protected:




private: 




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
