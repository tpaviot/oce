// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard.hxx>
#include <Standard_OutOfRange.hxx>
#include <Standard_RangeError.hxx>

#include Array1Item_hxx


//=======================================================================
//function : TCollection_Array1
//purpose  : 
//=======================================================================

inline TCollection_Array1::TCollection_Array1 (const Standard_Integer Low,
                                               const Standard_Integer Up) :
       myLowerBound(Low),
       myUpperBound(Up),
       isAllocated(Standard_True)
{
  Standard_RangeError_Raise_if(Up < Low,"TCollection_Array1::Create");

  Array1Item* p = new Array1Item[Up-Low+1];

  myStart = (void*)(p - myLowerBound);
}

//=======================================================================
//function : TCollection_Array1
//purpose  : C Array constructor
//=======================================================================

inline TCollection_Array1::TCollection_Array1(const Array1Item& AnItem,
                                              const Standard_Integer Low,
                                              const Standard_Integer Up) :
       myLowerBound(Low),
       myUpperBound(Up),
       isAllocated(Standard_False)
{
  Standard_RangeError_Raise_if(Up < Low,"Array1::CArray");
  myStart = (void*)( &AnItem - Low ); 
}

//=======================================================================
//function : Destroy
//purpose  : 
//=======================================================================

inline void TCollection_Array1::Destroy() 
{
  if (isAllocated) {
    delete [] &ChangeValue(myLowerBound);
  }
}

//=======================================================================
//function : Length
//purpose  : 
//=======================================================================

inline Standard_Integer TCollection_Array1::Length () const 
{
	return myUpperBound - myLowerBound + 1 ;
}


//=======================================================================
//function : Lower
//purpose  : 
//=======================================================================

inline Standard_Integer TCollection_Array1::Lower () const
{
	return myLowerBound ;
}


//=======================================================================
//function : Upper
//purpose  : 
//=======================================================================

inline Standard_Integer TCollection_Array1::Upper () const
{
	return myUpperBound ;
}


//=======================================================================
//function : IsAllocated
//purpose  : 
//=======================================================================

inline Standard_Boolean TCollection_Array1::IsAllocated () const
{
 return isAllocated;
}

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

inline const Array1Item& TCollection_Array1::Value
(const Standard_Integer Index) const
{
  Standard_OutOfRange_Raise_if((Index < myLowerBound || Index > myUpperBound),NULL);
  return ((Array1Item *)myStart)[Index];
}

//=======================================================================
//function : SetValue
//purpose  : 
//=======================================================================

inline  void TCollection_Array1::SetValue (const Standard_Integer Index,
				   const Array1Item& Value)
{
  Standard_OutOfRange_Raise_if((Index < myLowerBound || Index > myUpperBound),NULL);

  ((Array1Item *)myStart)[Index] = Value ;
}


//=======================================================================
//function : ChangeValue
//purpose  : 
//=======================================================================

inline Array1Item& TCollection_Array1::ChangeValue(const Standard_Integer Index)
{
  Standard_OutOfRange_Raise_if((Index < myLowerBound || Index > myUpperBound),NULL);

  return ((Array1Item *)myStart)[Index];
}



