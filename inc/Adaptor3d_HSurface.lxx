// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Adaptor3d_Surface.hxx>

//=======================================================================
//function : FirstUParameter
//purpose  : 
//=======================================================================

inline Standard_Real Adaptor3d_HSurface::FirstUParameter() const 
{
  return Surface().FirstUParameter();
}

//=======================================================================
//function : LastUParameter
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::LastUParameter() const 
{
  return Surface().LastUParameter();
}

//=======================================================================
//function : FirstVParameter
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::FirstVParameter() const 
{
  return Surface().FirstVParameter();
}

//=======================================================================
//function : LastVParameter
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::LastVParameter() const 
{
  return Surface().LastVParameter();
}

//=======================================================================
//function : UContinuity
//purpose  : 
//=======================================================================

 inline GeomAbs_Shape Adaptor3d_HSurface::UContinuity() const 
{
  return Surface().UContinuity();
}

//=======================================================================
//function : VContinuity
//purpose  : 
//=======================================================================

 inline GeomAbs_Shape Adaptor3d_HSurface::VContinuity() const 
{
  return Surface().VContinuity();
}

//=======================================================================
//function : NbUIntervals
//purpose  : 
//=======================================================================

 inline Standard_Integer Adaptor3d_HSurface::NbUIntervals(const GeomAbs_Shape S) const 
{
  return Surface().NbUIntervals(S);
}

//=======================================================================
//function : NbVIntervals
//purpose  : 
//=======================================================================

 inline Standard_Integer Adaptor3d_HSurface::NbVIntervals(const GeomAbs_Shape S) const 
{
  return Surface().NbVIntervals(S);
}

//=======================================================================
//function : UInterval
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HSurface::UIntervals(TColStd_Array1OfReal& T,
				     const GeomAbs_Shape   S) const 
{
  Surface().UIntervals(T,S);
}

//=======================================================================
//function : VInterval
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HSurface::VIntervals(TColStd_Array1OfReal& T,
				     const GeomAbs_Shape   S) const 
{
  Surface().VIntervals(T, S);
}

//=======================================================================
//function : inline
//purpose  : 
//=======================================================================

inline Handle(Adaptor3d_HSurface) Adaptor3d_HSurface::UTrim
(const Standard_Real First, 
 const Standard_Real Last, 
 const Standard_Real Tol) const 
{
  return Surface().UTrim(First,Last,Tol);
}


//=======================================================================
//function : inline
//purpose  : 
//=======================================================================

inline Handle(Adaptor3d_HSurface) Adaptor3d_HSurface::VTrim
(const Standard_Real First, 
 const Standard_Real Last, 
 const Standard_Real Tol) const 
{
  return Surface().VTrim(First,Last,Tol);
}


//=======================================================================
//function : IsUClosed
//purpose  : 
//=======================================================================

 inline Standard_Boolean Adaptor3d_HSurface::IsUClosed() const 
{
  return Surface().IsUClosed();
}

//=======================================================================
//function : IsVClosed
//purpose  : 
//=======================================================================

 inline Standard_Boolean Adaptor3d_HSurface::IsVClosed() const 
{
  return Surface().IsVClosed();
}

//=======================================================================
//function : IsUPeriodic
//purpose  : 
//=======================================================================

 inline Standard_Boolean Adaptor3d_HSurface::IsUPeriodic() const 
{
  return Surface().IsUPeriodic();
}

//=======================================================================
//function : UPeriod
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::UPeriod() const 
{
  return Surface().UPeriod();
}

//=======================================================================
//function : IsVPeriodic
//purpose  : 
//=======================================================================

 inline Standard_Boolean Adaptor3d_HSurface::IsVPeriodic() const 
{
  return Surface().IsVPeriodic();
}

//=======================================================================
//function : VPeriod
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::VPeriod() const 
{
  return Surface().VPeriod();
}

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

 inline gp_Pnt Adaptor3d_HSurface::Value(const Standard_Real U, const Standard_Real V) const 
{
  return Surface().Value(U,V);
}

//=======================================================================
//function : D0
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HSurface::D0(const Standard_Real U, const Standard_Real V, gp_Pnt& P) const 
{
  Surface().D0(U,V,P);
}

//=======================================================================
//function : D1
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HSurface::D1(const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V) const 
{
  Surface().D1(U,V,P,D1U,D1V);
}

//=======================================================================
//function : D2
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HSurface::D2(const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV) const 
{
  Surface().D2(U,V,P,D1U,D1V,D2U,D2V,D2UV);
}

//=======================================================================
//function : D3
//purpose  : 
//=======================================================================

 inline void Adaptor3d_HSurface::D3(const Standard_Real U, const Standard_Real V, gp_Pnt& P, gp_Vec& D1U, gp_Vec& D1V, gp_Vec& D2U, gp_Vec& D2V, gp_Vec& D2UV, gp_Vec& D3U, gp_Vec& D3V, gp_Vec& D3UUV, gp_Vec& D3UVV) const 
{
  Surface().D3(U,V,P,D1U,D1V,D2U,D2V,D2UV,D3U,D3V,D3UUV,D3UVV);
}

//=======================================================================
//function : DN
//purpose  : 
//=======================================================================

 inline gp_Vec Adaptor3d_HSurface::DN(const Standard_Real U, const Standard_Real V, const Standard_Integer Nu, const Standard_Integer Nv) const 
{
  return Surface().DN(U,V,Nu,Nv);
}

//=======================================================================
//function : UResolution
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::UResolution(const Standard_Real R3d) const 
{
  return Surface().UResolution(R3d);
}

//=======================================================================
//function : VResolution
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::VResolution(const Standard_Real R3d) const 
{
  return Surface().VResolution(R3d);
}

//=======================================================================
//function : GetType
//purpose  : 
//=======================================================================

 inline GeomAbs_SurfaceType Adaptor3d_HSurface::GetType() const 
{
  return Surface().GetType();
}

//=======================================================================
//function : Plane
//purpose  : 
//=======================================================================

 inline gp_Pln Adaptor3d_HSurface::Plane() const 
{
  return Surface().Plane();
}

//=======================================================================
//function : Cylinder
//purpose  : 
//=======================================================================

 inline gp_Cylinder Adaptor3d_HSurface::Cylinder() const 
{
  return Surface().Cylinder();
}

//=======================================================================
//function : Cone
//purpose  : 
//=======================================================================

 inline gp_Cone Adaptor3d_HSurface::Cone() const 
{
  return Surface().Cone();
}

//=======================================================================
//function : Sphere
//purpose  : 
//=======================================================================

 inline gp_Sphere Adaptor3d_HSurface::Sphere() const 
{
  return Surface().Sphere();
}

//=======================================================================
//function : Torus
//purpose  : 
//=======================================================================

 inline gp_Torus Adaptor3d_HSurface::Torus() const 
{
  return Surface().Torus();
}
//=======================================================================
//function : UDegree
//purpose  : 
//=======================================================================

inline Standard_Integer Adaptor3d_HSurface::UDegree() const 
{
  return Surface().UDegree();
}
//=======================================================================
//function : NbUPoles
//purpose  : 
//=======================================================================

inline Standard_Integer Adaptor3d_HSurface::NbUPoles() const 
{
  return Surface().NbUPoles();
}
//=======================================================================
//function : VDegree
//purpose  : 
//=======================================================================

inline Standard_Integer Adaptor3d_HSurface::VDegree() const 
{
  return Surface().VDegree();
}
//=======================================================================
//function : NbVPoles
//purpose  : 
//=======================================================================

inline Standard_Integer Adaptor3d_HSurface::NbVPoles() const 
{
  return Surface().NbVPoles();
}
//=======================================================================
//function : NbUKnots
//purpose  : 
//=======================================================================

inline Standard_Integer Adaptor3d_HSurface::NbUKnots() const 
{
  return Surface().NbUKnots();
}
//=======================================================================
//function : NbVKnots
//purpose  : 
//=======================================================================

inline Standard_Integer Adaptor3d_HSurface::NbVKnots() const 
{
  return Surface().NbVKnots();
}
//=======================================================================
//function : IsURational
//purpose  : 
//=======================================================================

inline Standard_Boolean Adaptor3d_HSurface::IsURational() const 
{
  return Surface().IsURational();
}
//=======================================================================
//function : NbVKnots
//purpose  : 
//=======================================================================

inline Standard_Boolean  Adaptor3d_HSurface::IsVRational() const 
{
  return Surface().IsVRational();
}
//=======================================================================
//function : Bezier
//purpose  : 
//=======================================================================

 inline Handle(Geom_BezierSurface) Adaptor3d_HSurface::Bezier() const 
{
  return Surface().Bezier();
}

//=======================================================================
//function : BSpline
//purpose  : 
//=======================================================================

 inline Handle(Geom_BSplineSurface) Adaptor3d_HSurface::BSpline() const 
{
  return Surface().BSpline();
}

//=======================================================================
//function : Axis
//purpose  : 
//=======================================================================

 inline gp_Ax1 Adaptor3d_HSurface::AxeOfRevolution() const 
{
  return Surface().AxeOfRevolution();
}

//=======================================================================
//function : Direction
//purpose  : 
//=======================================================================

 inline gp_Dir Adaptor3d_HSurface::Direction() const 
{
  return Surface().Direction();
}

//=======================================================================
//function : BasisCurve
//purpose  : 
//=======================================================================

 inline Handle(Adaptor3d_HCurve) Adaptor3d_HSurface::BasisCurve() const 
{
  return Surface().BasisCurve();
}

//=======================================================================
//function : BasisSurface
//purpose  : 
//=======================================================================

 inline Handle(Adaptor3d_HSurface) Adaptor3d_HSurface::BasisSurface() const 
{
  return Surface().BasisSurface();
}

//=======================================================================
//function : OffsetValue
//purpose  : 
//=======================================================================

 inline Standard_Real Adaptor3d_HSurface::OffsetValue() const 
{
  return Surface().OffsetValue();
}
