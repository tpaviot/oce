// Created on: 1993-03-08
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <TopAbs_ShapeEnum.hxx>
#include <TopoDS_Shape.hxx>
#include <Standard_TypeMismatch.hxx>

// return True if the Shape has not the expected type
inline static Standard_Boolean TopoDS_Mismatch(const TopoDS_Shape& S,
					       const TopAbs_ShapeEnum T)
{
  return S.IsNull() ? Standard_False : S.ShapeType() != T;
}

//=======================================================================
//function : Vertex
//purpose  : 
//=======================================================================

inline const TopoDS_Vertex&  TopoDS::Vertex(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_VERTEX),"TopoDS::Vertex");
  return *(TopoDS_Vertex*) &S;
}


//=======================================================================
//function : Vertex
//purpose  : 
//=======================================================================

inline TopoDS_Vertex& TopoDS::Vertex(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_VERTEX),"TopoDS::Vertex");
  return *(TopoDS_Vertex*) &S;
}


//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline const TopoDS_Edge&  TopoDS::Edge(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_EDGE),"TopoDS::Edge");
  return *(TopoDS_Edge*) &S;
}


//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline TopoDS_Edge& TopoDS::Edge(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_EDGE),"TopoDS::Edge");
  return *(TopoDS_Edge*) &S;
}


//=======================================================================
//function : Wire
//purpose  : 
//=======================================================================

inline const TopoDS_Wire&  TopoDS::Wire(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_WIRE),"TopoDS::Wire");
  return *(TopoDS_Wire*) &S;
}


//=======================================================================
//function : Wire
//purpose  : 
//=======================================================================

inline TopoDS_Wire& TopoDS::Wire(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_WIRE),"TopoDS::Wire");
  return *(TopoDS_Wire*) &S;
}


//=======================================================================
//function : Face
//purpose  : 
//=======================================================================

inline const TopoDS_Face&  TopoDS::Face(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_FACE),"TopoDS::Face");
  return *(TopoDS_Face*) &S;
}


//=======================================================================
//function : Face
//purpose  : 
//=======================================================================

inline TopoDS_Face& TopoDS::Face(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_FACE),"TopoDS::Face");
  return *(TopoDS_Face*) &S;
}


//=======================================================================
//function : Shell
//purpose  : 
//=======================================================================

inline const TopoDS_Shell&  TopoDS::Shell(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_SHELL),"TopoDS::Shell");
  return *(TopoDS_Shell*) &S;
}


//=======================================================================
//function : Shell
//purpose  : 
//=======================================================================

inline TopoDS_Shell& TopoDS::Shell(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_SHELL),"TopoDS::Shell");
  return *(TopoDS_Shell*) &S;
}


//=======================================================================
//function : Solid
//purpose  : 
//=======================================================================

inline const TopoDS_Solid&  TopoDS::Solid(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_SOLID),"TopoDS::Solid");
  return *(TopoDS_Solid*) &S;
}


//=======================================================================
//function : Solid
//purpose  : 
//=======================================================================

inline TopoDS_Solid& TopoDS::Solid(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_SOLID),"TopoDS::Solid");
  return *(TopoDS_Solid*) &S;
}


//=======================================================================
//function : CompSolid
//purpose  : 
//=======================================================================

inline const TopoDS_CompSolid&  TopoDS::CompSolid(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_COMPSOLID),"TopoDS::CompSolid");
  return *(TopoDS_CompSolid*) &S;
}


//=======================================================================
//function : CompSolid
//purpose  : 
//=======================================================================

inline TopoDS_CompSolid& TopoDS::CompSolid(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_COMPSOLID),"TopoDS::CompSolid");
  return *(TopoDS_CompSolid*) &S;
}


//=======================================================================
//function : Compound
//purpose  : 
//=======================================================================

inline const TopoDS_Compound&  TopoDS::Compound(const TopoDS_Shape& S)
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_COMPOUND),"TopoDS::Compound");
  return *(TopoDS_Compound*) &S;
}


//=======================================================================
//function : Compound
//purpose  : 
//=======================================================================

inline TopoDS_Compound& TopoDS::Compound(TopoDS_Shape& S) 
{
  Standard_TypeMismatch_Raise_if(TopoDS_Mismatch(S,TopAbs_COMPOUND),"TopoDS::Compound");
  return *(TopoDS_Compound*) &S;
}


