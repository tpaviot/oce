// Created by: Peter KURNEV
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//=======================================================================
//function : 
//purpose  : 
//=======================================================================
  inline BOPDS_Curve::BOPDS_Curve()
:
  myAllocator(NCollection_BaseAllocator::CommonBaseAllocator()),
  myPaveBlocks(myAllocator),
  myTechnoVertices(myAllocator)
{
}
//=======================================================================
//function : 
//purpose  : 
//=======================================================================
  inline BOPDS_Curve::BOPDS_Curve(const Handle(NCollection_BaseAllocator)& theAllocator)
:
  myAllocator(theAllocator),
  myPaveBlocks(myAllocator),
  myTechnoVertices(myAllocator)
{
}
//=======================================================================
//function : 
//purpose  : 
//=======================================================================
  inline BOPDS_Curve::~BOPDS_Curve()
{
}
//=======================================================================
//function : SetCurve
//purpose  : 
//=======================================================================
  inline void BOPDS_Curve::SetCurve(const IntTools_Curve& theCurve)
{
  myCurve=theCurve;
}
//=======================================================================
//function : Curve
//purpose  : 
//=======================================================================
  inline const IntTools_Curve& BOPDS_Curve::Curve()const
{
  return myCurve;
}
//=======================================================================
//function : SetPaveBlocks
//purpose  : 
//=======================================================================
  inline void BOPDS_Curve::SetPaveBlocks(const BOPDS_ListOfPaveBlock& theLPB)
{
  BOPDS_ListIteratorOfListOfPaveBlock aIt;
  //
  myPaveBlocks.Clear();
  aIt.Initialize(theLPB);
  for (; aIt.More(); aIt.Next()) {
    myPaveBlocks.Append(aIt.Value());
  }
}
//=======================================================================
//function : PaveBlocks
//purpose  : 
//=======================================================================
  inline const BOPDS_ListOfPaveBlock& BOPDS_Curve::PaveBlocks()const
{
  return myPaveBlocks;
}
//=======================================================================
//function : ChangePaveBlocks
//purpose  : 
//=======================================================================
  inline BOPDS_ListOfPaveBlock& BOPDS_Curve::ChangePaveBlocks()
{
  return myPaveBlocks;
}
//=======================================================================
//function : InitPaveBlock1
//purpose  : 
//=======================================================================
  inline void BOPDS_Curve::InitPaveBlock1()
{
  if (!myPaveBlocks.Extent()) {
    Handle(BOPDS_PaveBlock) aPB=new BOPDS_PaveBlock;
    myPaveBlocks.Append(aPB);
  }
}
//=======================================================================
//function : ChangePaveBlock1
//purpose  : 
//=======================================================================
  inline Handle(BOPDS_PaveBlock)& BOPDS_Curve::ChangePaveBlock1()
{
  Handle_BOPDS_PaveBlock* pPB=(Handle_BOPDS_PaveBlock*)&myPaveBlocks.First();
  return *pPB;
}
//=======================================================================
//function : TechnoVertices
//purpose  : 
//=======================================================================
  inline const BOPCol_ListOfInteger& BOPDS_Curve::TechnoVertices()const
{
  return myTechnoVertices;
}
//=======================================================================
//function : ChangeTechnoVertices
//purpose  : 
//=======================================================================
  inline BOPCol_ListOfInteger& BOPDS_Curve::ChangeTechnoVertices()
{
  return myTechnoVertices;
}
//=======================================================================
//function : SetBox
//purpose  : 
//=======================================================================
  inline void BOPDS_Curve::SetBox(const Bnd_Box& theBox)
{
  myBox=theBox;
}
//=======================================================================
//function : Box
//purpose  : 
//=======================================================================
  inline const Bnd_Box& BOPDS_Curve::Box()const
{
  return myBox;
}
//=======================================================================
//function : ChangeBox
//purpose  : 
//=======================================================================
  inline Bnd_Box& BOPDS_Curve::ChangeBox()
{
  return myBox;
}
//=======================================================================
//function : HasEdge
//purpose  : 
//=======================================================================
  inline Standard_Boolean BOPDS_Curve::HasEdge()const
{
  Standard_Boolean bFlag;
  BOPDS_ListIteratorOfListOfPaveBlock aItPB;
  //
  bFlag=Standard_False;
  aItPB.Initialize(myPaveBlocks);
  for (; aItPB.More(); aItPB.Next()) {
    const Handle(BOPDS_PaveBlock)& aPB=aItPB.Value();
    bFlag=aPB->HasEdge();
    if (bFlag) {
      break;
    }
  }
  return bFlag;
}
