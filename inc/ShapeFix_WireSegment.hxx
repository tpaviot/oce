// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _ShapeFix_WireSegment_HeaderFile
#define _ShapeFix_WireSegment_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_ShapeExtend_WireData_HeaderFile
#include <Handle_ShapeExtend_WireData.hxx>
#endif
#ifndef _TopoDS_Vertex_HeaderFile
#include <TopoDS_Vertex.hxx>
#endif
#ifndef _TopAbs_Orientation_HeaderFile
#include <TopAbs_Orientation.hxx>
#endif
#ifndef _Handle_TColStd_HSequenceOfInteger_HeaderFile
#include <Handle_TColStd_HSequenceOfInteger.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class ShapeExtend_WireData;
class TColStd_HSequenceOfInteger;
class TopoDS_Wire;
class TopoDS_Vertex;
class TopoDS_Edge;


//! This class is auxiliary class used in ComposeShell. <br>
//!          It is intended for representing segment of the wire <br>
//!          (or whole wire). The segment itself is represented by <br>
//!          ShapeExtend_WireData. In addition, some associated data <br>
//!          necessary for computations are stored: <br>
//! <br>
//!        * Orientation flag - determines current use of the segment <br>
//!          and used for parity checking: <br>
//! <br>
//!          TopAbs_FORWARD and TopAbs_REVERSED - says that segment was <br>
//!          traversed once in the corresponding direction, and hence <br>
//!          it should be traversed once more in opposite direction; <br>
//! <br>
//!          TopAbs_EXTERNAL - the segment was not yet traversed in any <br>
//!          direction (i.e. not yet used as boundary) <br>
//! <br>
//!          TopAbs_INTERNAL - the segment was traversed in both <br>
//!          directions and hence is out of further work. <br>
//! <br>
//!          Segments of initial bounding wires are created with <br>
//!          orientation REVERSED (for outer wire) or FORWARD (for inner <br>
//!          wires), and segments of splitting seams - with orientation <br>
//!          EXTERNAL. <br>
class ShapeFix_WireSegment  {
public:

  DEFINE_STANDARD_ALLOC

  //! Creates empty segment. <br>
  Standard_EXPORT   ShapeFix_WireSegment();
  //! Creates segment and initializes it with wire and orientation. <br>
  Standard_EXPORT   ShapeFix_WireSegment(const Handle(ShapeExtend_WireData)& wire,const TopAbs_Orientation ori = TopAbs_EXTERNAL);
  //! Creates segment and initializes it with wire and orientation. <br>
  Standard_EXPORT   ShapeFix_WireSegment(const TopoDS_Wire& wire,const TopAbs_Orientation ori = TopAbs_EXTERNAL);
  //! Clears all fields. <br>
  Standard_EXPORT     void Clear() ;
  //! Loads wire. <br>
  Standard_EXPORT     void Load(const Handle(ShapeExtend_WireData)& wire) ;
  //! Returns wire. <br>
  Standard_EXPORT    const Handle_ShapeExtend_WireData& WireData() const;
  //! Sets orientation flag. <br>
  Standard_EXPORT     void Orientation(const TopAbs_Orientation ori) ;
  //! Returns orientation flag. <br>
  Standard_EXPORT     TopAbs_Orientation Orientation() const;
  //! Returns first vertex of the first edge in the wire <br>
//!          (no dependance on Orientation()). <br>
  Standard_EXPORT     TopoDS_Vertex FirstVertex() const;
  //! Returns last vertex of the last edge in the wire <br>
//!          (no dependance on Orientation()). <br>
  Standard_EXPORT     TopoDS_Vertex LastVertex() const;
  //! Returns True if FirstVertex() == LastVertex() <br>
  Standard_EXPORT     Standard_Boolean IsClosed() const;
  //! Returns Number of edges in the wire <br>
  Standard_EXPORT     Standard_Integer NbEdges() const;
  //! Returns edge by given index in the wire <br>
  Standard_EXPORT     TopoDS_Edge Edge(const Standard_Integer i) const;
  //! Replaces edge at index i by new one. <br>
  Standard_EXPORT     void SetEdge(const Standard_Integer i,const TopoDS_Edge& edge) ;
  //! Insert a new edge with index i and implicitly defined <br>
//!          patch indices (indefinite patch). <br>
//!          If i==0, edge is inserted at end of wire. <br>
  Standard_EXPORT     void AddEdge(const Standard_Integer i,const TopoDS_Edge& edge) ;
  //! Insert a new edge with index i and explicitly defined <br>
//!          patch indices. If i==0, edge is inserted at end of wire. <br>
  Standard_EXPORT     void AddEdge(const Standard_Integer i,const TopoDS_Edge& edge,const Standard_Integer iumin,const Standard_Integer iumax,const Standard_Integer ivmin,const Standard_Integer ivmax) ;
  //! Set patch indices for edge i. <br>
  Standard_EXPORT     void SetPatchIndex(const Standard_Integer i,const Standard_Integer iumin,const Standard_Integer iumax,const Standard_Integer ivmin,const Standard_Integer ivmax) ;
  
  Standard_EXPORT     void DefineIUMin(const Standard_Integer i,const Standard_Integer iumin) ;
  
  Standard_EXPORT     void DefineIUMax(const Standard_Integer i,const Standard_Integer iumax) ;
  
  Standard_EXPORT     void DefineIVMin(const Standard_Integer i,const Standard_Integer ivmin) ;
  //! Modify minimal or maximal patch index for edge i. <br>
//!          The corresponding patch index for that edge is modified so <br>
//!          as to satisfy eq. iumin <= myIUMin(i) <= myIUMax(i) <= iumax <br>
  Standard_EXPORT     void DefineIVMax(const Standard_Integer i,const Standard_Integer ivmax) ;
  //! Returns patch indices for edge i. <br>
  Standard_EXPORT     void GetPatchIndex(const Standard_Integer i,Standard_Integer& iumin,Standard_Integer& iumax,Standard_Integer& ivmin,Standard_Integer& ivmax) const;
  //! Checks patch indices for edge i to satisfy equations <br>
//!          IUMin(i) <= IUMax(i) <= IUMin(i)+1 <br>
  Standard_EXPORT     Standard_Boolean CheckPatchIndex(const Standard_Integer i) const;
  
  Standard_EXPORT     void SetVertex(const TopoDS_Vertex& theVertex) ;
  
  Standard_EXPORT     TopoDS_Vertex GetVertex() const;
  
  Standard_EXPORT     Standard_Boolean IsVertex() const;





protected:





private:



Handle_ShapeExtend_WireData myWire;
TopoDS_Vertex myVertex;
TopAbs_Orientation myOrient;
Handle_TColStd_HSequenceOfInteger myIUMin;
Handle_TColStd_HSequenceOfInteger myIUMax;
Handle_TColStd_HSequenceOfInteger myIVMin;
Handle_TColStd_HSequenceOfInteger myIVMax;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
