// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_JmpBuf.hxx>

inline Standard_JmpBuf& Standard_ErrorHandler::Label()
{
  return myLabel;
}

/*Common part for jumps*/
// In the current version setjmp is used. The alternative solution is to
// use sigsetjmp that stores the signal mask (to be checked)
// In the original implementation sigsetjmp is tried to use for SUN and IRIX
// in the following way:
//    #ifdef SOLARIS
//      #define DoesNotAbort(aHandler) !sigsetjmp(aHandler.Label(),1)
//    #endif
//

#if defined(NO_CXX_EXCEPTION) || defined(OCC_CONVERT_SIGNALS)
  #ifdef SOLARIS
    #define DoesNotAbort(aHandler) !setjmp(aHandler.Label())
  #elif IRIX
    #define DoesNotAbort(aHandler) !setjmp(aHandler.Label())
  #else
    #define DoesNotAbort(aHandler) !setjmp(aHandler.Label())
  #endif
#endif


#ifdef NO_CXX_EXCEPTION
/* No CXX Exceeptions, only jumps in all the cases.*/
  #define try               Standard_ErrorHandler _Function; \
                            if(DoesNotAbort(_Function))
  #define catch(Error)        else if(_Function.Catches(STANDARD_TYPE(Error)))
  #define OCC_CATCH_SIGNALS 
#elif defined(OCC_CONVERT_SIGNALS)
/* Exceptions are raied as usual, signal are converted into jumps and 
   raused in the proper point.*/
  #define OCC_CATCH_SIGNALS   Standard_ErrorHandler _aHandler; \
                              if(!DoesNotAbort(_aHandler)) { \
				_aHandler.Catches(STANDARD_TYPE(Standard_Failure)); \
				_aHandler.Error()->Reraise(); \
			      }
#else
/*Normal Exceptions (for example WNT)*/
  #define OCC_CATCH_SIGNALS
#endif
