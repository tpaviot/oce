// Created on: 1994-03-23
// Created by: Jean Marc LACHAUME
// Copyright (c) 1994-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
// Function : Geom2dHatch_Intersector
// Purpose  : Constructor.
//=======================================================================

inline Geom2dHatch_Intersector::Geom2dHatch_Intersector
  (const Standard_Real Confusion,
   const Standard_Real Tangency) :
       Geom2dInt_GInter () ,
       myConfusionTolerance (Confusion) ,
       myTangencyTolerance  (Tangency)
{
}

//=======================================================================
// Function : ConfusionTolerance
// Purpose  : Returns the confusion tolerance of the intersector.
//=======================================================================

inline Standard_Real Geom2dHatch_Intersector::ConfusionTolerance
  () const
{
  return myConfusionTolerance ;
}

//=======================================================================
// Function : SetConfusionTolerance
// Purpose  : Sets the confusion tolerance of the intersector.
//=======================================================================

inline void Geom2dHatch_Intersector::SetConfusionTolerance
  (const Standard_Real Confusion)
{
  myConfusionTolerance = Confusion ;
}

//=======================================================================
// Function : TangencyTolerance
// Purpose  : Returns the tangency tolerance of the intersector.
//=======================================================================

inline Standard_Real Geom2dHatch_Intersector::TangencyTolerance
  () const
{
  return myTangencyTolerance ;
}

//=======================================================================
// Function : SetTangencyTolerance
// Purpose  : Sets the tangency tolerance of the intersector.
//=======================================================================

inline void Geom2dHatch_Intersector::SetTangencyTolerance
  (const Standard_Real Tangency)
{
  myTangencyTolerance = Tangency ;
}

//=======================================================================
// Function : Intersect
// Purpose  : Intersects the curves C1 and C2.
//=======================================================================
#include <Adaptor2d_Curve2d.hxx>
#include <Geom2dAdaptor_Curve.hxx>

inline void Geom2dHatch_Intersector::Intersect
  (const Geom2dAdaptor_Curve& C1,
   const Geom2dAdaptor_Curve& C2)
{
     Geom2dInt_GInter::Perform(C1, 
			    C2, 
			    myConfusionTolerance, myTangencyTolerance) ; 
  
}
