// Created on: 1993-02-19
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : FirstUParameter
//purpose  : 
//=======================================================================

inline Standard_Real BRepAdaptor_Surface::FirstUParameter() const 
{
  return mySurf.FirstUParameter();
}

//=======================================================================
//function : LastUParameter
//purpose  : 
//=======================================================================

inline Standard_Real BRepAdaptor_Surface::LastUParameter() const 
{
  return mySurf.LastUParameter();
}

//=======================================================================
//function : FirstVParameter
//purpose  : 
//=======================================================================

inline Standard_Real BRepAdaptor_Surface::FirstVParameter() const 
{
  return mySurf.FirstVParameter();
}

//=======================================================================
//function : LastVParameter
//purpose  : 
//=======================================================================

inline Standard_Real BRepAdaptor_Surface::LastVParameter() const 
{
  return mySurf.LastVParameter();
}

//=======================================================================
//function : UContinuity
//purpose  : 
//=======================================================================

inline GeomAbs_Shape BRepAdaptor_Surface::UContinuity() const 
{
  return mySurf.UContinuity();
}

//=======================================================================
//function : VContinuity
//purpose  : 
//=======================================================================

inline GeomAbs_Shape  BRepAdaptor_Surface::VContinuity() const 
{
  return mySurf.VContinuity();
}

//=======================================================================
//function : NbUIntervals
//purpose  : 
//=======================================================================

inline Standard_Integer BRepAdaptor_Surface::NbUIntervals
  (const GeomAbs_Shape S) const 
{
  return mySurf.NbUIntervals(S);
}

//=======================================================================
//function : NbVIntervals
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::NbVIntervals
  (const GeomAbs_Shape S) const 
{
  return mySurf.NbVIntervals(S);
}

//=======================================================================
//function : IsUClosed
//purpose  : 
//=======================================================================

inline Standard_Boolean  BRepAdaptor_Surface::IsUClosed()const 
{
  return mySurf.IsUClosed();
}

//=======================================================================
//function : IsVClosed
//purpose  : 
//=======================================================================

inline Standard_Boolean  BRepAdaptor_Surface::IsVClosed()const 
{
  return mySurf.IsVClosed();
}

//=======================================================================
//function : IsUPeriodic
//purpose  : 
//=======================================================================

inline Standard_Boolean  BRepAdaptor_Surface::IsUPeriodic()const 
{
  return mySurf.IsUPeriodic();
}

//=======================================================================
//function : UPeriod
//purpose  : 
//=======================================================================

inline Standard_Real  BRepAdaptor_Surface::UPeriod()const 
{
  return mySurf.UPeriod();
}

//=======================================================================
//function : IsVPeriodic
//purpose  : 
//=======================================================================

inline Standard_Boolean  BRepAdaptor_Surface::IsVPeriodic()const 
{
  return mySurf.IsVPeriodic();
}

//=======================================================================
//function : VPeriod
//purpose  : 
//=======================================================================

inline Standard_Real  BRepAdaptor_Surface::VPeriod()const 
{
  return mySurf.VPeriod();
}

//=======================================================================
//function : UResolution
//purpose  : 
//=======================================================================

inline Standard_Real  BRepAdaptor_Surface::UResolution(const Standard_Real R3d)const 
{
  return mySurf.UResolution(R3d);
}

//=======================================================================
//function : VResolution
//purpose  : 
//=======================================================================

inline Standard_Real  BRepAdaptor_Surface::VResolution(const Standard_Real R3d)const 
{
  return mySurf.VResolution(R3d);
}

//=======================================================================
//function : GetType
//purpose  : 
//=======================================================================

inline GeomAbs_SurfaceType  BRepAdaptor_Surface::GetType()const 
{
  return mySurf.GetType();
}
//=======================================================================
//function : UDegree
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::UDegree()const 
{
  return mySurf.UDegree();
}


//=======================================================================
//function : NbUPoles
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::NbUPoles()const 
{
  return mySurf.NbUPoles();
}

//=======================================================================
//function : VDegree
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::VDegree()const 
{
  return mySurf.VDegree();
}


//=======================================================================
//function : NbVPoles
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::NbVPoles()const 
{
  return mySurf.NbVPoles();
}

//=======================================================================
//function : NbUKnots
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::NbUKnots()const 
{
  return mySurf.NbUKnots();
}



//=======================================================================
//function : NbVKnots
//purpose  : 
//=======================================================================

inline Standard_Integer  BRepAdaptor_Surface::NbVKnots()const 
{
  return mySurf.NbVKnots();
}


//=======================================================================
//function : IsURational
//purpose  : 
//=======================================================================

inline Standard_Boolean  BRepAdaptor_Surface::IsURational()const 
{
  return mySurf.IsURational();
}

//=======================================================================
//function : IsVRational
//purpose  : 
//=======================================================================

inline Standard_Boolean  BRepAdaptor_Surface::IsVRational()const 
{
  return mySurf.IsVRational();
}

