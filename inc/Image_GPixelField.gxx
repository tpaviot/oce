// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_OutOfRange.hxx>
#include <Standard_DimensionMismatch.hxx>
#include <Standard_RangeError.hxx>
#include <Standard_OutOfMemory.hxx>

#ifdef TRACE
static int GPixelFieldCount = 0 ;
#endif

//=======================================================================
//function : Image_GPixelField
//purpose  : 
//=======================================================================

Image_GPixelField::Image_GPixelField (const Standard_Integer Width,
				      const Standard_Integer Height) :
	myWidth(Width),
	myHeight(Height),
	myDeletable(Standard_True)
{

  Standard_Integer Size = myWidth * myHeight;
 
  Standard_RangeError_Raise_if(( myWidth <= 0  || myHeight <= 0 ),
			       "Image_GPixelField::Create");

#ifdef TRACE
  cout << form("\tCreate a new GPixelField ( Count : %d )\n",++GPixelFieldCount)
       << flush ;
#endif

  myData = new Item [Size];
}

//=======================================================================
//function : Image_GPixelField
//purpose  : 
//=======================================================================

Image_GPixelField::Image_GPixelField (const Standard_Integer Width,
				      const Standard_Integer Height,
					const Item& V) :
	myWidth(Width),
	myHeight(Height),
	myDeletable(Standard_True)
{

  Standard_Integer Size = myWidth * myHeight;
 
  Standard_RangeError_Raise_if(( myWidth <= 0  || myHeight <= 0 ),
			       "Image_GPixelField::Create");

#ifdef TRACE
  cout << form("\tCreate a new GPixelField ( Count : %d )\n",++GPixelFieldCount)
       << flush ;
#endif

  myData = new Item [Size];
  
  for (Standard_Integer I = 0; I < Size ; I++) ((Item *)myData)[I] = V;
}

//=======================================================================
//function : Destroy
//purpose  : 
//=======================================================================

void Image_GPixelField::Destroy () 
{
#ifdef TRACE
  cout << form("\t\tDelete a GPixelField ( Count : %d )\n", --GPixelFieldCount )
       << flush ;
#endif

  if(myDeletable) {
    delete [] (Item *) myData;
  }
}

