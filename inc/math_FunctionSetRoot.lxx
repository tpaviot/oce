// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <StdFail_NotDone.hxx>
#include <Standard_DimensionError.hxx>


inline Standard_Boolean math_FunctionSetRoot::IsDone() const { return Done; }

inline Standard_OStream& operator<<(Standard_OStream& o,
				    const math_FunctionSetRoot& F)
{
  F.Dump(o);
  return o;
}


inline const math_Vector& math_FunctionSetRoot::Root() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Sol;
}


inline const math_Vector& math_FunctionSetRoot::FunctionSetErrors() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Delta;
}


inline const math_Matrix& math_FunctionSetRoot::Derivative() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return DF;
}

inline void math_FunctionSetRoot::Derivative(math_Matrix& Der) const{
  StdFail_NotDone_Raise_if(!Done, " ");
  Standard_DimensionError_Raise_if(Der.ColNumber() != Sol.Length(), " ");
  Der = DF;
}


inline Standard_Integer math_FunctionSetRoot::StateNumber() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return State;
}


inline Standard_Integer math_FunctionSetRoot::NbIterations() const{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Kount;
}    

inline Standard_Boolean math_FunctionSetRoot::IsDivergent() const
{
  return myIsDivergent;
}
