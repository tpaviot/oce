// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

inline Handle(Prs2d_Drawer) AIS2D_InteractiveObject::Attributes() const {
	return myDrawer;
}

inline Standard_Integer AIS2D_InteractiveObject::DisplayMode() const {
 return myDisplayMode;
}
   
inline Standard_Boolean AIS2D_InteractiveObject::HasDisplayMode() const {
 return myDisplayMode != -1;
} 
   
inline void AIS2D_InteractiveObject::SetDisplayMode( const Standard_Integer aMode )  {
  myDisplayMode = aMode;
} 
   
inline void AIS2D_InteractiveObject::UnsetDisplayMode()  {
  myDisplayMode = -1;
}
   
inline Standard_Integer AIS2D_InteractiveObject::DefaultDisplayMode() const {
  return 0;
}
   
inline Standard_Boolean AIS2D_InteractiveObject::AcceptDisplayMode( const Standard_Integer /*aMode*/ ) const {
  return Standard_True;
}
  
inline AIS2D_TypeOfDetection AIS2D_InteractiveObject::HighlightMode() const {
  return myHighlightMode;
}
  
inline Standard_Boolean AIS2D_InteractiveObject::HasHighlightMode() const {
  return myHighlightMode != AIS2D_TOD_NONE;
}
  
inline void AIS2D_InteractiveObject::SetHighlightMode( const AIS2D_TypeOfDetection aMode )  {
  myHighlightMode = aMode;
}
 
inline void AIS2D_InteractiveObject::UnsetHighlightMode()  {
  myHighlightMode = AIS2D_TOD_NONE;
}
 
inline AIS2D_TypeOfDetection AIS2D_InteractiveObject::DefaultHighlightMode() const {
  return AIS2D_TOD_PRIMITIVE;
}
 
inline Standard_Integer AIS2D_InteractiveObject::SelectionMode() const {
  return mySelectionMode;
}
 
inline Standard_Boolean AIS2D_InteractiveObject::HasSelectionMode() const {
  return mySelectionMode  != -1;
}
  
inline void AIS2D_InteractiveObject::SetSelectionMode( const Standard_Integer aMode )  {
  mySelectionMode = aMode;
}
 
inline void AIS2D_InteractiveObject::UnsetSelectionMode()  {
  mySelectionMode = -1;
}
 
inline Standard_Integer AIS2D_InteractiveObject::DefaultSelectionMode() const {
  return 0;
}

inline Standard_Integer AIS2D_InteractiveObject::State() const {
	return myState;
}

inline void AIS2D_InteractiveObject::SetState( const Standard_Integer aState ) {
	myState = aState;
}
