// Created on: 2005-12-08
// Created by: Sergey KHROMOV
// Copyright (c) 2005-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



#include <StdFail_NotDone.hxx>

//==========================================================================
//function : IsDone
//           Returns Standard_True if computation is performed successfully.
//==========================================================================

inline Standard_Boolean math_KronrodSingleIntegration::IsDone() const 
{
  return myIsDone;
}

//==========================================================================
//function : Value
//           Returns the value of the integral.
//==========================================================================

inline Standard_Real math_KronrodSingleIntegration::Value() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myValue;
}

//==========================================================================
//function : ErrorReached
//           Returns the value of the relative error reached.
//==========================================================================

inline Standard_Real math_KronrodSingleIntegration::ErrorReached() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myErrorReached;
}

//=======================================================================
//function : AbsolutError
//purpose  : 
//=======================================================================

inline Standard_Real math_KronrodSingleIntegration::AbsolutError() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myAbsolutError;
}
 
//==========================================================================
//function : OrderReached
//           Returns the number of Kronrod points for which the result
//           is computed.
//==========================================================================

inline Standard_Integer math_KronrodSingleIntegration::OrderReached() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myNbPntsReached;
}

//==========================================================================
//function : NbIterReached
//           Returns the number of iterations that were made to compute result.
//==========================================================================

inline Standard_Integer math_KronrodSingleIntegration::NbIterReached() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myNbIterReached;
}
