// Created on: 1998-02-16
// Created by: Jing Cheng MEI
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

// modified     Sergey Zaritchny

//=======================================================================
//function : Signature
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Signature(const Standard_Integer signature) 
{
  mySignature = signature;
}

//=======================================================================
//function : Axis1Reversed
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Axis1Reversed(const Standard_Boolean Axis1Reversed) 
{
  myAxis1Reversed = Axis1Reversed;
}

//=======================================================================
//function : Axis2Reversed
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Axis2Reversed(const Standard_Boolean Axis2Reversed) 
{
  myAxis2Reversed = Axis2Reversed;
}
//=======================================================================
//function : Axis1
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Axis1(const Handle(PNaming_NamedShape)& Axis1) 
{
  myAxis1 = Axis1;
}

//=======================================================================
//function : Axis2
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Axis2(const Handle(PNaming_NamedShape)& Axis2) 
{
  myAxis2 = Axis2;
}

//=======================================================================
//function : Value1
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Value1(const Handle(PDataStd_Real)& Value1) 
{
  myValue1 = Value1;
}

//=======================================================================
//function : Value2
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Value2(const Handle(PDataStd_Real)& Value2) 
{
  myValue2 = Value2;
}

//=======================================================================
//function : NbInstances1
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::NbInstances1(const Handle(PDataStd_Integer)& NbInstances1) 
{
  myNb1 = NbInstances1;
}

//=======================================================================
//function : NbInstances2
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::NbInstances2(const Handle(PDataStd_Integer)& NbInstances2) 
{
  myNb2 = NbInstances2;
}

//=======================================================================
//function : Mirror
//purpose  : 
//=======================================================================

inline void PDataXtd_PatternStd::Mirror(const Handle(PNaming_NamedShape)& plane)
{
  myMirror = plane;
}

//=======================================================================
//function : Signature
//purpose  : 
//=======================================================================

inline Standard_Integer PDataXtd_PatternStd::Signature() const
{
  return mySignature;
}

//=======================================================================
//function : Axis1Reversed
//purpose  : 
//=======================================================================

inline Standard_Boolean PDataXtd_PatternStd::Axis1Reversed() const
{
  return myAxis1Reversed;
}


//=======================================================================
//function : Axis2Reversed
//purpose  : 
//=======================================================================

inline Standard_Boolean PDataXtd_PatternStd::Axis2Reversed() const
{
  return myAxis2Reversed;
}

//=======================================================================
//function : Axis1
//purpose  : 
//=======================================================================

inline Handle(PNaming_NamedShape) PDataXtd_PatternStd::Axis1() const
{
  return myAxis1;
}

//=======================================================================
//function : Axis2
//purpose  : 
//=======================================================================

inline Handle(PNaming_NamedShape) PDataXtd_PatternStd::Axis2() const
{
  return myAxis2;
}

//=======================================================================
//function : Value1
//purpose  : 
//=======================================================================

inline Handle(PDataStd_Real) PDataXtd_PatternStd::Value1() const
{
  return myValue1;
}

//=======================================================================
//function : Value2
//purpose  : 
//=======================================================================

inline Handle(PDataStd_Real) PDataXtd_PatternStd::Value2() const
{
  return myValue2;
}

//=======================================================================
//function : NbInstances1
//purpose  : 
//=======================================================================

inline Handle(PDataStd_Integer) PDataXtd_PatternStd::NbInstances1() const
{
  return myNb1;
}

//=======================================================================
//function : NbInstances2
//purpose  : 
//=======================================================================

inline Handle(PDataStd_Integer) PDataXtd_PatternStd::NbInstances2() const
{
  return myNb2;
}

//=======================================================================
//function : Mirror
//purpose  : 
//=======================================================================

inline Handle(PNaming_NamedShape) PDataXtd_PatternStd::Mirror() const
{
  return myMirror;
}

