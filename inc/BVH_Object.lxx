// Created on: 2013-12-20
// Created by: Denis BOGOLEPOV
// Copyright (c) 2013-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

// =======================================================================
// function : BVH_Object
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Object<T, N>::BVH_Object()
: myIsDirty (Standard_False)
{
  //
}

// =======================================================================
// function : ~BVH_Object
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Object<T, N>::~BVH_Object()
{
  //
}

// =======================================================================
// function : Properties
// purpose  :
// =======================================================================
template<class T, int N>
const NCollection_Handle<BVH_Properties>& BVH_Object<T, N>::Properties() const
{
  return myProperties;
}

// =======================================================================
// function : SetProperties
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_Object<T, N>::SetProperties (const NCollection_Handle<BVH_Properties>& theProperties)
{
  myProperties = theProperties;
}

// =======================================================================
// function : MarkDirty
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_Object<T, N>::MarkDirty()
{
  myIsDirty = Standard_True;
}
