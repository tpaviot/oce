// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepFeat_Form_HeaderFile
#define _BRepFeat_Form_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopTools_DataMapOfShapeListOfShape_HeaderFile
#include <TopTools_DataMapOfShapeListOfShape.hxx>
#endif
#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _TopTools_ListOfShape_HeaderFile
#include <TopTools_ListOfShape.hxx>
#endif
#ifndef _BRepFeat_PerfSelection_HeaderFile
#include <BRepFeat_PerfSelection.hxx>
#endif
#ifndef _TopoDS_Face_HeaderFile
#include <TopoDS_Face.hxx>
#endif
#ifndef _TopTools_DataMapOfShapeShape_HeaderFile
#include <TopTools_DataMapOfShapeShape.hxx>
#endif
#ifndef _BRepFeat_StatusError_HeaderFile
#include <BRepFeat_StatusError.hxx>
#endif
#ifndef _BRepBuilderAPI_MakeShape_HeaderFile
#include <BRepBuilderAPI_MakeShape.hxx>
#endif
#ifndef _Handle_Geom_Curve_HeaderFile
#include <Handle_Geom_Curve.hxx>
#endif
#ifndef _Handle_TopOpeBRepBuild_HBuilder_HeaderFile
#include <Handle_TopOpeBRepBuild_HBuilder.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class TopTools_ListOfShape;
class TopoDS_Shape;
class TColGeom_SequenceOfCurve;
class Geom_Curve;
class LocOpe_Gluer;
class BRepAlgoAPI_BooleanOperation;
class TopOpeBRepBuild_HBuilder;


//!  Provides general functions to build form features. <br>
//! Form features can be depressions or protrusions and include the following types: <br>
//! -          Cylinder <br>
//! -          Draft Prism <br>
//! -          Prism <br>
//! -          Revolved feature <br>
//! -          Pipe <br>
//! In each case, you have a choice of operation type between the following: <br>
//! -          removing matter (a Boolean cut: Fuse setting 0) <br>
//! -          adding matter (Boolean fusion: Fuse setting 1) <br>
//! The semantics of form feature creation is based on the construction of shapes: <br>
//! -      along a length <br>
//! -      up to a limiting face <br>
//! -      from a limiting face to a  height <br>
//! -      above and/or below a plane <br>
//! The shape defining construction of the feature can be either the <br>
//! supporting edge or the concerned area of a face. <br>
//! In case of the supporting edge, this contour can be attached to a <br>
//! face of the basis shape by binding. When the contour is bound to this <br>
//! face, the information that the contour will slide on the face <br>
//! becomes available to the relevant class methods. In case of the <br>
//! concerned area of a face, you could, for example, cut it out and <br>
//! move it to a different height which will define the limiting face of a <br>
//! protrusion or depression. <br>
//! Topological definition with local operations of this sort makes <br>
//! calculations simpler and faster than a global operation. The latter <br>
//! would entail a second phase of removing unwanted matter to get the same result. <br>
class BRepFeat_Form  : public BRepBuilderAPI_MakeShape {
public:

  DEFINE_STANDARD_ALLOC

  //! returns the list of generated Faces. <br>
  Standard_EXPORT   virtual const TopTools_ListOfShape& Modified(const TopoDS_Shape& F) ;
  //! returns a list of the created faces <br>
//!          from the shape <S>. <br>
  Standard_EXPORT   virtual const TopTools_ListOfShape& Generated(const TopoDS_Shape& S) ;
  
  Standard_EXPORT   virtual  Standard_Boolean IsDeleted(const TopoDS_Shape& S) ;
  //! Returns the list  of shapes created  at the bottom  of <br>
//!          the created form.  It may be an empty list. <br>
  Standard_EXPORT    const TopTools_ListOfShape& FirstShape() const;
  //! Returns  the list of shapes  created at the top of the <br>
//!          created form.  It may be an empty list. <br>
  Standard_EXPORT    const TopTools_ListOfShape& LastShape() const;
  //! Returns a list of the limiting and glueing edges <br>
//! generated by the feature. These edges did not originally <br>
//! exist in the basis shape. <br>
//! The list provides the information necessary for <br>
//! subsequent addition of fillets. It may be an empty list. <br>
  Standard_EXPORT    const TopTools_ListOfShape& NewEdges() const;
  //! Returns a list of the tangent edges among the limiting <br>
//! and glueing edges generated by the feature. These <br>
//! edges did not originally exist in the basis shape and are <br>
//! tangent to the face against which the feature is built. <br>
//! The list provides the information necessary for <br>
//! subsequent addition of fillets. It may be an empty list. <br>
//! If an edge is tangent, no fillet is possible, and the edge <br>
//! must subsequently be removed if you want to add a fillet. <br>
  Standard_EXPORT    const TopTools_ListOfShape& TgtEdges() const;
  //! Initializes the topological construction if the basis shape is present. <br>
        void BasisShapeValid() ;
  //! Initializes the topological construction if the generated shape S is present. <br>
        void GeneratedShapeValid() ;
  
//! Initializes the topological construction if the shape is <br>
//! present from the specified integer on. <br>
        void ShapeFromValid() ;
  
//! Initializes the topological construction if the shape is <br>
//! present until the specified integer. <br>
        void ShapeUntilValid() ;
  
//! Initializes the topological construction if the glued face is present. <br>
        void GluedFacesValid() ;
  
//! Initializes the topological construction if the sketch face <br>
//! is present. If the sketch face is inside the basis shape, <br>
//! local operations such as glueing can be performed. <br>
        void SketchFaceValid() ;
  //! Initializes the topological construction if the selected face is present. <br>
        void PerfSelectionValid() ;
  
  Standard_EXPORT   virtual  void Curves(TColGeom_SequenceOfCurve& S)  = 0;
  
  Standard_EXPORT   virtual  Handle_Geom_Curve BarycCurve()  = 0;
  
  Standard_EXPORT     BRepFeat_StatusError CurrentStatusError() const;





protected:

  //! Redefines the empty constructor. <br>
      BRepFeat_Form();
  //! General perform method... <br>
  Standard_EXPORT     void GlobalPerform() ;
  
  Standard_EXPORT     void UpdateDescendants(const LocOpe_Gluer& G) ;
  
  Standard_EXPORT     void UpdateDescendants(const BRepAlgoAPI_BooleanOperation& aBOP,const TopoDS_Shape& SResult,const Standard_Boolean SkipFace = Standard_False) ;
  
  Standard_EXPORT     void UpdateDescendants(const Handle(TopOpeBRepBuild_HBuilder)& B,const TopoDS_Shape& SResult,const Standard_Boolean SkipFace = Standard_False) ;
  
  Standard_EXPORT     Standard_Boolean TransformShapeFU(const Standard_Integer flag) ;


Standard_Boolean myFuse;
Standard_Boolean myModify;
TopTools_DataMapOfShapeListOfShape myMap;
TopoDS_Shape myFShape;
TopoDS_Shape myLShape;
TopTools_ListOfShape myNewEdges;
TopTools_ListOfShape myTgtEdges;
BRepFeat_PerfSelection myPerfSelection;
Standard_Boolean myJustGluer;
Standard_Boolean myJustFeat;
TopoDS_Shape mySbase;
TopoDS_Face mySkface;
TopoDS_Shape myGShape;
TopoDS_Shape mySFrom;
TopoDS_Shape mySUntil;
TopTools_DataMapOfShapeShape myGluedF;


private:



Standard_Boolean mySbOK;
Standard_Boolean mySkOK;
Standard_Boolean myGSOK;
Standard_Boolean mySFOK;
Standard_Boolean mySUOK;
Standard_Boolean myGFOK;
Standard_Boolean myPSOK;
BRepFeat_StatusError myStatusError;


};


#include <BRepFeat_Form.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
