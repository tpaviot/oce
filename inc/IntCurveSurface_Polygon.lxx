// Created on: 1993-06-03
// Created by: Laurent BUCHARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//======================================================================	   
inline const Bnd_Box& IntCurveSurface_Polygon::Bounding(void) const {
  return(TheBnd);
}
//======================================================================
inline Standard_Real IntCurveSurface_Polygon::DeflectionOverEstimation() const {
  return(TheDeflection);
}
//======================================================================
inline void IntCurveSurface_Polygon::SetDeflectionOverEstimation
  (const Standard_Real x) {
  TheDeflection = x;
  TheBnd.Enlarge(TheDeflection);
}
//======================================================================
inline void IntCurveSurface_Polygon::Closed(const Standard_Boolean flag) {
  ClosedPolygon = flag;
}
//======================================================================
inline Standard_Boolean IntCurveSurface_Polygon::Closed(void) const {
  return(Standard_False);    //-- Voir si le cas Closed est traitable
}
//======================================================================
inline Standard_Integer IntCurveSurface_Polygon::NbSegments(void) const {
  return(NbPntIn-1);
}
//======================================================================
inline const gp_Pnt& IntCurveSurface_Polygon::BeginOfSeg(const Standard_Integer Index) const {
  return ThePnts(Index);
}
//======================================================================
inline const gp_Pnt& IntCurveSurface_Polygon::EndOfSeg(const Standard_Integer TheIndex) const {
  return ThePnts(TheIndex+1);
}
//======================================================================
inline Standard_Real IntCurveSurface_Polygon::InfParameter() const {
  return(Binf);
}
//======================================================================
inline Standard_Real IntCurveSurface_Polygon::SupParameter() const {
  return(Bsup);
}
//======================================================================
