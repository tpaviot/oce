// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _AIS_AngleDimension_HeaderFile
#define _AIS_AngleDimension_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_AIS_AngleDimension_HeaderFile
#include <Handle_AIS_AngleDimension.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Dir_HeaderFile
#include <gp_Dir.hxx>
#endif
#ifndef _gp_Ax1_HeaderFile
#include <gp_Ax1.hxx>
#endif
#ifndef _TopoDS_Face_HeaderFile
#include <TopoDS_Face.hxx>
#endif
#ifndef _AIS_Relation_HeaderFile
#include <AIS_Relation.hxx>
#endif
#ifndef _Handle_Geom_Plane_HeaderFile
#include <Handle_Geom_Plane.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _DsgPrs_ArrowSide_HeaderFile
#include <DsgPrs_ArrowSide.hxx>
#endif
#ifndef _AIS_KindOfDimension_HeaderFile
#include <AIS_KindOfDimension.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_PrsMgr_PresentationManager3d_HeaderFile
#include <Handle_PrsMgr_PresentationManager3d.hxx>
#endif
#ifndef _Handle_Prs3d_Presentation_HeaderFile
#include <Handle_Prs3d_Presentation.hxx>
#endif
#ifndef _Handle_Prs3d_Projector_HeaderFile
#include <Handle_Prs3d_Projector.hxx>
#endif
#ifndef _Handle_Geom_Transformation_HeaderFile
#include <Handle_Geom_Transformation.hxx>
#endif
#ifndef _Handle_SelectMgr_Selection_HeaderFile
#include <Handle_SelectMgr_Selection.hxx>
#endif
#ifndef _Handle_Geom_Line_HeaderFile
#include <Handle_Geom_Line.hxx>
#endif
class TopoDS_Edge;
class Geom_Plane;
class TCollection_ExtendedString;
class gp_Pnt;
class TopoDS_Face;
class gp_Ax1;
class TopoDS_Shape;
class PrsMgr_PresentationManager3d;
class Prs3d_Presentation;
class Prs3d_Projector;
class Geom_Transformation;
class SelectMgr_Selection;
class Geom_Line;


//! A framework to define display of angles. <br>
//! These displays are particularly useful in viewing draft prisms. <br>
//! The angle displayed may define an intersection <br>
//! can be between two edges or two faces of a shape <br>
//! or a plane. The display consists of arrows and text. <br>
class AIS_AngleDimension : public AIS_Relation {

public:

  //!  Constructs the angle display object defined by the <br>
//! shapes aFShape, aSShape, the plane aPlane, the <br>
//! value aVal and the text aText. <br>
//! aFShape and aSShape are edges. <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Edge& aFirstEdge,const TopoDS_Edge& aSecondEdge,const Handle(Geom_Plane)& aPlane,const Standard_Real aVal,const TCollection_ExtendedString& aText);
  //! Constructs the angle display object defined by the <br>
//! shapes aFShape, aSShape, the plane aPlane, the <br>
//! value aVal, the text aText, the point aPosition, the <br>
//! type of arrow aSymbolPrs, and the arrow length anArrowSize. <br>
//! aFShape and aSShape are edges. <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Edge& aFirstEdge,const TopoDS_Edge& aSecondEdge,const Handle(Geom_Plane)& aPlane,const Standard_Real aVal,const TCollection_ExtendedString& aText,const gp_Pnt& aPosition,const DsgPrs_ArrowSide aSymbolPrs,const Standard_Real anArrowSize = 0.0);
  //!  Angle of cone <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Face& aCone,const Standard_Real aVal,const TCollection_ExtendedString& aText);
  //!  Angle of cone <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Face& aCone,const Standard_Real aVal,const TCollection_ExtendedString& aText,const gp_Pnt& aPosition,const DsgPrs_ArrowSide aSymbolPrs,const Standard_Real anArrowSize = 0.01);
  //!  TwoPlanarFaceAngle dimension <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Face& aFirstFace,const TopoDS_Face& aSecondFace,const gp_Ax1& anAxis,const Standard_Real aVal,const TCollection_ExtendedString& aText);
  //! TwoPlanarFacesAngle dimension  with   position <br>
//!           and text Face  can be Plane or Extrusion of line <br>
//!           or Offset of  those <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Face& aFirstFace,const TopoDS_Face& aSecondFace,const gp_Ax1& anAxis,const Standard_Real aVal,const TCollection_ExtendedString& aText,const gp_Pnt& aPosition,const DsgPrs_ArrowSide aSymbolPrs,const Standard_Real anArrowSize = 0.0);
  //!  Angle dimension between two curvilinear faces <br>
//!           Warning: <br>
//!           Requaired 0 <= aVal < PI, <br>
//!                     aVal must be defined exactly. <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Face& aFFace,const TopoDS_Face& aSFace,const Standard_Real aVal,const TCollection_ExtendedString& aText);
  //!  Angle dimension between two curvilinear faces <br>
//!           with position and text. Face can be Cone, Cylinder <br>
//!           Offset of Cone, Offset of Cylinder <br>
  Standard_EXPORT   AIS_AngleDimension(const TopoDS_Face& aFFace,const TopoDS_Face& aSFace,const Standard_Real aVal,const TCollection_ExtendedString& aText,const gp_Pnt& aPosition,const DsgPrs_ArrowSide aSymbolPrs,const Standard_Real anArrowSize = 0.001);
  
//! Returns the axis set by the SetAxis method, which <br>
//! serves to locate the angle between two faces. <br>
       const gp_Ax1& Axis() const;
  
//! Sets the axis, anAxis, which serves to locate the <br>
//! angle between two faces. <br>
        void SetAxis(const gp_Ax1& anAxis) ;
  
  Standard_EXPORT     void SetConeFace(const TopoDS_Face& aConeFace) ;
  
  Standard_EXPORT     void SetFirstShape(const TopoDS_Shape& aFShape) ;
  
  Standard_EXPORT     void SetSecondShape(const TopoDS_Shape& aSShape) ;
  //! Returns PLANEANGLE as the kind of dimension. <br>
      virtual  AIS_KindOfDimension KindOfDimension() const;
  //! Returns true if the angle dimension is movable. <br>
      virtual  Standard_Boolean IsMovable() const;
  //! Computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          This method should be used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
  Standard_EXPORT   virtual  void Compute(const Handle(Prs3d_Projector)& aProjector,const Handle(Geom_Transformation)& aTrsf,const Handle(Prs3d_Presentation)& aPresentation) ;




  DEFINE_STANDARD_RTTI(AIS_AngleDimension)

protected:




private: 

  
  Standard_EXPORT     void Compute(const Handle(PrsMgr_PresentationManager3d)& aPresentationManager,const Handle(Prs3d_Presentation)& aPresentation,const Standard_Integer aMode = 0) ;
  
  Standard_EXPORT     void Compute(const Handle(Prs3d_Projector)& aProjector,const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT   virtual  void ComputeSelection(const Handle(SelectMgr_Selection)& aSelection,const Standard_Integer aMode) ;
  
  Standard_EXPORT     void ComputeConeAngle(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeTwoFacesAngle(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeTwoPlanarFacesAngle(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeTwoCurvilinearFacesAngle(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeTwoEdgesAngle(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeTwoEdgesNullAngle(const Handle(Prs3d_Presentation)& aPresentation,const Handle(Geom_Line)& l1,const Handle(Geom_Line)& l2,const gp_Pnt& ptat11,const gp_Pnt& ptat12,const gp_Pnt& ptat21,const gp_Pnt& ptat22,const Standard_Boolean isInf1,const Standard_Boolean isInf2) ;
  
  Standard_EXPORT     void ComputeTwoEdgesNotNullAngle(const Handle(Prs3d_Presentation)& aPresentation,const Handle(Geom_Line)& l1,const Handle(Geom_Line)& l2,const gp_Pnt& ptat11,const gp_Pnt& ptat12,const gp_Pnt& ptat21,const gp_Pnt& ptat22,const Standard_Boolean isInf1,const Standard_Boolean isInf2) ;
  
  Standard_EXPORT     void Compute3DSelection(const Handle(SelectMgr_Selection)& aSelection) ;
  
  Standard_EXPORT     void Compute2DSelection(const Handle(SelectMgr_Selection)& aSelection) ;
  
  Standard_EXPORT     void ComputeNull2DSelection(const Handle(SelectMgr_Selection)& aSelection,const Standard_Real distFS) ;
  
  Standard_EXPORT     void ComputeConeAngleSelection(const Handle(SelectMgr_Selection)& aSelection) ;

Standard_Integer myNbShape;
gp_Pnt myCenter;
gp_Pnt myFAttach;
gp_Pnt mySAttach;
gp_Dir myFDir;
gp_Dir mySDir;
gp_Ax1 myAxis;
TopoDS_Face myCone;


};


#include <AIS_AngleDimension.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
