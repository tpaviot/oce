// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepGProp_VinertGK_HeaderFile
#define _BRepGProp_VinertGK_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _GProp_GProps_HeaderFile
#include <GProp_GProps.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
class TopoDS_Edge;
class BRepGProp_Face;
class BRepGProp_Domain;
class BRepGProp_UFunctionOfVinertGK;
class BRepGProp_TFunctionOfVinertGK;
class gp_Pnt;
class gp_Pln;



class BRepGProp_VinertGK  : public GProp_GProps {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   BRepGProp_VinertGK();
  
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,const gp_Pnt& thePoint,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pnt& thePoint,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,const gp_Pln& thePlane,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  
  Standard_EXPORT   BRepGProp_VinertGK(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pln& thePlane,const gp_Pnt& theLocation,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False);
  
        void SetLocation(const gp_Pnt& theLocation) ;
  
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,const gp_Pnt& thePoint,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pnt& thePoint,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,const gp_Pln& thePlane,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  
  Standard_EXPORT     Standard_Real Perform(BRepGProp_Face& theSurface,BRepGProp_Domain& theDomain,const gp_Pln& thePlane,const Standard_Real theTolerance = 0.001,const Standard_Boolean theCGFlag = Standard_False,const Standard_Boolean theIFlag = Standard_False) ;
  
        Standard_Real GetErrorReached() const;
  
        Standard_Real GetAbsolutError() const;





protected:





private:

  
  Standard_EXPORT     Standard_Real PrivatePerform(BRepGProp_Face& theSurface,const Standard_Address thePtrDomain,const Standard_Boolean IsByPoint,const Standard_Address theCoeffs,const Standard_Real theTolerance,const Standard_Boolean theCGFlag,const Standard_Boolean theIFlag) ;


Standard_Real myErrorReached;
Standard_Real myAbsolutError;


};

#define Arc TopoDS_Edge
#define Arc_hxx <TopoDS_Edge.hxx>
#define Face BRepGProp_Face
#define Face_hxx <BRepGProp_Face.hxx>
#define Domain BRepGProp_Domain
#define Domain_hxx <BRepGProp_Domain.hxx>
#define GProp_UFunction BRepGProp_UFunctionOfVinertGK
#define GProp_UFunction_hxx <BRepGProp_UFunctionOfVinertGK.hxx>
#define GProp_TFunction BRepGProp_TFunctionOfVinertGK
#define GProp_TFunction_hxx <BRepGProp_TFunctionOfVinertGK.hxx>
#define GProp_VGPropsGK BRepGProp_VinertGK
#define GProp_VGPropsGK_hxx <BRepGProp_VinertGK.hxx>

#include <GProp_VGPropsGK.lxx>

#undef Arc
#undef Arc_hxx
#undef Face
#undef Face_hxx
#undef Domain
#undef Domain_hxx
#undef GProp_UFunction
#undef GProp_UFunction_hxx
#undef GProp_TFunction
#undef GProp_TFunction_hxx
#undef GProp_VGPropsGK
#undef GProp_VGPropsGK_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
