// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BlendFunc_CSCircular_HeaderFile
#define _BlendFunc_CSCircular_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Adaptor3d_HSurface_HeaderFile
#include <Handle_Adaptor3d_HSurface.hxx>
#endif
#ifndef _Handle_Adaptor3d_HCurve_HeaderFile
#include <Handle_Adaptor3d_HCurve.hxx>
#endif
#ifndef _Handle_Law_Function_HeaderFile
#include <Handle_Law_Function.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Vec_HeaderFile
#include <gp_Vec.hxx>
#endif
#ifndef _gp_Vec2d_HeaderFile
#include <gp_Vec2d.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _BlendFunc_SectionShape_HeaderFile
#include <BlendFunc_SectionShape.hxx>
#endif
#ifndef _Convert_ParameterisationType_HeaderFile
#include <Convert_ParameterisationType.hxx>
#endif
#ifndef _Blend_CSFunction_HeaderFile
#include <Blend_CSFunction.hxx>
#endif
#ifndef _GeomAbs_Shape_HeaderFile
#include <GeomAbs_Shape.hxx>
#endif
class Adaptor3d_HSurface;
class Adaptor3d_HCurve;
class Law_Function;
class math_Vector;
class math_Matrix;
class gp_Pnt;
class gp_Pnt2d;
class gp_Vec;
class gp_Vec2d;
class gp_Circ;
class Blend_Point;
class TColgp_Array1OfPnt;
class TColgp_Array1OfVec;
class TColgp_Array1OfPnt2d;
class TColgp_Array1OfVec2d;
class TColStd_Array1OfReal;
class TColStd_Array1OfInteger;



class BlendFunc_CSCircular  : public Blend_CSFunction {
public:

  DEFINE_STANDARD_ALLOC

  //! Creates a function for a circular blending between <br>
//!          a curve  <C> and a surface  <S>.  The direction of <br>
//!          the planes are given by <CGuide>.  The position of <br>
//!          the plane is  determined on  the  curve <C>.   <L> <br>
//!          defines  the change of  parameter between  <C> and <br>
//!          <CGuide>.  So, the planes are defined as described <br>
//!          below : <br>
//!          t is the current parameter on the guide line. <br>
//!          Pguide = C(L(t)); Nguide = CGuide'(t)/||CGuide'(t)|| <br>
  Standard_EXPORT   BlendFunc_CSCircular(const Handle(Adaptor3d_HSurface)& S,const Handle(Adaptor3d_HCurve)& C,const Handle(Adaptor3d_HCurve)& CGuide,const Handle(Law_Function)& L);
  
  Standard_EXPORT   virtual  Standard_Integer NbVariables() const;
  //! returns the number of equations of the function (3). <br>
  Standard_EXPORT     Standard_Integer NbEquations() const;
  //! computes the values <F> of the Functions for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
  Standard_EXPORT     Standard_Boolean Value(const math_Vector& X,math_Vector& F) ;
  //! returns the values <D> of the derivatives for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
  Standard_EXPORT     Standard_Boolean Derivatives(const math_Vector& X,math_Matrix& D) ;
  //! returns the values <F> of the functions and the derivatives <br>
//!          <D> for the variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
  Standard_EXPORT     Standard_Boolean Values(const math_Vector& X,math_Vector& F,math_Matrix& D) ;
  
  Standard_EXPORT     void Set(const Standard_Real Param) ;
  
  Standard_EXPORT     void Set(const Standard_Real First,const Standard_Real Last) ;
  
  Standard_EXPORT     void GetTolerance(math_Vector& Tolerance,const Standard_Real Tol) const;
  
  Standard_EXPORT     void GetBounds(math_Vector& InfBound,math_Vector& SupBound) const;
  
  Standard_EXPORT     Standard_Boolean IsSolution(const math_Vector& Sol,const Standard_Real Tol) ;
  
  Standard_EXPORT    const gp_Pnt& PointOnS() const;
  
  Standard_EXPORT    const gp_Pnt& PointOnC() const;
  //! Returns U,V coordinates of the point on the surface. <br>
  Standard_EXPORT    const gp_Pnt2d& Pnt2d() const;
  //! Returns parameter of the point on the curve. <br>
  Standard_EXPORT     Standard_Real ParameterOnC() const;
  
  Standard_EXPORT     Standard_Boolean IsTangencyPoint() const;
  
  Standard_EXPORT    const gp_Vec& TangentOnS() const;
  
  Standard_EXPORT    const gp_Vec2d& Tangent2d() const;
  
  Standard_EXPORT    const gp_Vec& TangentOnC() const;
  //! Returns the tangent vector at the section, <br>
//!          at the beginning and the end of the section, and <br>
//!          returns the normal (of the surface) at <br>
//!          these points. <br>
  Standard_EXPORT     void Tangent(const Standard_Real U,const Standard_Real V,gp_Vec& TgS,gp_Vec& NormS) const;
  
  Standard_EXPORT     void Set(const Standard_Real Radius,const Standard_Integer Choix) ;
  //! Sets  the  type  of   section generation   for the <br>
//!          approximations. <br>
  Standard_EXPORT     void Set(const BlendFunc_SectionShape TypeSection) ;
  
  Standard_EXPORT     void Section(const Standard_Real Param,const Standard_Real U,const Standard_Real V,const Standard_Real W,Standard_Real& Pdeb,Standard_Real& Pfin,gp_Circ& C) ;
  //! Used for the first and last section <br>
//!          The method returns Standard_True if the derivatives <br>
//!          are computed, otherwise it returns Standard_False. <br>
  Standard_EXPORT   virtual  Standard_Boolean Section(const Blend_Point& P,TColgp_Array1OfPnt& Poles,TColgp_Array1OfVec& DPoles,TColgp_Array1OfVec& D2Poles,TColgp_Array1OfPnt2d& Poles2d,TColgp_Array1OfVec2d& DPoles2d,TColgp_Array1OfVec2d& D2Poles2d,TColStd_Array1OfReal& Weigths,TColStd_Array1OfReal& DWeigths,TColStd_Array1OfReal& D2Weigths) ;
  
  Standard_EXPORT     Standard_Boolean GetSection(const Standard_Real Param,const Standard_Real U,const Standard_Real V,const Standard_Real W,TColgp_Array1OfPnt& tabP,TColgp_Array1OfVec& tabV) ;
  //! Returns  if the section is rationnal <br>
  Standard_EXPORT     Standard_Boolean IsRational() const;
  //!  Returns the length of the maximum section <br>
  Standard_EXPORT     Standard_Real GetSectionSize() const;
  //! Compute the minimal value of weight for each poles <br>
//!          of all sections. <br>
  Standard_EXPORT     void GetMinimalWeight(TColStd_Array1OfReal& Weigths) const;
  //! Returns  the number  of  intervals for  continuity <br>
//!          <S>. May be one if Continuity(me) >= <S> <br>
  Standard_EXPORT     Standard_Integer NbIntervals(const GeomAbs_Shape S) const;
  //! Stores in <T> the  parameters bounding the intervals <br>
//!          of continuity <S>. <br>
//! <br>
//!          The array must provide  enough room to  accomodate <br>
//!          for the parameters. i.e. T.Length() > NbIntervals() <br>
//!    raises <br>
//!    	OutOfRange from Standard <br>
  Standard_EXPORT     void Intervals(TColStd_Array1OfReal& T,const GeomAbs_Shape S) const;
  
  Standard_EXPORT     void GetShape(Standard_Integer& NbPoles,Standard_Integer& NbKnots,Standard_Integer& Degree,Standard_Integer& NbPoles2d) ;
  //! Returns the tolerance to reach in approximation <br>
//!          to respecte <br>
//!          BoundTol error at the Boundary <br>
//!          AngleTol tangent error at the Boundary <br>
//!          SurfTol error inside the surface. <br>
  Standard_EXPORT     void GetTolerance(const Standard_Real BoundTol,const Standard_Real SurfTol,const Standard_Real AngleTol,math_Vector& Tol3d,math_Vector& Tol1D) const;
  
  Standard_EXPORT     void Knots(TColStd_Array1OfReal& TKnots) ;
  
  Standard_EXPORT     void Mults(TColStd_Array1OfInteger& TMults) ;
  //! Used for the first and last section <br>
  Standard_EXPORT     Standard_Boolean Section(const Blend_Point& P,TColgp_Array1OfPnt& Poles,TColgp_Array1OfVec& DPoles,TColgp_Array1OfPnt2d& Poles2d,TColgp_Array1OfVec2d& DPoles2d,TColStd_Array1OfReal& Weigths,TColStd_Array1OfReal& DWeigths) ;
  
  Standard_EXPORT     void Section(const Blend_Point& P,TColgp_Array1OfPnt& Poles,TColgp_Array1OfPnt2d& Poles2d,TColStd_Array1OfReal& Weigths) ;
  
  Standard_EXPORT     void Resolution(const Standard_Integer IC2d,const Standard_Real Tol,Standard_Real& TolU,Standard_Real& TolV) const;





protected:





private:



Handle_Adaptor3d_HSurface surf;
Handle_Adaptor3d_HCurve curv;
Handle_Adaptor3d_HCurve guide;
Handle_Law_Function law;
gp_Pnt pts;
gp_Pnt ptc;
gp_Pnt2d pt2d;
Standard_Real prmc;
Standard_Real dprmc;
Standard_Boolean istangent;
gp_Vec tgs;
gp_Vec2d tg2d;
gp_Vec tgc;
Standard_Real ray;
Standard_Integer choix;
gp_Vec d1gui;
gp_Vec d2gui;
gp_Vec nplan;
Standard_Real normtg;
Standard_Real maxang;
Standard_Real minang;
BlendFunc_SectionShape mySShape;
Convert_ParameterisationType myTConv;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
