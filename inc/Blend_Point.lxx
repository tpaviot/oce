// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_DomainError.hxx>
#include <gp_Vec2d.hxx>

inline const gp_Pnt& Blend_Point::PointOnS1 () const
{
  return pt1;
}

inline const gp_Pnt& Blend_Point::PointOnS2 () const
{
  return pt2;
}

inline Standard_Real Blend_Point::Parameter () const
{
  return prm;
}

inline void Blend_Point::ParametersOnS1 (Standard_Real& U1,
					 Standard_Real& V1) const
{
  if (!hass1) {Standard_DomainError::Raise();}
  U1 = u1;
  V1 = v1;
}

inline void Blend_Point::ParametersOnS2 (Standard_Real& U2,
					 Standard_Real& V2) const
{
  if (!hass2) {Standard_DomainError::Raise();}
  U2 = u2;
  V2 = v2;
}

inline Standard_Boolean Blend_Point::IsTangencyPoint () const
{
  return istgt;
}


inline const gp_Vec& Blend_Point::TangentOnS1 () const
{
  if (istgt) {Standard_DomainError::Raise();}
  return tg1;
}

inline const gp_Vec& Blend_Point::TangentOnS2 () const
{
  if (istgt) {Standard_DomainError::Raise();}
  return tg2;
}

inline gp_Vec2d Blend_Point::Tangent2dOnS1 () const
{
  if (istgt || !hass1) {Standard_DomainError::Raise();}
  return gp_Vec2d(utg12d,vtg12d);
}

inline gp_Vec2d Blend_Point::Tangent2dOnS2 () const
{
  if (istgt || !hass2) {Standard_DomainError::Raise();}
  return gp_Vec2d(utg22d,vtg22d);
}

inline const gp_Pnt& Blend_Point::PointOnS () const
{
  return pt1;
}

inline const gp_Pnt& Blend_Point::PointOnC () const
{
  return pt2;
}

inline void Blend_Point::ParametersOnS (Standard_Real& U1,
					Standard_Real& V1) const
{
  if (!hass1) {Standard_DomainError::Raise();}
  U1 = u1;
  V1 = v1;
}

inline Standard_Real Blend_Point::ParameterOnC () const
{
  if (!hasc2) {Standard_DomainError::Raise();}
  return pc2;
}

inline const gp_Vec& Blend_Point::TangentOnS () const
{
  if (istgt || !hass1) {Standard_DomainError::Raise();}
  return tg1;
}

inline const gp_Vec& Blend_Point::TangentOnC () const
{
  if (istgt) {Standard_DomainError::Raise();}
  return tg2;
}

inline gp_Vec2d Blend_Point::Tangent2d () const
{
  if (istgt || !hass1) {Standard_DomainError::Raise();}
  return gp_Vec2d(utg12d,vtg12d);
}


inline const gp_Pnt& Blend_Point::PointOnC1 () const
{
  return pt1;
}

inline const gp_Pnt& Blend_Point::PointOnC2 () const
{
  return pt2;
}

inline Standard_Real Blend_Point::ParameterOnC1 () const
{
  if (!hasc1) {Standard_DomainError::Raise();}
  return pc1;
}

inline Standard_Real Blend_Point::ParameterOnC2 () const
{
  if (!hasc2) {Standard_DomainError::Raise();}
  return pc2;
}

inline const gp_Vec& Blend_Point::TangentOnC1 () const
{
  if (istgt || !hass1) {Standard_DomainError::Raise();}
  return tg1;
}

inline const gp_Vec& Blend_Point::TangentOnC2 () const
{
  if (istgt) {Standard_DomainError::Raise();}
  return tg2;
}
