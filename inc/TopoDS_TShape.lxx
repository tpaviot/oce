// Created on: 1991-03-27
// Created by: Remi LEQUETTE
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <TopAbs.hxx>
#include <TopoDS_Shape.hxx>
#include <TopoDS_ListIteratorOfListOfShape.hxx>

// The Convex method can conflict with Convex defined as an integer
// in X.h
#ifdef Convex
#undef Convex
#endif

// Defined mask values
#define TopoDS_TShape_Flags_Free       (1<<0)
#define TopoDS_TShape_Flags_Modified   (1<<1)
#define TopoDS_TShape_Flags_Checked    (1<<2)
#define TopoDS_TShape_Flags_Orientable (1<<3)
#define TopoDS_TShape_Flags_Closed     (1<<4)
#define TopoDS_TShape_Flags_Infinite   (1<<5)
#define TopoDS_TShape_Flags_Convex     (1<<6)
#define TopoDS_TShape_Flags_Locked     (1<<7)


//=======================================================================
//function : TopoDS_TShape
//purpose  : Constructor, Empty TShape
//=======================================================================

inline TopoDS_TShape::TopoDS_TShape()
 : myFlags(TopoDS_TShape_Flags_Free |
           TopoDS_TShape_Flags_Modified |
           TopoDS_TShape_Flags_Orientable)
{
}

//=======================================================================
//function : Free
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Free() const
{
  return ((myFlags & TopoDS_TShape_Flags_Free) != 0);
}

//=======================================================================
//function : Free
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Free(const Standard_Boolean F)
{
  if (F) myFlags |=  TopoDS_TShape_Flags_Free;
  else   myFlags &= ~TopoDS_TShape_Flags_Free;
}

//=======================================================================
//function : Locked
//purpose  : 
//=======================================================================
inline Standard_Boolean TopoDS_TShape::Locked() const
{
  return ((myFlags & TopoDS_TShape_Flags_Locked) != 0);
}

//=======================================================================
//function : Locked
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Locked(const Standard_Boolean F)
{
  if (F) myFlags |=  TopoDS_TShape_Flags_Locked;
  else   myFlags &= ~TopoDS_TShape_Flags_Locked;
}

//=======================================================================
//function : Modified
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Modified() const
{
  return ((myFlags & TopoDS_TShape_Flags_Modified) != 0);
}

//=======================================================================
//function : Modified
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Modified(const Standard_Boolean M)
{
  if (M)
  {
    myFlags |= TopoDS_TShape_Flags_Modified;
    // When a TShape is modified it is also unchecked
    myFlags &= ~TopoDS_TShape_Flags_Checked;
  }
  else myFlags &= ~TopoDS_TShape_Flags_Modified;
}

//=======================================================================
//function : Checked
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Checked() const
{
  return ((myFlags & TopoDS_TShape_Flags_Checked) != 0);
}

//=======================================================================
//function : Checked
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Checked(const Standard_Boolean M)
{
  if (M) myFlags |=  TopoDS_TShape_Flags_Checked;
  else   myFlags &= ~TopoDS_TShape_Flags_Checked;
}

//=======================================================================
//function : Orientable
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Orientable() const
{
  return ((myFlags & TopoDS_TShape_Flags_Orientable) != 0);
}

//=======================================================================
//function : Orientable
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Orientable(const Standard_Boolean M)
{
  if (M) myFlags |=  TopoDS_TShape_Flags_Orientable;
  else   myFlags &= ~TopoDS_TShape_Flags_Orientable;
}

//=======================================================================
//function : Closed
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Closed() const
{
  return ((myFlags & TopoDS_TShape_Flags_Closed) != 0);
}

//=======================================================================
//function : Closed
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Closed(const Standard_Boolean M)
{
  if (M) myFlags |=  TopoDS_TShape_Flags_Closed;
  else   myFlags &= ~TopoDS_TShape_Flags_Closed;
}

//=======================================================================
//function : Infinite
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Infinite() const
{
  return ((myFlags & TopoDS_TShape_Flags_Infinite) != 0);
}

//=======================================================================
//function : Infinite
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Infinite(const Standard_Boolean M)
{
  if (M) myFlags |=  TopoDS_TShape_Flags_Infinite;
  else   myFlags &= ~TopoDS_TShape_Flags_Infinite;
}

//=======================================================================
//function : Convex
//purpose  : 
//=======================================================================

inline Standard_Boolean TopoDS_TShape::Convex() const
{
  return ((myFlags & TopoDS_TShape_Flags_Convex) != 0);
}

//=======================================================================
//function : Convex
//purpose  : 
//=======================================================================

inline void TopoDS_TShape::Convex(const Standard_Boolean M)
{
  if (M) myFlags |=  TopoDS_TShape_Flags_Convex;
  else   myFlags &= ~TopoDS_TShape_Flags_Convex;
}

//=======================================================================
//function : Shapes
//purpose  : 
//=======================================================================

inline const TopoDS_ListOfShape& TopoDS_TShape::Shapes() const
{
  return myShapes;
}

//=======================================================================
//function : ChangeShapes
//purpose  : 
//=======================================================================

inline TopoDS_ListOfShape& TopoDS_TShape::ChangeShapes()
{
  return myShapes;
}
