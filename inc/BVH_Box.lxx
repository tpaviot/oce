// Created on: 2013-12-20
// Created by: Denis BOGOLEPOV
// Copyright (c) 2013-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_ShortReal.hxx>

// =======================================================================
// function : Clear
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_Box<T, N>::Clear()
{
  myIsInited = Standard_False;
}

// =======================================================================
// function : Clear
// purpose  :
// =======================================================================
template<class T, int N>
Standard_Boolean BVH_Box<T, N>::IsValid() const
{
  return myIsInited;
}

// =======================================================================
// function : Add
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_Box<T, N>::Add (const BVH_VecNt& thePoint)
{
  if (!myIsInited)
  {
    myMinPoint = thePoint;
    myMaxPoint = thePoint;

    myIsInited = Standard_True;
  }
  else
  {
    myMinPoint = myMinPoint.cwiseMin (thePoint);
    myMaxPoint = myMaxPoint.cwiseMax (thePoint);
  }
}

// =======================================================================
// function : Combine
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_Box<T, N>::Combine (const BVH_Box& theBox)
{
  if (theBox.myIsInited)
  {
    if (!myIsInited)
    {
      myMinPoint = theBox.myMinPoint;
      myMaxPoint = theBox.myMaxPoint;

      myIsInited = Standard_True;
    }
    else
    {
      BVH::BoxMinMax<T, N>::CwiseMin (myMinPoint, theBox.myMinPoint);
      BVH::BoxMinMax<T, N>::CwiseMax (myMaxPoint, theBox.myMaxPoint);
    }
  }
}

// =======================================================================
// function : Area
// purpose  :
// =======================================================================
template<class T, int N>
T BVH_Box<T, N>::Area() const
{
  return !myIsInited ? static_cast<T> (0.0) :
    BVH::SurfaceCalculator<T, N>::Area (myMaxPoint - myMinPoint);
}

// =======================================================================
// function : CornerMin
// purpose  :
// =======================================================================
template<class T, int N>
const typename BVH_Box<T, N>::BVH_VecNt& BVH_Box<T, N>::CornerMin() const
{
  return myMinPoint;
}

// =======================================================================
// function : CornerMax
// purpose  :
// =======================================================================
template<class T, int N>
const typename BVH_Box<T, N>::BVH_VecNt& BVH_Box<T, N>::CornerMax() const
{
  return myMaxPoint;
}

// =======================================================================
// function : CornerMin
// purpose  :
// =======================================================================
template<class T, int N>
typename BVH_Box<T, N>::BVH_VecNt& BVH_Box<T, N>::CornerMin()
{
  return myMinPoint;
}

// =======================================================================
// function : CornerMax
// purpose  :
// =======================================================================
template<class T, int N>
typename BVH_Box<T, N>::BVH_VecNt& BVH_Box<T, N>::CornerMax()
{
  return myMaxPoint;
}

// =======================================================================
// function : Size
// purpose  :
// =======================================================================
template<class T, int N>
typename BVH_Box<T, N>::BVH_VecNt BVH_Box<T, N>::Size() const
{
  return myMaxPoint - myMinPoint;
}

// =======================================================================
// function : Center
// purpose  :
// =======================================================================
template<class T, int N>
typename BVH_Box<T, N>::BVH_VecNt BVH_Box<T, N>::Center() const
{
  return (myMinPoint + myMaxPoint) * static_cast<T> (0.5);
}

// =======================================================================
// function : Center
// purpose  :
// =======================================================================
template<class T, int N>
T BVH_Box<T, N>::Center (const Standard_Integer theAxis) const
{
  return BVH::CenterAxis<T, N>::Center (*this, theAxis);
}
