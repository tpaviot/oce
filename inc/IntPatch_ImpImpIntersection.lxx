// Created on: 1992-05-07
// Created by: Jacques GOUSSARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <StdFail_NotDone.hxx>
#include <Standard_DomainError.hxx>
#include <IntPatch_Line.hxx>

inline Standard_Boolean IntPatch_ImpImpIntersection::IsDone () const
{
  return done;
}

inline Standard_Boolean IntPatch_ImpImpIntersection::IsEmpty () const
{
  if (!done) {StdFail_NotDone::Raise();}
  return empt;
}

inline Standard_Boolean IntPatch_ImpImpIntersection::TangentFaces () const
{
  if (!done) {StdFail_NotDone::Raise();}
  return tgte;
}

inline Standard_Boolean IntPatch_ImpImpIntersection::OppositeFaces () const
{
  if (!done) {StdFail_NotDone::Raise();}
  if (!tgte) {Standard_DomainError::Raise();}
  return oppo;
}

inline Standard_Integer IntPatch_ImpImpIntersection::NbPnts () const
{
  if (!done) {StdFail_NotDone::Raise();}
  return spnt.Length();
}

inline const IntPatch_Point& IntPatch_ImpImpIntersection::Point (const Standard_Integer Index) const
{
  if (!done) {StdFail_NotDone::Raise();}
  return spnt(Index);
}

inline Standard_Integer IntPatch_ImpImpIntersection::NbLines () const
{
  if (!done) {StdFail_NotDone::Raise();}
  return slin.Length();
}

inline const Handle(IntPatch_Line)& IntPatch_ImpImpIntersection::Line (const Standard_Integer Index) const
{
  if (!done) {StdFail_NotDone::Raise();}
  return slin(Index);
}
