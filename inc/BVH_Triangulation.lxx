// Created on: 2013-12-20
// Created by: Denis BOGOLEPOV
// Copyright (c) 2013-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

// =======================================================================
// function : BVH_Triangulation
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Triangulation<T, N>::BVH_Triangulation()
{
  //
}

// =======================================================================
// function : ~BVH_Triangulation
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Triangulation<T, N>::~BVH_Triangulation()
{
  //
}

// =======================================================================
// function : Size
// purpose  :
// =======================================================================
template<class T, int N>
Standard_Integer BVH_Triangulation<T, N>::Size() const
{
  return BVH::Array<Standard_Integer, 4>::Size (Elements);
}

// =======================================================================
// function : Box
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Box<T, N> BVH_Triangulation<T, N>::Box (const Standard_Integer theIndex) const
{
  const BVH_Vec4i& anIndex = BVH::Array<Standard_Integer, 4>::Value (Elements, theIndex);

  const BVH_VecNt& aPoint0 = BVH::Array<T, N>::Value (Vertices, anIndex.x());
  const BVH_VecNt& aPoint1 = BVH::Array<T, N>::Value (Vertices, anIndex.y());
  const BVH_VecNt& aPoint2 = BVH::Array<T, N>::Value (Vertices, anIndex.z());
  
  BVH_VecNt aMinPoint = aPoint0;
  BVH_VecNt aMaxPoint = aPoint0;

  BVH::BoxMinMax<T, N>::CwiseMin (aMinPoint, aPoint1);
  BVH::BoxMinMax<T, N>::CwiseMin (aMinPoint, aPoint2);
  BVH::BoxMinMax<T, N>::CwiseMax (aMaxPoint, aPoint1);
  BVH::BoxMinMax<T, N>::CwiseMax (aMaxPoint, aPoint2);

  return BVH_Box<T, N> (aMinPoint, aMaxPoint);
}

// =======================================================================
// function : Center
// purpose  :
// =======================================================================
template<class T, int N>
T BVH_Triangulation<T, N>::Center (const Standard_Integer theIndex,
                                   const Standard_Integer theAxis) const
{
  const BVH_Vec4i& anIndex = BVH::Array<Standard_Integer, 4>::Value (Elements, theIndex);

  const BVH_VecNt& aPoint0 = BVH::Array<T, N>::Value (Vertices, anIndex.x());
  const BVH_VecNt& aPoint1 = BVH::Array<T, N>::Value (Vertices, anIndex.y());
  const BVH_VecNt& aPoint2 = BVH::Array<T, N>::Value (Vertices, anIndex.z());

  return ( BVH::VecComp<T, N>::Get (aPoint0, theAxis) +
           BVH::VecComp<T, N>::Get (aPoint1, theAxis) +
           BVH::VecComp<T, N>::Get (aPoint2, theAxis) ) * static_cast<T> (1.0 / 3.0);
}

// =======================================================================
// function : Swap
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_Triangulation<T, N>::Swap (const Standard_Integer theIndex1,
                                    const Standard_Integer theIndex2)
{
  BVH_Vec4i& anIndices1 = BVH::Array<Standard_Integer, 4>::ChangeValue (Elements, theIndex1);
  BVH_Vec4i& anIndices2 = BVH::Array<Standard_Integer, 4>::ChangeValue (Elements, theIndex2);

  std::swap (anIndices1, anIndices2);
}
