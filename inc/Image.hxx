// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Image_HeaderFile
#define _Image_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Image_Image_HeaderFile
#include <Handle_Image_Image.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Quantity_PlaneAngle_HeaderFile
#include <Quantity_PlaneAngle.hxx>
#endif
class Image_Image;
class Image_PixelInterpolation;
class gp_GTrsf2d;
class gp_Trsf;
class Image_Image;
class Image_PixelInterpolation;
class Image_AveragePixelInterpolation;
class Image_BalancedPixelInterpolation;
class Image_PlanarPixelInterpolation;
class Image_BilinearPixelInterpolation;
class Image_GPixelField;
class Image_GImage;
class Image_PixelRow;
class Image_PixelField;
class Image_DColorImage;
class Image_DIndexedImage;
class Image_PseudoColorImage;
class Image_ColorImage;
class Image_Convertor;
class Image_ColorPixelMapHasher;
class Image_ColorPixelDataMap;
class Image_IndexPixelMapHasher;
class Image_LookupTable;
class Image_PixelRowOfDColorImage;
class Image_PixelFieldOfDColorImage;
class Image_PixelRowOfDIndexedImage;
class Image_PixelFieldOfDIndexedImage;
class Image_DataMapNodeOfColorPixelDataMap;
class Image_DataMapIteratorOfColorPixelDataMap;
class Image_DataMapNodeOfLookupTable;
class Image_DataMapIteratorOfLookupTable;


//! The package Image provide PseudoColorImage and ColorImage <br>
//!		definition and a set of key functions from the fields <br>
//!		of image. <br>
class Image  {
public:

  DEFINE_STANDARD_ALLOC

  //! Zoom an Image with a specific PixelInterpolation method. <br>
  Standard_EXPORT   static  void Zoom(const Handle(Image_Image)& aImage,const Image_PixelInterpolation& aInterpolation,const Standard_Real aCoefX,const Standard_Real aCoefY) ;
  //! Zoom an Image with the default PixelInterpolation method. <br>
  Standard_EXPORT   static  void Zoom(const Handle(Image_Image)& aImage,const Standard_Real aCoefX,const Standard_Real aCoefY) ;
  //! Rotate an Image with a specific PixelInterpolation method. <br>
  Standard_EXPORT   static  void Rotate(const Handle(Image_Image)& aImage,const Image_PixelInterpolation& aInterpolation,const Quantity_PlaneAngle aAngle) ;
  //! Rotate an Image with the default PixelInterpolation method. <br>
  Standard_EXPORT   static  void Rotate(const Handle(Image_Image)& aImage,const Quantity_PlaneAngle aAngle) ;
  //! Translate an Image with a specific PixelInterpolation <br>
//!		method. <br>
  Standard_EXPORT   static  void Translate(const Handle(Image_Image)& aImage,const Image_PixelInterpolation& aInterpolation,const Standard_Real DX,const Standard_Real DY) ;
  //! Translate an Image with the default PixelInterpolation <br>
//!		method. <br>
  Standard_EXPORT   static  void Translate(const Handle(Image_Image)& aImage,const Standard_Real DX,const Standard_Real DY) ;
  //! General transformation of an Image with a specific <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
  Standard_EXPORT   static  void Affine(const Handle(Image_Image)& aImage,const Image_PixelInterpolation& aInterpolation,const gp_GTrsf2d& Trsf) ;
  //! General transformation of an Image with the default <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
  Standard_EXPORT   static  void Affine(const Handle(Image_Image)& aImage,const gp_GTrsf2d& Trsf) ;
  //! General transformation of an Image with a specific <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
  Standard_EXPORT   static  void Affine(const Handle(Image_Image)& aImage,const Image_PixelInterpolation& aInterpolation,const gp_Trsf& Trsf) ;
  //! General transformation of an Image with the default <br>
//!		PixelInterpolation method. <br>
//!	Warning: <br>
//!  		Raises an exception if the matrix of the transformation <br>
//!  		is not inversible. <br>
  Standard_EXPORT   static  void Affine(const Handle(Image_Image)& aImage,const gp_Trsf& Trsf) ;





protected:





private:




friend class Image_Image;
friend class Image_PixelInterpolation;
friend class Image_AveragePixelInterpolation;
friend class Image_BalancedPixelInterpolation;
friend class Image_PlanarPixelInterpolation;
friend class Image_BilinearPixelInterpolation;
friend class Image_GPixelField;
friend class Image_GImage;
friend class Image_PixelRow;
friend class Image_PixelField;
friend class Image_DColorImage;
friend class Image_DIndexedImage;
friend class Image_PseudoColorImage;
friend class Image_ColorImage;
friend class Image_Convertor;
friend class Image_ColorPixelMapHasher;
friend class Image_ColorPixelDataMap;
friend class Image_IndexPixelMapHasher;
friend class Image_LookupTable;
friend class Image_PixelRowOfDColorImage;
friend class Image_PixelFieldOfDColorImage;
friend class Image_PixelRowOfDIndexedImage;
friend class Image_PixelFieldOfDIndexedImage;
friend class Image_DataMapNodeOfColorPixelDataMap;
friend class Image_DataMapIteratorOfColorPixelDataMap;
friend class Image_DataMapNodeOfLookupTable;
friend class Image_DataMapIteratorOfLookupTable;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
