// Created on: 1992-04-06
// Created by: Jacques GOUSSARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_DomainError.hxx>

#include <gp_Lin.hxx>
#include <gp_Circ.hxx>
#include <gp_Elips.hxx>
#include <gp_Parab.hxx>
#include <gp_Hypr.hxx>

#include <Precision.hxx>


inline void IntPatch_GLine::SetFirstPoint (const Standard_Integer IndFirst)
{
  fipt = Standard_True;
  indf = IndFirst;
}


inline void IntPatch_GLine::SetLastPoint (const Standard_Integer IndLast)
{
  lapt = Standard_True;
  indl = IndLast;
}


inline gp_Lin IntPatch_GLine::Line () const
{
  if (typ != IntPatch_Lin) {Standard_DomainError::Raise();}
  return gp_Lin(pos.Axis());
}


inline gp_Circ IntPatch_GLine::Circle () const
{
  if (typ != IntPatch_Circle) {Standard_DomainError::Raise();}
  return gp_Circ(pos,par1);
}


inline gp_Elips IntPatch_GLine::Ellipse () const
{
  if (typ != IntPatch_Ellipse) {Standard_DomainError::Raise();}
  return gp_Elips(pos,par1,par2);
}


inline gp_Parab IntPatch_GLine::Parabola () const
{
  if (typ != IntPatch_Parabola) {Standard_DomainError::Raise();}
  return gp_Parab(pos,par1);
}


inline gp_Hypr IntPatch_GLine::Hyperbola () const
{
  if (typ != IntPatch_Hyperbola) {Standard_DomainError::Raise();}
  return gp_Hypr(pos,par1,par2);
}


inline Standard_Boolean IntPatch_GLine::HasFirstPoint () const
{
  return fipt;
}


inline Standard_Boolean IntPatch_GLine::HasLastPoint () const
{
  return lapt;
}


inline const IntPatch_Point& IntPatch_GLine::FirstPoint () const
{
  if (!fipt) {Standard_DomainError::Raise();}
  return svtx(indf);
}


inline const IntPatch_Point& IntPatch_GLine::LastPoint () const
{
  if (!lapt) {Standard_DomainError::Raise();}
  return svtx(indl);
}


inline Standard_Integer IntPatch_GLine::NbVertex () const
{
  return svtx.Length();
}


inline const IntPatch_Point& IntPatch_GLine::Vertex (const Standard_Integer Index) const
{
  return svtx(Index);
}
