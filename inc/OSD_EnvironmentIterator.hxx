// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _OSD_EnvironmentIterator_HeaderFile
#define _OSD_EnvironmentIterator_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _OSD_Error_HeaderFile
#include <OSD_Error.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class OSD_OSDError;
class OSD_Environment;


//! This allows consultation of every environment variable. <br>
//!          There is no specific order of results. <br>
class OSD_EnvironmentIterator  {
public:

  DEFINE_STANDARD_ALLOC

  //! Instantiates Object as Iterator; <br>
  Standard_EXPORT   OSD_EnvironmentIterator();
  
  Standard_EXPORT     void Destroy() ;
~OSD_EnvironmentIterator()
{
  Destroy();
}
  //! Returns TRUE if there are other environment variables. <br>
  Standard_EXPORT     Standard_Boolean More() ;
  //! Sets the iterator to the next item. <br>
//!          Returns the item value corresponding to the current <br>
//!          position of the iterator. <br>
  Standard_EXPORT     void Next() ;
  //! Returns the next environment variable found. <br>
  Standard_EXPORT     OSD_Environment Values() ;
  //! Returns TRUE if an error occurs <br>
  Standard_EXPORT     Standard_Boolean Failed() const;
  //! Resets error counter to zero <br>
  Standard_EXPORT     void Reset() ;
  //! Raises OSD_Error <br>
  Standard_EXPORT     void Perror() ;
  //! Returns error number if 'Failed' is TRUE. <br>
  Standard_EXPORT     Standard_Integer Error() const;





protected:





private:



Standard_Address myEnv;
#ifdef WNT
Standard_CString myCount;
#else
Standard_Integer myCount;
#endif
OSD_Error myError;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
