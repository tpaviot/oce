// Created on: 2000-09-29
// Created by: data exchange team
// Copyright (c) 2000-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Interface_InterfaceModel.hxx>
#include <Interface_Graph.hxx>
#include <Interface_HGraph.hxx>
#include <Transfer_TransientProcess.hxx>
#include <Transfer_FinderProcess.hxx>
#include <XSControl_WorkSession.hxx>

//=======================================================================
//function : WS
//purpose  : 
//=======================================================================

inline const Handle(XSControl_WorkSession) &STEPConstruct_Tool::WS() const
{
  return myWS;
}

//=======================================================================
//function : Model
//purpose  : 
//=======================================================================

inline Handle(Interface_InterfaceModel) STEPConstruct_Tool::Model() const
{
  return myWS->Model();
}

//=======================================================================
//function : Graph
//purpose  : 
//=======================================================================

inline const Interface_Graph &STEPConstruct_Tool::Graph (const Standard_Boolean recompute) const
{
  // Note: myWS->Graph() recomputes graph each time!
  return recompute ? myWS->Graph() : myHGraph->Graph();
}

//=======================================================================
//function : TransientProcess
//purpose  : 
//=======================================================================

inline const Handle(Transfer_TransientProcess) &STEPConstruct_Tool::TransientProcess() const
{
  return myTransientProcess;
}

//=======================================================================
//function : FinderProcess
//purpose  : 
//=======================================================================

inline const Handle(Transfer_FinderProcess) &STEPConstruct_Tool::FinderProcess() const
{
  return myFinderProcess;
}
