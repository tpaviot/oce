// Created on: 2000-11-14
// Created by: Peter KURNEV
// Copyright (c) 2000-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : BOPTools_CArray1::BOPTools_CArray1
//purpose  : 
//=======================================================================
BOPTColStd_CArray1::BOPTColStd_CArray1  (const Standard_Integer aLength,
					 const Standard_Integer aBlockLength)
  :  
  myStart(NULL), 
  myLength(0), 
  myFactLength(0), 
  myBlockLength(aBlockLength),
  myIsAllocated(Standard_False)
{
  Resize(aLength);
}
//=======================================================================
//function : Resize
//purpose  : 
//=======================================================================
void BOPTColStd_CArray1::Resize(const Standard_Integer aNL) 
{
  Array1Item* p = NULL;
  if (aNL>0) {
    Destroy();
    
    p=new Array1Item[aNL];
    
    if (!p) {
      Standard_OutOfMemory::Raise
	("BOPTools_CArray1 : Allocation failed.");
    }

    else {
      myIsAllocated=Standard_True;
      myLength=aNL;
      myFactLength=myLength;
      myStart = (void*) p;
    }
  }
}
//=======================================================================
//function : Remove
//purpose  : 
//=======================================================================
void BOPTColStd_CArray1::Remove(const Standard_Integer anInd)
{
  if (!myIsAllocated)  {
    return;
  }
  
  if (IsInvalidIndex(anInd)) {
    Standard_OutOfMemory::Raise
      ("BOPTools_CArray1 : Attempt to remove inexisting Item.");
  }
  
  const Standard_Integer aNFL=myFactLength-1;
  Array1Item *p=NULL;
  p = new Array1Item[aNFL];
  
  if (!p) {
    Standard_OutOfMemory::Raise
      ("BOPTools_CArray1::Append: Allocation failed.");
    }
  
  Standard_Integer i, j, anIndx, iLength;
  
  iLength=myLength;
  
  anIndx=anInd-1;
  for (i=0, j=0; i<myLength; ++i) {
    if (i!=anIndx) {
      p[j]= ((Array1Item *)myStart)[i];
      j++;
    }
  }
  
  Destroy();
  
  myFactLength=aNFL;
  myLength=iLength-1;
  myIsAllocated=Standard_True;
  myStart = (void*) p;
}
//=======================================================================
//function : Append
//purpose  : 
//=======================================================================
  Standard_Integer BOPTColStd_CArray1::Append(const Array1Item& aV) 
{
  Standard_Integer i, aNL;

  aNL=myLength+1;
  if (aNL > myFactLength) {

    const Standard_Integer iLengthToAllocate=myLength+myBlockLength;
    
    Array1Item *p=NULL;
    p = new Array1Item[iLengthToAllocate];
  
    if (!p) {
      Standard_OutOfMemory::Raise
	("IntBOPTools_CArray1::Append: Allocation failed.");
    }
    
    for (i=0; i<myLength; i++) {
      p[i]=((Array1Item *)myStart)[i];
    }
    p[myLength]=aV;
    
    Destroy();

    
    myFactLength=iLengthToAllocate;
    myIsAllocated=Standard_True;
    myStart = (void*) p;
  }
  
  else {
    ((Array1Item *)myStart)[myLength]=aV; 
  }

  myLength=aNL;
  return myLength;
}
//=======================================================================
//function : IsInvalidIndex
//purpose  : 
//=======================================================================
Standard_Boolean BOPTColStd_CArray1::IsInvalidIndex 
  (const Standard_Integer anInd)const
{
  Standard_Boolean aFlag;
  Standard_Integer anIndx=anInd-1;
  aFlag=!(anIndx > -1 && anIndx < myLength);
  return aFlag;
}
//=======================================================================
//function : Destroy
//purpose  : 
//=======================================================================
void BOPTColStd_CArray1::Destroy() 
{
  if (myIsAllocated) {
    delete [] (Array1Item *)myStart;
    myIsAllocated=Standard_False;
    myFactLength=0;
    myLength=0;
    myStart=NULL;
  }
}

//=======================================================================
//function : Length
//purpose  : 
//=======================================================================
Standard_Integer BOPTColStd_CArray1::Length() const
{
  return myLength;
}
//=======================================================================
//function : Extent
//purpose  : 
//=======================================================================
Standard_Integer BOPTColStd_CArray1::Extent() const
{
  return myLength;
}
//=======================================================================
//function : FactLength
//purpose  : 
//=======================================================================
Standard_Integer BOPTColStd_CArray1::FactLength() const
{
  return myFactLength;
}
//=======================================================================
//function : BlockLength
//purpose  : 
//=======================================================================
  Standard_Integer BOPTColStd_CArray1::BlockLength() const
{
  return myBlockLength;
}
//=======================================================================
//function : SetBlockLength
//purpose  : 
//=======================================================================
void BOPTColStd_CArray1::SetBlockLength(const Standard_Integer aBL) 
{
  if (aBL > 0) {
    myBlockLength=aBL;
  }
}
//=======================================================================
//function : Value
//purpose  : 
//=======================================================================
const Array1Item& BOPTColStd_CArray1::Value
      (const Standard_Integer Index) const
{
  if (IsInvalidIndex(Index)) {
    Standard_OutOfRange::Raise("BOPTools_CArray1::Value");
  }
  return ((Array1Item *)myStart)[Index-1];
}
//=======================================================================
//function : ChangeValue
//purpose  : 
//=======================================================================
Array1Item& BOPTColStd_CArray1::ChangeValue
      (const Standard_Integer Index) 
{
  if (IsInvalidIndex(Index)) {
    Standard_OutOfRange::Raise("BOPTools_CArray1::ChangeValue");
  }
  return ((Array1Item *)myStart)[Index-1];
}
//modified by NIZNHY-PKV Wed Nov 09 10:03:01 2011f
//=======================================================================
//function : Purge
//purpose  : 
//=======================================================================
void BOPTColStd_CArray1::Purge() 
{
  if (!myIsAllocated) {
    return;
  }
  //
  if (myLength>0 && myLength<myFactLength) {
    Standard_Integer i, aLength;
    Array1Item *p = NULL;
    //
    p=new Array1Item[myLength];
    if (!p) {
      Standard_OutOfMemory::Raise
	("BOPTools_CArray1 : Allocation failed.");
    }
    //
    for (i=0; i<myLength; i++) {
      p[i]=((Array1Item *)myStart)[i];
    }
    //
    aLength=myLength;
    //
    Destroy();
    //
    myIsAllocated=Standard_True;
    myLength=aLength;
    myFactLength=myLength;
    myStart = (void*) p;
  }
}
//modified by NIZNHY-PKV Wed Nov 09 10:03:07 2011t
/*
//=======================================================================
//function : Dump
//purpose  : 
//=======================================================================
void BOPTColStd_CArray1::Dump() const
{
  printf("\n--  BOPTColStd_CArray1::Dump --\n");
  printf("myIsAllocated =%d\n", myIsAllocated);
  printf("myLength      =%d\n", myLength);
  printf("myFactLength  =%d\n", myFactLength);
  printf("myBlockLength =%d\n", myBlockLength);
}
*/
