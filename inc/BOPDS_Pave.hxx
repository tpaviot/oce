// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPDS_Pave_HeaderFile
#define _BOPDS_Pave_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif



//! The class BOPDS_Pave is to store <br>
//! information about vertex on an edge <br>
class BOPDS_Pave  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty contructor <br>
//! <br>
      BOPDS_Pave();
Standard_EXPORT virtual ~BOPDS_Pave();
  
//! Modifier <br>
//! Sets the index of vertex <theIndex> <br>
        void SetIndex(const Standard_Integer theIndex) ;
  
//! Selector <br>
//! Returns the index of vertex <br>
        Standard_Integer Index() const;
  
//! Modifier <br>
//! Sets the parameter of vertex <theParameter> <br>
        void SetParameter(const Standard_Real theParameter) ;
  
//! Selector <br>
//! Returns the parameter of vertex <br>
        Standard_Real Parameter() const;
  
//! Selector <br>
//! Returns the index of vertex <theIndex> <br>
//! Returns the parameter of vertex <theParameter> <br>
        void Contents(Standard_Integer& theIndex,Standard_Real& theParameter) const;
  
//! Query <br>
//! Returns true if thr parameter od this is less <br>
//!  than the parameter of  <theOther> <br>
        Standard_Boolean IsLess(const BOPDS_Pave& theOther) const;
      Standard_Boolean operator <(const BOPDS_Pave& theOther) const
{
  return IsLess(theOther);
}
  
//! Query <br>
//! Returns true if thr parameter od this is equal <br>
//!  to the parameter of  <theOther> <br>
        Standard_Boolean IsEqual(const BOPDS_Pave& theOther) const;
      Standard_Boolean operator ==(const BOPDS_Pave& theOther) const
{
  return IsEqual(theOther);
}
  
  Standard_EXPORT     void Dump() const;





protected:



Standard_Integer myIndex;
Standard_Real myParameter;


private:





};


#include <BOPDS_Pave.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
