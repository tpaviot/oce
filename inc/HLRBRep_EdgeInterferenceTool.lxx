// Created on: 1997-04-17
// Created by: Christophe MARION
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <HLRAlgo_Interference.hxx>

//=======================================================================
//function : InitVertices
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeInterferenceTool::InitVertices()
{ cur = 0; }

//=======================================================================
//function : MoreVertices
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRBRep_EdgeInterferenceTool::MoreVertices() const
{ return cur < 2; }

//=======================================================================
//function : NextVertex
//purpose  : 
//=======================================================================

inline void HLRBRep_EdgeInterferenceTool::NextVertex()
{ cur++; }

//=======================================================================
//function : CurrentVertex
//purpose  : 
//=======================================================================

inline const HLRAlgo_Intersection&
HLRBRep_EdgeInterferenceTool::CurrentVertex
  () const
{ return inter[cur]; }

//=======================================================================
//function : CurrentOrientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation
HLRBRep_EdgeInterferenceTool::CurrentOrientation
  () const
{
  if (cur == 0) return TopAbs_FORWARD;
  else          return TopAbs_REVERSED;
}

//=======================================================================
//function : CurrentParameter
//purpose  : 
//=======================================================================

inline Standard_Real
HLRBRep_EdgeInterferenceTool::CurrentParameter() const
{ return inter[cur].Parameter(); }

//=======================================================================
//function : IsPeriodic
//purpose  : 
//=======================================================================

inline Standard_Boolean 
HLRBRep_EdgeInterferenceTool::IsPeriodic() const
{ return Standard_False; }

//=======================================================================
//function : ParameterOfInterference
//purpose  : 
//=======================================================================

inline Standard_Real
HLRBRep_EdgeInterferenceTool::ParameterOfInterference
  (const HLRAlgo_Interference& I) const
{ return I.Intersection().Parameter(); }
