// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Interface_HGraph_HeaderFile
#define _Interface_HGraph_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Interface_HGraph_HeaderFile
#include <Handle_Interface_HGraph.hxx>
#endif

#ifndef _Interface_Graph_HeaderFile
#include <Interface_Graph.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_Interface_InterfaceModel_HeaderFile
#include <Handle_Interface_InterfaceModel.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Interface_Protocol_HeaderFile
#include <Handle_Interface_Protocol.hxx>
#endif
#ifndef _Handle_Interface_GTool_HeaderFile
#include <Handle_Interface_GTool.hxx>
#endif
class Standard_DomainError;
class Interface_Graph;
class Interface_InterfaceModel;
class Interface_GeneralLib;
class Interface_Protocol;
class Interface_GTool;


//! This class allows to store a redefinable Graph, via a Handle <br>
//!           (usefull for an Object which can work on several successive <br>
//!           Models, with the same general conditions) <br>
class Interface_HGraph : public MMgt_TShared {

public:

  //! Creates an HGraph directly from a Graph. <br>
//!           Remark that the starting Graph is duplicated <br>
  Standard_EXPORT   Interface_HGraph(const Interface_Graph& agraph);
  //! Creates an HGraph with a Graph created from <amodel> and <lib> <br>
  Standard_EXPORT   Interface_HGraph(const Handle(Interface_InterfaceModel)& amodel,const Interface_GeneralLib& lib,const Standard_Boolean theModeStats = Standard_True);
  //! Creates an HGraph with a graph itself created from <amodel> <br>
//!           and <protocol> <br>
  Standard_EXPORT   Interface_HGraph(const Handle(Interface_InterfaceModel)& amodel,const Handle(Interface_Protocol)& protocol,const Standard_Boolean theModeStats = Standard_True);
  //! Creates an HGraph with a graph itself created from <amodel> <br>
//!           and <protocol> <br>
  Standard_EXPORT   Interface_HGraph(const Handle(Interface_InterfaceModel)& amodel,const Handle(Interface_GTool)& gtool,const Standard_Boolean theModeStats = Standard_True);
  //! Same a above, but works with the GTool in the model <br>
  Standard_EXPORT   Interface_HGraph(const Handle(Interface_InterfaceModel)& amodel,const Standard_Boolean theModeStats = Standard_True);
  //! Returns the Graph contained in <me>, for Read Only Operations <br>
//!           Remark that it is returns as "const &" <br>
//!           Getting it in a new variable instead of a reference would be <br>
//!           a pitty, because all the graph's content would be duplicated <br>
  Standard_EXPORT    const Interface_Graph& Graph() const;
  //! Same as above, but for Read-Write Operations <br>
//!           Then, The Graph will be modified in the HGraph itself <br>
  Standard_EXPORT     Interface_Graph& CGraph() ;




  DEFINE_STANDARD_RTTI(Interface_HGraph)

protected:




private: 


Interface_Graph thegraph;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
