// Created on: 1998-01-28
// Created by: Laurent BUCHARD
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <IntCurvesFace_Intersector.hxx>


inline Standard_Integer IntCurvesFace_ShapeIntersector::NbPnt() const { 
  return(IndexPt.Length());
}

inline  Standard_Real IntCurvesFace_ShapeIntersector::UParameter(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->UParameter(IndexIntPnt(IndexPt(i))));
}

inline  Standard_Real IntCurvesFace_ShapeIntersector::VParameter(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->VParameter(IndexIntPnt(IndexPt(i))));
}

inline  Standard_Real IntCurvesFace_ShapeIntersector::WParameter(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->WParameter(IndexIntPnt(IndexPt(i))));
}

inline  const gp_Pnt& IntCurvesFace_ShapeIntersector::Pnt(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->Pnt(IndexIntPnt(IndexPt(i))));
}

inline  IntCurveSurface_TransitionOnCurve  IntCurvesFace_ShapeIntersector::Transition(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->Transition(IndexIntPnt(IndexPt(i))));
}

inline  TopAbs_State  IntCurvesFace_ShapeIntersector::State(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->State(IndexIntPnt(IndexPt(i))));
}


inline  const TopoDS_Face&  IntCurvesFace_ShapeIntersector::Face(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->Face());
}

inline Standard_Boolean IntCurvesFace_ShapeIntersector::IsDone() const {
  return(done);
}


