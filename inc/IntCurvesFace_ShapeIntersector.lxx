// Created on: 1998-01-28
// Created by: Laurent BUCHARD
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.




#include <IntCurvesFace_Intersector.hxx>


inline Standard_Integer IntCurvesFace_ShapeIntersector::NbPnt() const { 
  return(IndexPt.Length());
}

inline  Standard_Real IntCurvesFace_ShapeIntersector::UParameter(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->UParameter(IndexIntPnt(IndexPt(i))));
}

inline  Standard_Real IntCurvesFace_ShapeIntersector::VParameter(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->VParameter(IndexIntPnt(IndexPt(i))));
}

inline  Standard_Real IntCurvesFace_ShapeIntersector::WParameter(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->WParameter(IndexIntPnt(IndexPt(i))));
}

inline  const gp_Pnt& IntCurvesFace_ShapeIntersector::Pnt(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->Pnt(IndexIntPnt(IndexPt(i))));
}

inline  IntCurveSurface_TransitionOnCurve  IntCurvesFace_ShapeIntersector::Transition(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->Transition(IndexIntPnt(IndexPt(i))));
}

inline  TopAbs_State  IntCurvesFace_ShapeIntersector::State(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->State(IndexIntPnt(IndexPt(i))));
}


inline  const TopoDS_Face&  IntCurvesFace_ShapeIntersector::Face(const Standard_Integer i) const { 
  IntCurvesFace_Intersector *Ptr =
    (IntCurvesFace_Intersector *)(PtrIntersector(IndexFace(IndexPt(i))));
  return(Ptr->Face());
}

inline Standard_Boolean IntCurvesFace_ShapeIntersector::IsDone() const {
  return(done);
}


