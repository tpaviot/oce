// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepMesh_SelectorOfDataStructureOfDelaun_HeaderFile
#define _BRepMesh_SelectorOfDataStructureOfDelaun_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_BRepMesh_DataStructureOfDelaun_HeaderFile
#include <Handle_BRepMesh_DataStructureOfDelaun.hxx>
#endif
#ifndef _BRepMesh_MapOfInteger_HeaderFile
#include <BRepMesh_MapOfInteger.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class BRepMesh_DataStructureOfDelaun;
class BRepMesh_Vertex;
class BRepMesh_Edge;
class BRepMesh_Triangle;


//! Describes a selector and  an Iterator on a <br>
//!          selector of components of a Mesh. <br>
class BRepMesh_SelectorOfDataStructureOfDelaun  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  
  Standard_EXPORT   BRepMesh_SelectorOfDataStructureOfDelaun();
  
  Standard_EXPORT   BRepMesh_SelectorOfDataStructureOfDelaun(const Handle(BRepMesh_DataStructureOfDelaun)& theMesh);
  
  Standard_EXPORT     void Initialize(const Handle(BRepMesh_DataStructureOfDelaun)& theMesh) ;
  
  Standard_EXPORT     void NeighboursOf(const BRepMesh_Vertex& theNode) ;
  
  Standard_EXPORT     void NeighboursOfNode(const Standard_Integer indexNode) ;
  
  Standard_EXPORT     void NeighboursOf(const BRepMesh_Edge& theLink) ;
  
  Standard_EXPORT     void NeighboursOfLink(const Standard_Integer indexLink) ;
  
  Standard_EXPORT     void NeighboursOf(const BRepMesh_Triangle& theElem) ;
  //! All Neighbours  Of the Element. By <br>
//!          edge or by vertices. <br>
  Standard_EXPORT     void NeighboursOfElement(const Standard_Integer indexElem) ;
  //! Neighbours by edge Of the Element. <br>
  Standard_EXPORT     void NeighboursByEdgeOf(const BRepMesh_Triangle& theElem) ;
  //! Adds a level of Neighbours by edge <br>
//!          to the selector <theSelector>. <br>
  Standard_EXPORT     void NeighboursOf(const BRepMesh_SelectorOfDataStructureOfDelaun& theSelector) ;
  //! Adds a level of Neighbours by edge <br>
//!          to the selector <me>. <br>
  Standard_EXPORT     void AddNeighbours() ;
  
  Standard_EXPORT    const BRepMesh_MapOfInteger& Nodes() const;
  
  Standard_EXPORT    const BRepMesh_MapOfInteger& Links() const;
  
  Standard_EXPORT    const BRepMesh_MapOfInteger& Elements() const;
  //! Gives the  list  of links  incices <br>
//!          frontier  of  the  selector  <me>. <br>
  Standard_EXPORT    const BRepMesh_MapOfInteger& FrontierLinks() const;





protected:





private:



Handle_BRepMesh_DataStructureOfDelaun myMesh;
BRepMesh_MapOfInteger myNodes;
BRepMesh_MapOfInteger myLinks;
BRepMesh_MapOfInteger myElements;
BRepMesh_MapOfInteger myFrontier;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
