// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BooleanOperations_AncestorsAndSuccessors_HeaderFile
#define _BooleanOperations_AncestorsAndSuccessors_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _TopAbs_Orientation_HeaderFile
#include <TopAbs_Orientation.hxx>
#endif
class BooleanOperations_AncestorsSeqAndSuccessorsSeq;


//!   provides all the ancestors   and successors of a <br>
//!          given  shape. Exemple : for  an edge the ancestors <br>
//!          are the wires that hold it  and the successors are <br>
//!          its vertices. <br>
class BooleanOperations_AncestorsAndSuccessors  {
public:

  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }
  void operator delete (void *,void *)
  {

  }
  
  Standard_EXPORT   BooleanOperations_AncestorsAndSuccessors();
  //! allocates space and fills it with the data of AncSuccessors. <br>
  Standard_EXPORT   BooleanOperations_AncestorsAndSuccessors(const BooleanOperations_AncestorsSeqAndSuccessorsSeq& AncSuccessors,const Standard_Integer shift);
  
  Standard_EXPORT     void Destroy() ;
~BooleanOperations_AncestorsAndSuccessors()
{
  Destroy();
}
  //! to display the fields. <br>
  Standard_EXPORT     void Dump() const;
  
        Standard_Integer GetAncestor(const Standard_Integer AncestorIndex) const;
  
        void SetAncestor(const Standard_Integer AncestorIndex,const Standard_Integer AncestorNumber) ;
  
        void GetAncestors(Standard_Address& theArrayOfAncestors,Standard_Integer& AncestorsNumber) const;
  
        Standard_Integer GetSuccessor(const Standard_Integer SuccessorIndex) const;
  
        void SetSuccessor(const Standard_Integer SuccessorIndex,const Standard_Integer SuccessorNumber) ;
  
        void GetSuccessors(Standard_Address& theArrayOfSuccessors,Standard_Integer& SuccessorsNumber) const;
  
        TopAbs_Orientation GetOrientation(const Standard_Integer OrientationIndex) const;
  
        void SetOrientation(const Standard_Integer OrientationIndex,const TopAbs_Orientation anOrientation) ;
  
        void GetOrientations(Standard_Address& theArrayOfOrientations,Standard_Integer& OrientationsNumber) const;
  
        Standard_Integer NumberOfAncestors() const;
  
        Standard_Integer NumberOfSuccessors() const;





protected:





private:



Standard_Address myAncestors;
Standard_Address mySuccessors;
Standard_Address myOrientations;
Standard_Integer myAncestorsSize;
Standard_Integer mySuccessorsSize;


};


#include <BooleanOperations_AncestorsAndSuccessors.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
