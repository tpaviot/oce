// Created by: M. MERCIEN
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//-----------------------------------------------------------------------------
// inline methods for Convert from Quantity
//-----------------------------------------------------------------------------
#include <Quantity_Array1OfCoefficient.hxx>


#ifndef __Quantity_API
# if defined(WNT) && !defined(HAVE_NO_DLL)
#  ifdef __Quantity_DLL
#   define __Quantity_API __declspec( dllexport )
#  else
#   define __Quantity_API __declspec( dllimport )
#  endif  // __Quantity_DLL
# else
#   define __Quantity_API
# endif  // WNT
#endif  // __Quantity_API 


extern __Quantity_API Quantity_Array1OfCoefficient ConvertTable;


//----------------------------------------------------------------------------
//  SetQuantity
//----------------------------------------------------------------------------
inline void Quantity_Convert::SetQuantity (const Quantity_PhysicalQuantity aQuantity,
                                const Quantity_Coefficient aCoef) {
// ...Update du coefficient de conversion
   if (aQuantity > 0 && aQuantity <= 68) ConvertTable(aQuantity) = aCoef;
}

//----------------------------------------------------------------------------
//  ConvertUserToSI
//----------------------------------------------------------------------------
inline Quantity_Coefficient Quantity_Convert::ConvertUserToSI 
        (const Quantity_PhysicalQuantity aQuantity ,
         const Standard_Real aVal) {
// ...Conversion de la valeur aVal, du Systeme Utilisateur en Systeme International
   if (aQuantity > 0 && aQuantity <= 68)   
      return (aVal*ConvertTable(aQuantity));
   else
     return aVal;
}

//----------------------------------------------------------------------------
//  ConvertSIToUser
//----------------------------------------------------------------------------
inline Quantity_Coefficient Quantity_Convert::ConvertSIToUser 
        (const Quantity_PhysicalQuantity aQuantity ,
         const Standard_Real aVal) {
// ...Conversion de la valeur aVal, du Systeme International au Systeme Utilisateur
   if (aQuantity > 0 && aQuantity <= 68)   
      return (aVal/ConvertTable(aQuantity));
   else
     return aVal;
}
