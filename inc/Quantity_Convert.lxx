// Created by: M. MERCIEN
// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//-----------------------------------------------------------------------------
// inline methods for Convert from Quantity
//-----------------------------------------------------------------------------
#include <Quantity_Array1OfCoefficient.hxx>


#ifndef __Quantity_API
# if defined(WNT) && !defined(HAVE_NO_DLL)
#  ifdef __Quantity_DLL
#   define __Quantity_API __declspec( dllexport )
#  else
#   define __Quantity_API __declspec( dllimport )
#  endif  // __Quantity_DLL
# else
#   define __Quantity_API
# endif  // WNT
#endif  // __Quantity_API 


extern __Quantity_API Quantity_Array1OfCoefficient ConvertTable;


//----------------------------------------------------------------------------
//  SetQuantity
//----------------------------------------------------------------------------
inline void Quantity_Convert::SetQuantity (const Quantity_PhysicalQuantity aQuantity,
                                const Quantity_Coefficient aCoef) {
// ...Update du coefficient de conversion
   if (aQuantity > 0 && aQuantity <= 68) ConvertTable(aQuantity) = aCoef;
}

//----------------------------------------------------------------------------
//  ConvertUserToSI
//----------------------------------------------------------------------------
inline Quantity_Coefficient Quantity_Convert::ConvertUserToSI 
        (const Quantity_PhysicalQuantity aQuantity ,
         const Standard_Real aVal) {
// ...Conversion de la valeur aVal, du Systeme Utilisateur en Systeme International
   if (aQuantity > 0 && aQuantity <= 68)   
      return (aVal*ConvertTable(aQuantity));
   else
     return aVal;
}

//----------------------------------------------------------------------------
//  ConvertSIToUser
//----------------------------------------------------------------------------
inline Quantity_Coefficient Quantity_Convert::ConvertSIToUser 
        (const Quantity_PhysicalQuantity aQuantity ,
         const Standard_Real aVal) {
// ...Conversion de la valeur aVal, du Systeme International au Systeme Utilisateur
   if (aQuantity > 0 && aQuantity <= 68)   
      return (aVal/ConvertTable(aQuantity));
   else
     return aVal;
}
