// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Units_UtsSequence_HeaderFile
#define _Units_UtsSequence_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TCollection_BaseSequence_HeaderFile
#include <TCollection_BaseSequence.hxx>
#endif
#ifndef _Handle_Units_Unit_HeaderFile
#include <Handle_Units_Unit.hxx>
#endif
#ifndef _Handle_Units_SequenceNodeOfUtsSequence_HeaderFile
#include <Handle_Units_SequenceNodeOfUtsSequence.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class Standard_NoSuchObject;
class Standard_OutOfRange;
class Units_Unit;
class Units_SequenceNodeOfUtsSequence;



class Units_UtsSequence  : public TCollection_BaseSequence {
public:

  DEFINE_STANDARD_ALLOC

  
      Units_UtsSequence();
  
  Standard_EXPORT     void Clear() ;
~Units_UtsSequence()
{
  Clear();
}
  
  Standard_EXPORT    const Units_UtsSequence& Assign(const Units_UtsSequence& Other) ;
   const Units_UtsSequence& operator =(const Units_UtsSequence& Other) 
{
  return Assign(Other);
}
  
  Standard_EXPORT     void Append(const Handle(Units_Unit)& T) ;
  
        void Append(Units_UtsSequence& S) ;
  
  Standard_EXPORT     void Prepend(const Handle(Units_Unit)& T) ;
  
        void Prepend(Units_UtsSequence& S) ;
  
        void InsertBefore(const Standard_Integer Index,const Handle(Units_Unit)& T) ;
  
        void InsertBefore(const Standard_Integer Index,Units_UtsSequence& S) ;
  
  Standard_EXPORT     void InsertAfter(const Standard_Integer Index,const Handle(Units_Unit)& T) ;
  
        void InsertAfter(const Standard_Integer Index,Units_UtsSequence& S) ;
  
  Standard_EXPORT    const Handle_Units_Unit& First() const;
  
  Standard_EXPORT    const Handle_Units_Unit& Last() const;
  
        void Split(const Standard_Integer Index,Units_UtsSequence& Sub) ;
  
  Standard_EXPORT    const Handle_Units_Unit& Value(const Standard_Integer Index) const;
   const Handle_Units_Unit& operator()(const Standard_Integer Index) const
{
  return Value(Index);
}
  
  Standard_EXPORT     void SetValue(const Standard_Integer Index,const Handle(Units_Unit)& I) ;
  
  Standard_EXPORT     Handle_Units_Unit& ChangeValue(const Standard_Integer Index) ;
    Handle_Units_Unit& operator()(const Standard_Integer Index) 
{
  return ChangeValue(Index);
}
  
  Standard_EXPORT     void Remove(const Standard_Integer Index) ;
  
  Standard_EXPORT     void Remove(const Standard_Integer FromIndex,const Standard_Integer ToIndex) ;





protected:





private:

  
  Standard_EXPORT   Units_UtsSequence(const Units_UtsSequence& Other);




};

#define SeqItem Handle_Units_Unit
#define SeqItem_hxx <Units_Unit.hxx>
#define TCollection_SequenceNode Units_SequenceNodeOfUtsSequence
#define TCollection_SequenceNode_hxx <Units_SequenceNodeOfUtsSequence.hxx>
#define Handle_TCollection_SequenceNode Handle_Units_SequenceNodeOfUtsSequence
#define TCollection_SequenceNode_Type_() Units_SequenceNodeOfUtsSequence_Type_()
#define TCollection_Sequence Units_UtsSequence
#define TCollection_Sequence_hxx <Units_UtsSequence.hxx>

#include <TCollection_Sequence.lxx>

#undef SeqItem
#undef SeqItem_hxx
#undef TCollection_SequenceNode
#undef TCollection_SequenceNode_hxx
#undef Handle_TCollection_SequenceNode
#undef TCollection_SequenceNode_Type_
#undef TCollection_Sequence
#undef TCollection_Sequence_hxx


// other Inline functions and methods (like "C++: function call" methods)


#endif
