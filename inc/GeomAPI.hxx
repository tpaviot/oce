// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GeomAPI_HeaderFile
#define _GeomAPI_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Geom2d_Curve_HeaderFile
#include <Handle_Geom2d_Curve.hxx>
#endif
#ifndef _Handle_Geom_Curve_HeaderFile
#include <Handle_Geom_Curve.hxx>
#endif
class Geom2d_Curve;
class Geom_Curve;
class gp_Pln;
class GeomAPI_ProjectPointOnCurve;
class GeomAPI_ProjectPointOnSurf;
class GeomAPI_ExtremaCurveCurve;
class GeomAPI_ExtremaCurveSurface;
class GeomAPI_ExtremaSurfaceSurface;
class GeomAPI_PointsToBSpline;
class GeomAPI_PointsToBSplineSurface;
class GeomAPI_Interpolate;
class GeomAPI_IntSS;
class GeomAPI_IntCS;


//! The   GeomAPI   package  provides  an  Application <br>
//!          Programming Interface for the Geometry. <br>
//! <br>
//!          The API is a set of  classes and methods aiming to <br>
//!          provide : <br>
//! <br>
//!          * High level and simple calls  for the most common <br>
//!          operations. <br>
//! <br>
//!          *    Keeping   an   access  on    the    low-level <br>
//!          implementation of high-level calls. <br>
//! <br>
//! <br>
//! 	    The API  provides classes to  call the algorithmes <br>
//! 	    of the Geometry <br>
//! <br>
//! 	    * The  constructors  of the classes  provides  the <br>
//! 	    different constructions methods. <br>
//! <br>
//! 	    * The  class keeps as fields the   different tools <br>
//! 	    used by the algorithmes <br>
//! <br>
//! 	    *   The class  provides  a  casting  method to get <br>
//! 	    automatically the  result  with  a   function-like <br>
//! 	    call. <br>
//! <br>
//! 	    For example to evaluate the distance <D> between a <br>
//! 	    point <P> and a curve <C>, one can writes : <br>
//! <br>
//! 	        D = GeomAPI_ProjectPointOnCurve(P,C); <br>
//! <br>
//! 	    or <br>
//! <br>
//! 	        GeomAPI_ProjectPointOnCurve PonC(P,C); <br>
//! 	        D = PonC.LowerDistance(); <br>
//! <br>
class GeomAPI  {
public:

  DEFINE_STANDARD_ALLOC

  //! To intersect a curve and a surface. <br>//! This function builds (in the <br>
//! parametric space of the plane P) a 2D curve equivalent to the 3D curve <br>
//! C. The 3D curve C is considered to be located in the plane P. <br>
//! Warning <br>
//! The 3D curve C must be of one of the following types: <br>
//! -      a line <br>
//! -      a circle <br>
//! -      an ellipse <br>
//! -      a hyperbola <br>
//! -      a parabola <br>
//! -      a Bezier curve <br>
//! -      a BSpline curve <br>
//! Exceptions Standard_NoSuchObject if C is not a defined type curve. <br>
  Standard_EXPORT   static  Handle_Geom2d_Curve To2d(const Handle(Geom_Curve)& C,const gp_Pln& P) ;
  //! Builds a 3D curve equivalent to the 2D curve C <br>
//! described in the parametric space defined by the local <br>
//! coordinate system of plane P. <br>
//! The resulting 3D curve is of the same nature as that of the curve C. <br>
  Standard_EXPORT   static  Handle_Geom_Curve To3d(const Handle(Geom2d_Curve)& C,const gp_Pln& P) ;





protected:





private:




friend class GeomAPI_ProjectPointOnCurve;
friend class GeomAPI_ProjectPointOnSurf;
friend class GeomAPI_ExtremaCurveCurve;
friend class GeomAPI_ExtremaCurveSurface;
friend class GeomAPI_ExtremaSurfaceSurface;
friend class GeomAPI_PointsToBSpline;
friend class GeomAPI_PointsToBSplineSurface;
friend class GeomAPI_Interpolate;
friend class GeomAPI_IntSS;
friend class GeomAPI_IntCS;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
