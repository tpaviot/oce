// Created on: 1993-03-11
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : TCollection_HArray1
//purpose  : 
//=======================================================================

inline TCollection_HArray1::TCollection_HArray1(const Standard_Integer First,
                                                const Standard_Integer Last) :
       myArray(First,Last)
{
}

//=======================================================================
//function : Length
//purpose  : 
//=======================================================================

inline Standard_Integer TCollection_HArray1::Length () const 
{
   return myArray.Length();
}

//=======================================================================
//function : TCollection_HArray1
//purpose  : 
//=======================================================================
inline TCollection_HArray1::TCollection_HArray1(const Standard_Integer First,
                                                const Standard_Integer Last,
                                                const ItemHArray1& V) :
       myArray(First,Last)
{
  myArray.Init(V);
}


//=======================================================================
//function : Init
//purpose  : 
//=======================================================================

inline void TCollection_HArray1::Init(const ItemHArray1& V)
{
  myArray.Init(V);
}

//=======================================================================
//function : Lower
//purpose  : 
//=======================================================================

inline Standard_Integer TCollection_HArray1::Lower () const 
{
   return myArray.Lower();
}

//=======================================================================
//function : Upper
//purpose  : 
//=======================================================================

inline Standard_Integer TCollection_HArray1::Upper () const 
{
   return myArray.Upper();
}

//=======================================================================
//function : SetValue
//purpose  : 
//=======================================================================

inline void TCollection_HArray1::SetValue (const Standard_Integer Index,
					   const ItemHArray1& Value)
{
   myArray.SetValue(Index,Value);
}

//=======================================================================
//function : Array1
//purpose  : 
//=======================================================================

inline const TheArray1& TCollection_HArray1::Array1() const
{
  return myArray;
}


//=======================================================================
//function : ChangeArray1
//purpose  : 
//=======================================================================

inline TheArray1& TCollection_HArray1::ChangeArray1() 
{
  return myArray;
}

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

inline const ItemHArray1& TCollection_HArray1::Value(const Standard_Integer Index) const
{
  return myArray(Index);
}

//=======================================================================
//function : ChangeValue
//purpose  : 
//=======================================================================

inline ItemHArray1& TCollection_HArray1::ChangeValue(const Standard_Integer Index)
{
  return myArray(Index);
}


