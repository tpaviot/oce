// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <StdFail_NotDone.hxx>
#include <StdFail_UndefinedDerivative.hxx>
#include <Standard_DomainError.hxx>


inline Standard_Boolean IntImp_Int2S::IsDone()const { return done;}

inline Standard_Boolean IntImp_Int2S::IsEmpty() const
{ 
  if (!done) StdFail_NotDone::Raise(" IntImp_Int2S::IsEmpty() ");
  return empty;
}

inline const IntSurf_PntOn2S& IntImp_Int2S::Point() const
{ 
  if (!done) StdFail_NotDone::Raise(" IntImp_Int2S::Point() ");
  if (empty) Standard_DomainError::Raise(" IntImp_Int2S::Point() ");
  return pint;
}

inline Standard_Boolean IntImp_Int2S::IsTangent () const {

  if (!done) StdFail_NotDone::Raise(" IntImp_Int2S::IsTangent () ");
  if (empty) Standard_DomainError::Raise(" IntImp_Int2S::IsTangent () ");
  return tangent;
}

inline const gp_Dir& IntImp_Int2S::Direction () const {

  if (!done) StdFail_NotDone::Raise(" IntImp_Int2S::Direction () ");
  if (empty) Standard_DomainError::Raise(" IntImp_Int2S::Direction () ");
  if (tangent) StdFail_UndefinedDerivative::Raise
    (" IntImp_Int2S::Direction () ");
  return d3d;
}

inline const gp_Dir2d& IntImp_Int2S::DirectionOnS1 () const {

  if (!done) StdFail_NotDone::Raise(" IntImp_Int2S::DirectionOnS1 () ");
  if (empty) Standard_DomainError::Raise(" IntImp_Int2S::DirectionOnS1 () ");
  if (tangent) StdFail_UndefinedDerivative::Raise
    (" IntImp_Int2S::DirectionOnS1 () ");
  return d2d1;
}

inline const gp_Dir2d& IntImp_Int2S::DirectionOnS2 () const {

  if (!done) StdFail_NotDone::Raise(" IntImp_Int2S::DirectionOnS2 () ");
  if (empty) Standard_DomainError::Raise(" IntImp_Int2S::DirectionOnS2 () ");
  if (tangent) StdFail_UndefinedDerivative::Raise
    (" IntImp_Int2S::DirectionOnS2 () ");
  return d2d2;
}


inline IntImp_TheFunction& IntImp_Int2S::Function()  {
  return myZerParFunc;
} 

