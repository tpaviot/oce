// Created on: 1992-08-25
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#define EMskRg1Line    0x01u
#define EMskRgNLine    0x02u
#define EMskOutLine    0x04u
#define EMskIntLine    0x08u

//=======================================================================
//function : P1
//purpose  : 
//=======================================================================

inline const gp_Pnt & HLRBRep_BiPoint::P1 () const
{ return myP1; }

//=======================================================================
//function : P2
//purpose  : 
//=======================================================================

inline const gp_Pnt & HLRBRep_BiPoint::P2 () const
{ return myP2; }

//=======================================================================
//function : Shape
//purpose  : 
//=======================================================================

inline const TopoDS_Shape & HLRBRep_BiPoint::Shape () const
{ return myShape; }

//=======================================================================
//function : Shape
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::Shape (const TopoDS_Shape& S)
{ myShape = S; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::Rg1Line () const
{ return (myFlags & EMskRg1Line) != 0; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::Rg1Line (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskRg1Line;
  else   myFlags &= ~EMskRg1Line;
}

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::RgNLine () const
{ return (myFlags & EMskRgNLine) != 0; }

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::RgNLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskRgNLine;
  else   myFlags &= ~EMskRgNLine;
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::OutLine () const
{ return (myFlags & EMskOutLine) != 0; }

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::OutLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskOutLine;
  else   myFlags &= ~EMskOutLine;
}

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::IntLine () const
{ return (myFlags & EMskIntLine) != 0; }

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::IntLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskIntLine;
  else   myFlags &= ~EMskIntLine;
}
