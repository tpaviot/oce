// Created on: 1992-08-25
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#define EMskRg1Line  ((Standard_Boolean)1)
#define EMskRgNLine  ((Standard_Boolean)2)
#define EMskOutLine  ((Standard_Boolean)4)
#define EMskIntLine  ((Standard_Boolean)8)

//=======================================================================
//function : P1
//purpose  : 
//=======================================================================

inline const gp_Pnt & HLRBRep_BiPoint::P1 () const
{ return myP1; }

//=======================================================================
//function : P2
//purpose  : 
//=======================================================================

inline const gp_Pnt & HLRBRep_BiPoint::P2 () const
{ return myP2; }

//=======================================================================
//function : Shape
//purpose  : 
//=======================================================================

inline const TopoDS_Shape & HLRBRep_BiPoint::Shape () const
{ return myShape; }

//=======================================================================
//function : Shape
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::Shape (const TopoDS_Shape& S)
{ myShape = S; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::Rg1Line () const
{ return (myFlags & EMskRg1Line) != 0; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::Rg1Line (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskRg1Line;
  else   myFlags &= ~EMskRg1Line;
}

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::RgNLine () const
{ return (myFlags & EMskRgNLine) != 0; }

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::RgNLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskRgNLine;
  else   myFlags &= ~EMskRgNLine;
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::OutLine () const
{ return (myFlags & EMskOutLine) != 0; }

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::OutLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskOutLine;
  else   myFlags &= ~EMskOutLine;
}

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_BiPoint::IntLine () const
{ return (myFlags & EMskIntLine) != 0; }

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline void HLRBRep_BiPoint::IntLine (const Standard_Boolean B)
{
  if (B) myFlags |=  EMskIntLine;
  else   myFlags &= ~EMskIntLine;
}
