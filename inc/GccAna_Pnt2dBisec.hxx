// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GccAna_Pnt2dBisec_HeaderFile
#define _GccAna_Pnt2dBisec_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Lin2d_HeaderFile
#include <gp_Lin2d.hxx>
#endif
class StdFail_NotDone;
class gp_Pnt2d;
class gp_Lin2d;


//! This class implements the algorithms used to <br>
//!          create the bisecting line between two 2d points <br>
//! Describes functions for building a bisecting line between two 2D points. <br>
//! The bisecting line between two points is the bisector of <br>
//! the segment which joins the two points, if these are not coincident. <br>
//! The algorithm does not find a solution if the two points are coincident. <br>
//! A Pnt2dBisec object provides a framework for: <br>
//! -   defining the construction of the bisecting line, <br>
//! -   implementing the construction algorithm, and consulting the result. <br>
class GccAna_Pnt2dBisec  {
public:

  DEFINE_STANDARD_ALLOC

  //! Constructs a bisecting line between the points Point1 and Point2. <br>
  Standard_EXPORT   GccAna_Pnt2dBisec(const gp_Pnt2d& Point1,const gp_Pnt2d& Point2);
  //! Returns true (this construction algorithm never fails). <br>
  Standard_EXPORT     Standard_Boolean IsDone() const;
  //! Returns true if this algorithm has a solution, i.e. if the <br>
//! two points are not coincident. <br>
  Standard_EXPORT     Standard_Boolean HasSolution() const;
  //! Returns a line, representing the solution computed by this algorithm. <br>
  Standard_EXPORT     gp_Lin2d ThisSolution() const;





protected:





private:



Standard_Boolean WellDone;
Standard_Boolean HasSol;
gp_Lin2d linsol;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
