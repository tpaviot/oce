// Created on: 1993-05-06
// Created by: Jacques GOUSSARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


inline const Bnd_Box& IntPatch_PolyhedronTool::Bounding (const IntPatch_Polyhedron& thePolyh)
{
  return thePolyh.Bounding();
}

inline const Handle(Bnd_HArray1OfBox)& IntPatch_PolyhedronTool::ComponentsBounding (const IntPatch_Polyhedron& thePolyh)
{
  return thePolyh.ComponentsBounding();
}

inline Standard_Real IntPatch_PolyhedronTool::DeflectionOverEstimation (const IntPatch_Polyhedron& thePolyh)
{
  return thePolyh.DeflectionOverEstimation();
}

inline Standard_Integer IntPatch_PolyhedronTool::NbTriangles (const IntPatch_Polyhedron& thePolyh)
{
  return thePolyh.NbTriangles();
}

inline void IntPatch_PolyhedronTool::Triangle (const IntPatch_Polyhedron& thePolyh,
                                               const Standard_Integer Index,
                                               Standard_Integer& P1,
                                               Standard_Integer& P2,
                                               Standard_Integer& P3)
{
  thePolyh.Triangle(Index, P1,P2,P3);
}

inline const gp_Pnt& IntPatch_PolyhedronTool::Point (const IntPatch_Polyhedron& thePolyh,
                                                     const Standard_Integer Index)
{
  return thePolyh.Point(Index);
}

inline Standard_Integer IntPatch_PolyhedronTool::TriConnex 
  (const IntPatch_Polyhedron& thePolyh,
   const Standard_Integer Triang,
   const Standard_Integer Pivot,
   const Standard_Integer Pedge,
   Standard_Integer& TriCon,
   Standard_Integer& OtherP)
{
  return thePolyh.TriConnex(Triang, Pivot, Pedge, TriCon, OtherP);
}
