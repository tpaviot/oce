// Created on: 1993-04-29
// Created by: Bruno DUMORTIER
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <gp_Pnt.hxx>
#include <Geom_Curve.hxx>
#include <Standard_NullObject.hxx>
#include <Standard_ConstructionError.hxx>


//=======================================================================
//function : GeomAdaptor_Curve
//purpose  : 
//=======================================================================

inline GeomAdaptor_Curve::GeomAdaptor_Curve()
 : myTypeCurve(GeomAbs_OtherCurve),
   myFirst(0.),
   myLast(0.)
{
}

//=======================================================================
//function : GeomAdaptor_Curve
//purpose  : 
//=======================================================================

inline GeomAdaptor_Curve::GeomAdaptor_Curve(const Handle(Geom_Curve)& C)
{
  Load(C);
}

//=======================================================================
//function : GeomAdaptor_Curve
//purpose  : 
//=======================================================================

inline GeomAdaptor_Curve::GeomAdaptor_Curve(const Handle(Geom_Curve)& C,
                                            const Standard_Real UFirst,
                                            const Standard_Real ULast)
{
  Load(C,UFirst,ULast);
}

//=======================================================================
//function : Load
//purpose  : 
//=======================================================================

inline void GeomAdaptor_Curve::Load(const Handle(Geom_Curve)& C)
{
  if ( C.IsNull()) Standard_NullObject::Raise();
  
  load(C,C->FirstParameter(),C->LastParameter());
}

//=======================================================================
//function : Load
//purpose  : 
//=======================================================================

inline void GeomAdaptor_Curve::Load(const Handle(Geom_Curve)& C,
                                    const Standard_Real UFirst,
                                    const Standard_Real ULast)
{
  if ( C.IsNull()) Standard_NullObject::Raise();
  
  if ( UFirst > ULast) Standard_ConstructionError::Raise();
  
  load(C,UFirst,ULast);
}


//=======================================================================
//function : FirstParameter
//purpose  : 
//=======================================================================

inline Standard_Real GeomAdaptor_Curve::FirstParameter() const
{
  return myFirst;
}

//=======================================================================
//function : LastParameter
//purpose  : 
//=======================================================================

inline Standard_Real GeomAdaptor_Curve::LastParameter() const
{
  return myLast;
}

//=======================================================================
//function : Curve
//purpose  : 
//=======================================================================

inline const Handle(Geom_Curve)& GeomAdaptor_Curve::Curve() const 
{ 
  return myCurve;
}

//=======================================================================
//function : GetType
//purpose  : 
//=======================================================================

inline GeomAbs_CurveType GeomAdaptor_Curve::GetType() const
{
  return myTypeCurve;
}
