// Created on: 1992-09-28
// Created by: Mireille MERCIEN
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Standard_NoSuchObject.hxx>
#include <Standard_OutOfRange.hxx>
#include <Standard_NotImplemented.hxx>
#include <Standard_ProgramError.hxx>

// ----------------------------------------------------------------------
// ----------------------------------------------------------------------

// -----------
// constructor :
// -----------
PCollection_SeqExplorer::PCollection_SeqExplorer
                                 (const Handle(PCollection_HSequence)& S )
{
   if (S->Length() != 0) {
      CurrentItem  = S->GetFirst();
      CurrentIndex = 1;
      TheSequence  = S;
   } 
   else {
      CurrentItem.Nullify();
      CurrentIndex = 0;
      TheSequence.Nullify();
   }    
}

// -----------
// Value :
// -----------
Item PCollection_SeqExplorer::Value(const Standard_Integer Index)
{
   if (Index <= 0 || Index > TheSequence->Length()) 
                                 Standard_NoSuchObject::Raise();
   if (Index < CurrentIndex) {
     CurrentIndex = 1;
     CurrentItem  = TheSequence->GetFirst();
   }
   while ( CurrentIndex != Index ) {
	++CurrentIndex;
	CurrentItem = CurrentItem->Next();
   }
// Return the value of the item pointed by CurrentItem
   return CurrentItem->Value();
}

// -----------
// Contains :
// -----------
//Standard_Boolean PCollection_SeqExplorer::Contains(const Item& T)
Standard_Boolean PCollection_SeqExplorer::Contains(const Item& )
{
  Standard_ProgramError::Raise("PCollection_SeqExplorer::Contains : Obsolete method...");

  return Standard_False;   
}

// -----------
// Location :
// -----------
//Standard_Integer PCollection_SeqExplorer::Location ( const Standard_Integer N ,
//                                           const Item& T ,
//                                           const Standard_Integer From ,
//                                           const Standard_Integer To)
Standard_Integer PCollection_SeqExplorer::Location ( const Standard_Integer  ,
                                           const Item&  ,
                                           const Standard_Integer  ,
                                           const Standard_Integer )
{
  Standard_ProgramError::Raise("PCollection_SeqExplorer::Location : Obsolete method...");
  return 0;
}

// -----------
// Location :
// -----------
//Standard_Integer PCollection_SeqExplorer::Location(const Standard_Integer N , const Item& T )
Standard_Integer PCollection_SeqExplorer::Location(const Standard_Integer  , const Item&  )
{
  Standard_ProgramError::Raise("PCollection_SeqExplorer::Location : Obsolete method...");
  return 0;
}



