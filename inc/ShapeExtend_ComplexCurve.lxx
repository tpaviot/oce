// Created on: 1999-06-22
// Created by: Roman LYGIN
// Copyright (c) 1999-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
//function : ReversedParameter
//purpose  : 
//=======================================================================

inline  Standard_Real ShapeExtend_ComplexCurve::ReversedParameter(const Standard_Real U) const
{
  return (1 - U);
}
 
//=======================================================================
//function : FirstParameter
//purpose  : 
//=======================================================================

inline  Standard_Real ShapeExtend_ComplexCurve::FirstParameter() const
{
  return 0;
}
 
//=======================================================================
//function : LastParameter
//purpose  : 
//=======================================================================

inline  Standard_Real ShapeExtend_ComplexCurve::LastParameter() const
{
  return 1;
}
 
//=======================================================================
//function : IsClosed
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeExtend_ComplexCurve::IsClosed() const
{
  return myClosed;
}

//=======================================================================
//function : IsPeriodic
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeExtend_ComplexCurve::IsPeriodic() const
{
  return Standard_False;
}

//=======================================================================
//function : Continuity
//purpose  : 
//=======================================================================

inline  GeomAbs_Shape ShapeExtend_ComplexCurve::Continuity() const
{
  return GeomAbs_C0;
}

//=======================================================================
//function : IsCN
//purpose  : 
//=======================================================================

inline  Standard_Boolean ShapeExtend_ComplexCurve::IsCN(const Standard_Integer N) const
{
  return N <=0;
}

