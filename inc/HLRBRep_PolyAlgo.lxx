// Created on: 1995-06-15
// Created by: Christophe MARION
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <HLRAlgo_PolyAlgo.hxx>

//=======================================================================
//function : NbShapes
//purpose  : 
//=======================================================================

inline Standard_Integer HLRBRep_PolyAlgo::NbShapes () const
{ return myShapes.Length(); }

//=======================================================================
//function : Load
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::Load (const TopoDS_Shape& S)
{ myShapes.Append(S); }

//=======================================================================
//function : Projector
//purpose  : 
//=======================================================================

inline const HLRAlgo_Projector & HLRBRep_PolyAlgo::Projector () const
{ return myProj; }

//=======================================================================
//function : Projector
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::Projector (const HLRAlgo_Projector& P)
{ myProj = P; }

//=======================================================================
//function : Angle
//purpose  : 
//=======================================================================

inline Standard_Real HLRBRep_PolyAlgo::Angle () const
{ return myAngle; }

//=======================================================================
//function : Angle
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::Angle (const Standard_Real Ang)
{ myAngle = Ang; }

//=======================================================================
//function : TolAngular
//purpose  : 
//=======================================================================

inline Standard_Real HLRBRep_PolyAlgo::TolAngular () const
{ return myTolAngular; }

//=======================================================================
//function : TolAngular
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::TolAngular (const Standard_Real Tol)
{ myTolAngular = Tol; }

//=======================================================================
//function : TolCoef
//purpose  : 
//=======================================================================

inline Standard_Real HLRBRep_PolyAlgo::TolCoef () const
{ return myTolSta; }

//=======================================================================
//function : TolCoef
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::TolCoef (const Standard_Real Tol)
{ myTolSta = Tol; myTolEnd = 1 - Tol;}

//=======================================================================
//function : InitHide
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::InitHide ()
{
  myAlgo->InitHide();
}

//=======================================================================
//function : MoreHide
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_PolyAlgo::MoreHide () const
{ return myAlgo->MoreHide(); }

//=======================================================================
//function : NextHide
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::NextHide ()
{ myAlgo->NextHide(); }

//=======================================================================
//function : InitShow
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::InitShow ()
{ myAlgo->InitShow(); }

//=======================================================================
//function : MoreShow
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_PolyAlgo::MoreShow () const
{ return myAlgo->MoreShow(); }

//=======================================================================
//function : NextShow
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::NextShow ()
{ myAlgo->NextShow(); }

//=======================================================================
//function : Debug
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRBRep_PolyAlgo::Debug () const
{ return myDebug; }

//=======================================================================
//function : Debug
//purpose  : 
//=======================================================================

inline void HLRBRep_PolyAlgo::Debug (const Standard_Boolean B)
{ myDebug = B; }
