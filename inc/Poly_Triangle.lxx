// Created on: 1995-03-06
// Created by: Laurent PAINNOT
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_OutOfRange.hxx>

//=======================================================================
//function : Set
//purpose  : 
//=======================================================================

inline void Poly_Triangle::Set(const Standard_Integer Index, const Standard_Integer Node)
{
  Standard_OutOfRange_Raise_if(Index < 1 || Index > 3,NULL);
  myNodes[Index-1] = Node;
}

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

inline Standard_Integer Poly_Triangle::Value(const Standard_Integer Index) const 
{
  Standard_OutOfRange_Raise_if(Index < 1 || Index > 3,NULL);
  return myNodes[Index-1];
}

//=======================================================================
//function : ChangeValue
//purpose  : 
//=======================================================================

inline Standard_Integer& Poly_Triangle::ChangeValue
(const Standard_Integer Index)
{
  Standard_OutOfRange_Raise_if(Index < 1 || Index > 3,NULL);
  return myNodes[Index-1];
}

