// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepToIGES_BREntity_HeaderFile
#define _BRepToIGES_BREntity_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_IGESData_IGESModel_HeaderFile
#include <Handle_IGESData_IGESModel.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_Transfer_FinderProcess_HeaderFile
#include <Handle_Transfer_FinderProcess.hxx>
#endif
#ifndef _Handle_IGESData_IGESEntity_HeaderFile
#include <Handle_IGESData_IGESEntity.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Handle_Standard_Transient_HeaderFile
#include <Handle_Standard_Transient.hxx>
#endif
class IGESData_IGESModel;
class Transfer_FinderProcess;
class IGESData_IGESEntity;
class TopoDS_Shape;
class Standard_Transient;


//! provides methods to transfer BRep entity from CASCADE to IGES. <br>
class BRepToIGES_BREntity  {
public:

  DEFINE_STANDARD_ALLOC

  //! Creates a tool BREntity <br>
  Standard_EXPORT   BRepToIGES_BREntity();
  //! Initializes the field of the tool BREntity with <br>
//!        default creating values. <br>
  Standard_EXPORT     void Init() ;
  //! Set the value of "TheModel" <br>
  Standard_EXPORT     void SetModel(const Handle(IGESData_IGESModel)& model) ;
  //! Returns the value of "TheModel" <br>
  Standard_EXPORT     Handle_IGESData_IGESModel GetModel() const;
  //! Returns the value of the UnitFlag of the header of the model <br>
//!           in meters. <br>
  Standard_EXPORT     Standard_Real GetUnit() const;
  //! Set the value of "TheMap" <br>
  Standard_EXPORT     void SetTransferProcess(const Handle(Transfer_FinderProcess)& TP) ;
  //! Returns the value of "TheMap" <br>
  Standard_EXPORT     Handle_Transfer_FinderProcess GetTransferProcess() const;
  //! Returns the result of the transfert of any Shape <br>
//!           If  the transfer has  failed, this member return a NullEntity. <br>
  Standard_EXPORT   virtual  Handle_IGESData_IGESEntity TransferShape(const TopoDS_Shape& start) ;
  //! Records a new Fail message <br>
  Standard_EXPORT     void AddFail(const TopoDS_Shape& start,const Standard_CString amess) ;
  //! Records a new Warning message <br>
  Standard_EXPORT     void AddWarning(const TopoDS_Shape& start,const Standard_CString amess) ;
  //! Records a new Fail message <br>
  Standard_EXPORT     void AddFail(const Handle(Standard_Transient)& start,const Standard_CString amess) ;
  //! Records a new Warning message <br>
  Standard_EXPORT     void AddWarning(const Handle(Standard_Transient)& start,const Standard_CString amess) ;
  //! Returns True if start was already treated and has a result in "TheMap" <br>
//!           else returns False. <br>
  Standard_EXPORT     Standard_Boolean HasShapeResult(const TopoDS_Shape& start) const;
  //! Returns the result of the transfer of the Shape "start" contained <br>
//!           in "TheMap" . (if HasShapeResult is True). <br>
  Standard_EXPORT     Handle_Standard_Transient GetShapeResult(const TopoDS_Shape& start) const;
  //! set in "TheMap" the result of the transfer of the Shape "start". <br>
  Standard_EXPORT     void SetShapeResult(const TopoDS_Shape& start,const Handle(Standard_Transient)& result) ;
  //! Returns True if start was already treated and has a result in "TheMap" <br>
//!           else returns False. <br>
  Standard_EXPORT     Standard_Boolean HasShapeResult(const Handle(Standard_Transient)& start) const;
  //! Returns the result of the transfer of the Transient "start" contained <br>
//!           in "TheMap" . (if HasShapeResult is True). <br>
  Standard_EXPORT     Handle_Standard_Transient GetShapeResult(const Handle(Standard_Transient)& start) const;
  //! set in "TheMap" the result of the transfer of the Transient "start". <br>
  Standard_EXPORT     void SetShapeResult(const Handle(Standard_Transient)& start,const Handle(Standard_Transient)& result) ;
  //! Returns mode for conversion of surfaces <br>
//!          (value of parameter write.convertsurface.mode) <br>
  Standard_EXPORT     Standard_Boolean GetConvertSurfaceMode() const;
  //! Returns mode for writing pcurves <br>
//!          (value of parameter write.surfacecurve.mode) <br>
  Standard_EXPORT     Standard_Boolean GetPCurveMode() const;
  
  Standard_EXPORT   virtual  void Delete() ;
Standard_EXPORT virtual ~BRepToIGES_BREntity() { Delete(); }





protected:





private:



Handle_IGESData_IGESModel TheModel;
Standard_Real TheUnitFactor;
Standard_Boolean myConvSurface;
Standard_Boolean myPCurveMode;
Handle_Transfer_FinderProcess TheMap;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
