// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _LocOpe_WiresOnShape_HeaderFile
#define _LocOpe_WiresOnShape_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_LocOpe_WiresOnShape_HeaderFile
#include <Handle_LocOpe_WiresOnShape.hxx>
#endif

#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _TopTools_IndexedDataMapOfShapeShape_HeaderFile
#include <TopTools_IndexedDataMapOfShapeShape.hxx>
#endif
#ifndef _TopTools_MapOfShape_HeaderFile
#include <TopTools_MapOfShape.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopTools_DataMapOfShapeShape_HeaderFile
#include <TopTools_DataMapOfShapeShape.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _LocOpe_ProjectedWires_HeaderFile
#include <LocOpe_ProjectedWires.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class TopoDS_Shape;
class TopoDS_Wire;
class TopoDS_Face;
class TopoDS_Compound;
class TopoDS_Edge;
class TopoDS_Vertex;



class LocOpe_WiresOnShape : public LocOpe_ProjectedWires {

public:

  
  Standard_EXPORT   LocOpe_WiresOnShape(const TopoDS_Shape& S);
  
  Standard_EXPORT     void Init(const TopoDS_Shape& S) ;
  //! Set the flag of check internal intersections <br>
//!          default value is True (to check) <br>
        void SetCheckInterior(const Standard_Boolean ToCheckInterior) ;
  
  Standard_EXPORT     void Bind(const TopoDS_Wire& W,const TopoDS_Face& F) ;
  
  Standard_EXPORT     void Bind(const TopoDS_Compound& Comp,const TopoDS_Face& F) ;
  
  Standard_EXPORT     void Bind(const TopoDS_Edge& E,const TopoDS_Face& F) ;
  
  Standard_EXPORT     void Bind(const TopoDS_Edge& EfromW,const TopoDS_Edge& EonFace) ;
  
  Standard_EXPORT     void BindAll() ;
  
        Standard_Boolean IsDone() const;
  
  Standard_EXPORT     void InitEdgeIterator() ;
  
  Standard_EXPORT     Standard_Boolean MoreEdge() ;
  
  Standard_EXPORT     TopoDS_Edge Edge() ;
  //! Returns the face of the shape on which the current <br>
//!          edge is projected. <br>
  Standard_EXPORT     TopoDS_Face OnFace() ;
  //! If the   current  edge is  projected  on  an edge, <br>
//!          returns <Standard_True> and sets the value of <E>. <br>
//!          Otherwise, returns <Standard_False>. <br>
  Standard_EXPORT     Standard_Boolean OnEdge(TopoDS_Edge& E) ;
  
  Standard_EXPORT     void NextEdge() ;
  
  Standard_EXPORT     Standard_Boolean OnVertex(const TopoDS_Vertex& Vwire,TopoDS_Vertex& Vshape) ;
  //! If the vertex <V> lies on  an edge of the original <br>
//!          shape,  returns     <Standard_True> and   sets the <br>
//!          concerned edge in  <E>,  and the parameter on  the <br>
//!          edge in <P>. <br>
//!          Else returns <Standard_False>. <br>
  Standard_EXPORT     Standard_Boolean OnEdge(const TopoDS_Vertex& V,TopoDS_Edge& E,Standard_Real& P) ;
  //! tells is the face to be split by section or not <br>
        Standard_Boolean IsFaceWithSection(const TopoDS_Shape& aFace) const;




  DEFINE_STANDARD_RTTI(LocOpe_WiresOnShape)

protected:




private: 


TopoDS_Shape myShape;
TopTools_IndexedDataMapOfShapeShape myMapEF;
TopTools_MapOfShape myFacesWithSection;
Standard_Boolean myCheckInterior;
TopTools_DataMapOfShapeShape myMap;
Standard_Boolean myDone;
Standard_Integer myIndex;


};


#include <LocOpe_WiresOnShape.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
