// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Message_ProgressIndicator.hxx>

//=======================================================================
//function : Relieve
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Relieve ()
{
  if ( ! myActive ) return;
  myProgress->EndScope();
  myActive = 0;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_CString name) const
{
  if ( myActive ) myProgress->NextScope(name);
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_Real span, 
					  const Standard_CString name) const
{
  if ( myActive ) myProgress->NextScope(span, name);
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_Real span, 
					  const Handle(TCollection_HAsciiString)& name) const
{
  if ( myActive ) {
    myProgress->EndScope();
    myProgress->NewScope(span, name);
  }
}

//=======================================================================
//function : More
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressSentry::More () const
{
  return myActive ? ! myProgress->UserBreak() : Standard_True;
}

//=======================================================================
//function : Show
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Show () const
{
  if ( ! myProgress.IsNull() ) myProgress->Show();
}
