// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Message_ProgressIndicator.hxx>

//=======================================================================
//function : Relieve
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Relieve ()
{
  if ( ! myActive ) return;
  myProgress->EndScope();
  myActive = 0;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_CString name) const
{
  if ( myActive ) myProgress->NextScope(name);
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_Real span, 
					  const Standard_CString name) const
{
  if ( myActive ) myProgress->NextScope(span, name);
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_Real span, 
					  const Handle(TCollection_HAsciiString)& name) const
{
  if ( myActive ) {
    myProgress->EndScope();
    myProgress->NewScope(span, name);
  }
}

//=======================================================================
//function : More
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressSentry::More () const
{
  return myActive ? ! myProgress->UserBreak() : Standard_True;
}

//=======================================================================
//function : Show
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Show () const
{
  if ( ! myProgress.IsNull() ) myProgress->Show();
}
