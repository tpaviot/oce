#include <Message_ProgressIndicator.hxx>

//=======================================================================
//function : Relieve
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Relieve ()
{
  if ( ! myActive ) return;
  myProgress->EndScope();
  myActive = 0;
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_CString name) const
{
  if ( myActive ) myProgress->NextScope(name);
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_Real span, 
					  const Standard_CString name) const
{
  if ( myActive ) myProgress->NextScope(span, name);
}

//=======================================================================
//function : Next
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Next (const Standard_Real span, 
					  const Handle(TCollection_HAsciiString)& name) const
{
  if ( myActive ) {
    myProgress->EndScope();
    myProgress->NewScope(span, name);
  }
}

//=======================================================================
//function : More
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressSentry::More () const
{
  return myActive ? ! myProgress->UserBreak() : Standard_True;
}

//=======================================================================
//function : Show
//purpose  : 
//=======================================================================

inline void Message_ProgressSentry::Show () const
{
  if ( ! myProgress.IsNull() ) myProgress->Show();
}
