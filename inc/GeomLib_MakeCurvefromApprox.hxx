// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _GeomLib_MakeCurvefromApprox_HeaderFile
#define _GeomLib_MakeCurvefromApprox_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _AdvApprox_ApproxAFunction_HeaderFile
#include <AdvApprox_ApproxAFunction.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Geom2d_BSplineCurve_HeaderFile
#include <Handle_Geom2d_BSplineCurve.hxx>
#endif
#ifndef _Handle_Geom_BSplineCurve_HeaderFile
#include <Handle_Geom_BSplineCurve.hxx>
#endif
class StdFail_NotDone;
class Standard_OutOfRange;
class AdvApprox_ApproxAFunction;
class Geom2d_BSplineCurve;
class Geom_BSplineCurve;


//! this class is used to  construct the BSpline curve <br>
//!          from an Approximation ( ApproxAFunction from AdvApprox). <br>
class GeomLib_MakeCurvefromApprox  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   GeomLib_MakeCurvefromApprox(const AdvApprox_ApproxAFunction& Approx);
  
        Standard_Boolean IsDone() const;
  //! returns the number of 1D spaces of the Approx <br>
  Standard_EXPORT     Standard_Integer Nb1DSpaces() const;
  //! returns the number of 3D spaces of the Approx <br>
  Standard_EXPORT     Standard_Integer Nb2DSpaces() const;
  //! returns the number of 3D spaces of the Approx <br>
  Standard_EXPORT     Standard_Integer Nb3DSpaces() const;
  //! returns a polynomial curve whose poles correspond to <br>
//! the Index2d 2D space <br>//! if Index2d not in the Range [1,Nb2dSpaces] <br>//! if the Approx is not Done <br>
  Standard_EXPORT     Handle_Geom2d_BSplineCurve Curve2d(const Standard_Integer Index2d) const;
  //! returns a 2D curve building it from the 1D curve <br>
//!          in x at Index1d and y at Index2d amongst the <br>
//!          1D curves <br>//! if Index1d not in the Range [1,Nb1dSpaces] <br>
//!          if Index2d not in the Range [1,Nb1dSpaces] <br>//! if the Approx is not Done <br>
  Standard_EXPORT     Handle_Geom2d_BSplineCurve Curve2dFromTwo1d(const Standard_Integer Index1d,const Standard_Integer Index2d) const;
  //! returns a rational curve whose poles correspond to <br>
//! the index2d of the 2D space and whose weights correspond <br>
//! to one dimensional space of index 1d <br>//! if Index1d not in the Range [1,Nb1dSpaces] <br>
//!          if Index2d not in the Range [1,Nb2dSpaces] <br>//! if the Approx is not Done <br>
  Standard_EXPORT     Handle_Geom2d_BSplineCurve Curve2d(const Standard_Integer Index1d,const Standard_Integer Index2d) const;
  //!  returns a polynomial curve whose poles correspond to <br>
//! the Index3D 3D space <br>//! if Index3D not in the Range [1,Nb3dSpaces] <br>//! if the Approx is not Done <br>
  Standard_EXPORT     Handle_Geom_BSplineCurve Curve(const Standard_Integer Index3d) const;
  //! returns a rational curve whose poles correspond to <br>
//! the index3D of the 3D space and whose weights correspond <br>
//! to the index1d 1D space. <br>//! if Index1D not in the Range [1,Nb1dSpaces] <br>
//!          if Index3D not in the Range [1,Nb3dSpaces] <br>//! if the Approx is not Done <br>
  Standard_EXPORT     Handle_Geom_BSplineCurve Curve(const Standard_Integer Index1D,const Standard_Integer Index3D) const;





protected:





private:



AdvApprox_ApproxAFunction myApprox;


};


#include <GeomLib_MakeCurvefromApprox.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
