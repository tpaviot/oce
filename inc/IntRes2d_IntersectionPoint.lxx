// Created on: 1992-10-01
// Created by: Laurent BUCHARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


inline IntRes2d_IntersectionPoint::IntRes2d_IntersectionPoint
      (const gp_Pnt2d& P,
       const Standard_Real Uc1, const Standard_Real Uc2,
       const IntRes2d_Transition& Trans1,
       const IntRes2d_Transition& Trans2,
       const Standard_Boolean ReversedFlag):
  pt(P),p1(Uc1),p2(Uc2),trans1(Trans1),trans2(Trans2)
{
  if(ReversedFlag) {
    trans1=Trans2;
    trans2=Trans1;
    p1=Uc2;
    p2=Uc1;
  }
}


inline void IntRes2d_IntersectionPoint::SetValues
  (const gp_Pnt2d& P,
   const Standard_Real Uc1, const Standard_Real Uc2,
   const IntRes2d_Transition& Trans1,
   const IntRes2d_Transition& Trans2,
   const Standard_Boolean ReversedFlag)
{
  pt=P;
  if (!ReversedFlag) {
    trans1 = Trans1;
    trans2 = Trans2;
    p1 = Uc1;
    p2 = Uc2;
  }
  else {
    trans1 = Trans2;
    trans2 = Trans1;
    p1 = Uc2;
    p2 = Uc1;
  }
}

inline const gp_Pnt2d &IntRes2d_IntersectionPoint::Value () const {
  return pt;
}

inline Standard_Real IntRes2d_IntersectionPoint::ParamOnFirst () const {
  return p1;
}

inline Standard_Real IntRes2d_IntersectionPoint::ParamOnSecond () const {
  return p2;
}

inline const IntRes2d_Transition& IntRes2d_IntersectionPoint::TransitionOfFirst () const {
  return trans1;
}

inline const IntRes2d_Transition& IntRes2d_IntersectionPoint::TransitionOfSecond () 
     const {
       return trans2;
     }
