// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPDS_Point_HeaderFile
#define _BOPDS_Point_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class gp_Pnt;
class gp_Pnt2d;



//! The class BOPDS_Point is to store <br>
//! the information about intersection point <br>
class BOPDS_Point  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty contructor <br>
//! <br>
      BOPDS_Point();
virtual ~BOPDS_Point();
  
//! Modifier <br>
//! Sets 3D point <thePnt> <br>
        void SetPnt(const gp_Pnt& thePnt) ;
  
//! Selector <br>
//! Returns 3D point <br>
       const gp_Pnt& Pnt() const;
  
//! Modifier <br>
//! Sets 2D point on the first face <thePnt> <br>
        void SetPnt2D1(const gp_Pnt2d& thePnt) ;
  
//! Selector <br>
//! Returns 2D point on the first face <thePnt> <br>
       const gp_Pnt2d& Pnt2D1() const;
  
//! Modifier <br>
//! Sets 2D point on the second face <thePnt> <br>
        void SetPnt2D2(const gp_Pnt2d& thePnt) ;
  
//! Selector <br>
//! Returns 2D point on the second face <thePnt> <br>
       const gp_Pnt2d& Pnt2D2() const;
  
//! Modifier <br>
//! Sets the index of the vertex <theIndex> <br>
        void SetIndex(const Standard_Integer theIndex) ;
  
//! Selector <br>
//! Returns index of the vertex <br>
        Standard_Integer Index() const;





protected:



gp_Pnt myPnt;
gp_Pnt2d myPnt2D1;
gp_Pnt2d myPnt2D2;
Standard_Integer myIndex;


private:





};


#include <BOPDS_Point.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
