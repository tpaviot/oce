// Created on: 1997-01-24
// Created by: Robert COUBLANC
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

inline void AIS_GlobalStatus::SetGraphicStatus(const AIS_DisplayStatus aStat)
{
 myStatus = aStat;
}

inline void AIS_GlobalStatus::AddDisplayMode(const Standard_Integer aMode)
{
  if(!IsDModeIn(aMode)) myDispModes.Append(aMode);
}

inline void AIS_GlobalStatus::AddSelectionMode(const Standard_Integer aMode)
{
  if(!IsSModeIn(aMode)) mySelModes.Append(aMode);
}

inline void AIS_GlobalStatus::SetLayerIndex(const Standard_Integer AnIndex)
{
  myLayerIndex=AnIndex;
}

inline void AIS_GlobalStatus::SetHilightStatus(const Standard_Boolean aStat)
{
  myIsHilit = aStat;
}
inline void AIS_GlobalStatus::SetHilightColor(const Quantity_NameOfColor aCol)
{myHiCol = aCol;}

inline Standard_Boolean  AIS_GlobalStatus::IsSubIntensityOn() const 
{
  return mySubInt;
}
inline void AIS_GlobalStatus::SubIntensityOn()
{
  mySubInt = Standard_True;
}
inline void AIS_GlobalStatus::SubIntensityOff()
{
  mySubInt = Standard_False;
}



inline AIS_DisplayStatus AIS_GlobalStatus::GraphicStatus() const 
{
  return myStatus;
}

inline const TColStd_ListOfInteger& AIS_GlobalStatus::DisplayedModes() const 
{
  return myDispModes;
}

inline const TColStd_ListOfInteger& AIS_GlobalStatus::SelectionModes() const 
{
  return mySelModes;
}

inline Standard_Boolean AIS_GlobalStatus::IsHilighted() const 
{
  return myIsHilit;
}

inline Quantity_NameOfColor AIS_GlobalStatus::HilightColor() const 
{return myHiCol;}
