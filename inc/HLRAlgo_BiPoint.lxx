// Created on: 1995-06-22
// Created by: Christophe MARION
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#define EMskRg1Line  0x01u
#define EMskRgNLine  0x02u
#define EMskOutLine  0x04u
#define EMskIntLine  0x08u
#define EMskHidden   0x10u

//=======================================================================
//function : HLRAlgo_BiPoint
//purpose  : 
//=======================================================================

inline HLRAlgo_BiPoint::HLRAlgo_BiPoint ()
{
}

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::Rg1Line () const
{ return (myIndices[9] & EMskRg1Line) != 0; }

//=======================================================================
//function : Rg1Line
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::Rg1Line (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskRg1Line;
  else   myIndices[9] &= ~EMskRg1Line;
}

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::RgNLine () const
{ return (myIndices[9] & EMskRgNLine) != 0; }

//=======================================================================
//function : RgNLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::RgNLine (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskRgNLine;
  else   myIndices[9] &= ~EMskRgNLine;
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::OutLine () const
{ return (myIndices[9] & EMskOutLine) != 0; }

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::OutLine (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskOutLine;
  else   myIndices[9] &= ~EMskOutLine;
}

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::IntLine () const
{ return (myIndices[9] & EMskIntLine) != 0; }

//=======================================================================
//function : IntLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::IntLine (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskIntLine;
  else   myIndices[9] &= ~EMskIntLine;
}

//=======================================================================
//function : Hidden
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_BiPoint::Hidden () const
{ return (myIndices[9] & EMskHidden) != 0; }

//=======================================================================
//function : Hidden
//purpose  : 
//=======================================================================

inline void HLRAlgo_BiPoint::Hidden (const Standard_Boolean B)
{
  if (B) myIndices[9] |=  EMskHidden;
  else   myIndices[9] &= ~EMskHidden;
}

//=======================================================================
//function : Indices
//purpose  : 
//=======================================================================

inline Standard_Address HLRAlgo_BiPoint::Indices () const
{ return (Standard_Address)myIndices; }

//=======================================================================
//function : Coordinates
//purpose  : 
//=======================================================================

inline Standard_Address HLRAlgo_BiPoint::Coordinates () const
{ return (Standard_Address)myCoordinates; }
