// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//#include <Transfer_Actor.ixx>

//  TheStart : Handle(Standard_Transient) ou (Transfer_Finder)



Transfer_Actor::Transfer_Actor ()    {  }


    Standard_Boolean  Transfer_Actor::Recognize  (const TheStart& /*start*/)
      {  return Standard_True;  }

    Handle(Transfer_Binder) Transfer_Actor::Transferring
  (const TheStart& /*start*/,
   const Handle(Transfer_TransferProcess)& /*TP*/)
      {  return NullResult();  }


    Handle(Transfer_SimpleBinderOfTransient)
        Transfer_Actor::TransientResult
  (const Handle(Standard_Transient)& res) const
{
  Handle(Transfer_SimpleBinderOfTransient) binder;
  if (res.IsNull()) return binder;
  binder = new Transfer_SimpleBinderOfTransient;
  binder->SetResult (res);
  return binder;
}


    Handle(Transfer_Binder) Transfer_Actor::NullResult () const
{
  Handle(Transfer_Binder) binder;
  return binder;
}


    void Transfer_Actor::SetNext
  (const Handle(Transfer_Actor)& next)
{
  if (thenext == next) return;
  if (thenext.IsNull())           thenext = next;
  else if (thenext->IsLast())  {  next->SetNext(thenext);  thenext = next;  }
  else                            thenext->SetNext(next);
}

    Handle(Transfer_Actor) Transfer_Actor::Next () const
      {  return thenext;  }

    void Transfer_Actor::SetLast (const Standard_Boolean mode)
      {  thelast = mode;  }


    Standard_Boolean  Transfer_Actor::IsLast () const
      {  return thelast;  }
