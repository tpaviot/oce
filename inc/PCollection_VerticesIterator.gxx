// Created on: 1991-05-29
// Created by: Denis PASCAL
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//		<dp>
// Revised by:  Mireille MERCIEN
//              Sep,7 1992

#include <Standard_NoMoreObject.hxx>
#include <Standard_NoSuchObject.hxx>


//---------------------------------------------------------------------------
// Constructor
//---------------------------------------------------------------------------
PCollection_VerticesIterator::PCollection_VerticesIterator 
     (const Handle(PCollection_HDirectedGraph)& G):MyVertexIterator(G->GetVertices()) 
{
  HasMore = MyVertexIterator.More();
}


//---------------------------------------------------------------------------
// More
//---------------------------------------------------------------------------
Boolean PCollection_VerticesIterator::More () const 
{
  return HasMore;
}

//---------------------------------------------------------------------------
// Next
//---------------------------------------------------------------------------
void PCollection_VerticesIterator::Next ()  
{
  if (!HasMore) Standard_NoMoreObject::Raise();
  MyVertexIterator.Next();
  HasMore = MyVertexIterator.More();
}


//---------------------------------------------------------------------------
// Value
//---------------------------------------------------------------------------
Handle(PCollection_Vertex) PCollection_VerticesIterator::Value () const 
{
  if (!HasMore) Standard_NoSuchObject::Raise();
  return MyVertexIterator.Value();
}


//---------------------------------------------------------------------------
// Clear
//---------------------------------------------------------------------------
void PCollection_VerticesIterator::Clear () 
{
  HasMore = False;
}









