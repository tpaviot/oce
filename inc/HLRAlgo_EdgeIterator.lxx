// Created on: 1993-01-11
// Created by: Christophe MARION
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <HLRAlgo_EdgeStatus.hxx>

//=======================================================================
//function : MoreHidden
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeIterator::MoreHidden () const
{ return iHid <= myNbHid + 1; }

//=======================================================================
//function : Hidden
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgeIterator::Hidden (Standard_Real& Start,
			      Standard_ShortReal& TolStart,
			      Standard_Real& End  ,
			      Standard_ShortReal& TolEnd) const
{
  Start    = myHidStart;
  TolStart = myHidTolStart;
  End      = myHidEnd;
  TolEnd   = myHidTolEnd;
}

//=======================================================================
//function : InitVisible
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgeIterator::InitVisible (const HLRAlgo_EdgeStatus& status)
{
  EVis    = (Standard_Address)&status;
  iVis    = 1;
  myNbVis = ((HLRAlgo_EdgeStatus*)EVis)->NbVisiblePart();
}

//=======================================================================
//function : MoreVisible
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeIterator::MoreVisible () const
{ return iVis <= myNbVis; }

//=======================================================================
//function : NextVisible
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeIterator::NextVisible ()
{ iVis++; }

//=======================================================================
//function : Visible
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgeIterator::Visible (Standard_Real& Start,
			       Standard_ShortReal& TolStart,
			       Standard_Real& End  ,
			       Standard_ShortReal& TolEnd)
{ 
  ((HLRAlgo_EdgeStatus*)EVis)->VisiblePart
    (iVis,Start,TolStart,End,TolEnd);
}
