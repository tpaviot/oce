// Created on: 1996-12-19
// Created by: Robert COUBLANC
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


inline Standard_Boolean AIS_Drawer::WasLastLocal() const
{return Standard_False;}

inline Standard_Boolean AIS_Drawer::HasLocalAttributes() const 
{return hasLocalAttributes;}

inline Standard_Real AIS_Drawer::PreviousDeviationCoefficient ()  const 
{return  (myhasOwnDeviationCoefficient) ? myPreviousDeviationCoefficient : 0.0;}

inline Standard_Real AIS_Drawer::PreviousHLRDeviationCoefficient ()  const 
{return  (myhasOwnHLRDeviationCoefficient) ? myPreviousHLRDeviationCoefficient : 0.0;}

inline Standard_Real AIS_Drawer::PreviousDeviationAngle ()  const 
{return  (myhasOwnDeviationAngle) ? myPreviousDeviationAngle : 0.0;}

inline Standard_Real AIS_Drawer::PreviousHLRDeviationAngle ()  const 
{return  (myhasOwnHLRDeviationAngle) ? myPreviousHLRDeviationAngle : 0.0;}

inline void AIS_Drawer::Link ( const Handle(Prs3d_Drawer)& aDrawer) 
{ myLink = aDrawer;}

inline Standard_Boolean AIS_Drawer::HasLink() const
{ return ! myLink.IsNull();}

inline void AIS_Drawer::SetDeviationCoefficient ()
{ myhasOwnDeviationCoefficient    = Standard_False; }

inline void AIS_Drawer::SetHLRDeviationCoefficient () 
{ myhasOwnHLRDeviationCoefficient    = Standard_False; }

inline void AIS_Drawer::SetDeviationAngle () 
{ myhasOwnDeviationAngle    = Standard_False;}

inline void AIS_Drawer::SetHLRAngle () 
{ myhasOwnHLRDeviationAngle    = Standard_False;}

inline Standard_Boolean AIS_Drawer::IsOwnDeviationCoefficient ()  const 
{ return  myhasOwnDeviationCoefficient;}

inline Standard_Boolean AIS_Drawer::IsOwnDeviationAngle ()  const 
{ return  myhasOwnDeviationAngle;}

inline Standard_Boolean AIS_Drawer::IsOwnHLRDeviationCoefficient ()  const 
{ return  myhasOwnHLRDeviationCoefficient;}

inline Standard_Boolean AIS_Drawer::IsOwnHLRDeviationAngle ()  const 
{ return  myhasOwnHLRDeviationAngle;}

inline Standard_Boolean AIS_Drawer::HasTextAspect ()  const 
{ return (!myTextAspect.IsNull());}

inline Standard_Boolean AIS_Drawer::HasWireAspect ()  const 
{ return (!myWireAspect.IsNull());}

inline Standard_Boolean AIS_Drawer::HasLineAspect ()  const 
{return !myLineAspect.IsNull(); }

inline Standard_Boolean AIS_Drawer::HasShadingAspect ()  const 
{  return !myShadingAspect.IsNull();}

inline Standard_Boolean AIS_Drawer::HasPointAspect ()  const 
{ return !myPointAspect.IsNull();}

inline Standard_Boolean AIS_Drawer::HasAngleAspect ()  const 
{ return !myAngleAspect.IsNull();}

inline Standard_Boolean AIS_Drawer::HasDatumAspect ()  const 
{ return !myDatumAspect.IsNull();}

inline Standard_Boolean AIS_Drawer::HasPlaneAspect ()  const 
{ return !myPlaneAspect.IsNull();}

inline Standard_Boolean AIS_Drawer::HasLengthAspect ()  const 
{ return !myLengthAspect.IsNull();}

inline Standard_Boolean AIS_Drawer::IsOwnFaceBoundaryDraw () const
{ return myHasOwnFaceBoundaryDraw; }

inline Standard_Boolean AIS_Drawer::IsOwnFaceBoundaryAspect () const
{ return !myFaceBoundaryAspect.IsNull (); }

inline void AIS_Drawer::SetTypeOfHLR (const Prs3d_TypeOfHLR theTypeOfHLR) 
{
  myTypeOfHLR = theTypeOfHLR;
}

inline Prs3d_TypeOfHLR AIS_Drawer::TypeOfHLR ( ) const
{
  return (myTypeOfHLR == Prs3d_TOH_NotSet) ? myLink->TypeOfHLR() : myTypeOfHLR;
}
