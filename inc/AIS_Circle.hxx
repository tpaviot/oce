// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _AIS_Circle_HeaderFile
#define _AIS_Circle_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_AIS_Circle_HeaderFile
#include <Handle_AIS_Circle.hxx>
#endif

#ifndef _Handle_Geom_Circle_HeaderFile
#include <Handle_Geom_Circle.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _AIS_InteractiveObject_HeaderFile
#include <AIS_InteractiveObject.hxx>
#endif
#ifndef _Handle_PrsMgr_PresentationManager3d_HeaderFile
#include <Handle_PrsMgr_PresentationManager3d.hxx>
#endif
#ifndef _Handle_Prs3d_Presentation_HeaderFile
#include <Handle_Prs3d_Presentation.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Prs3d_Projector_HeaderFile
#include <Handle_Prs3d_Projector.hxx>
#endif
#ifndef _Handle_Geom_Transformation_HeaderFile
#include <Handle_Geom_Transformation.hxx>
#endif
#ifndef _Handle_SelectMgr_Selection_HeaderFile
#include <Handle_SelectMgr_Selection.hxx>
#endif
#ifndef _AIS_KindOfInteractive_HeaderFile
#include <AIS_KindOfInteractive.hxx>
#endif
#ifndef _Quantity_NameOfColor_HeaderFile
#include <Quantity_NameOfColor.hxx>
#endif
class Geom_Circle;
class PrsMgr_PresentationManager3d;
class Prs3d_Presentation;
class Prs3d_Projector;
class Geom_Transformation;
class SelectMgr_Selection;
class Quantity_Color;


//! Constructs circle datums to be used in construction of <br>
//! composite shapes. <br>
class AIS_Circle : public AIS_InteractiveObject {

public:

  //! Initializes this algorithm for constructing AIS circle <br>
//! datums initializes the circle aCircle <br>
  Standard_EXPORT   AIS_Circle(const Handle(Geom_Circle)& aCircle);
  //! Initializes this algorithm for constructing AIS circle datums. <br>
//! Initializes the circle aCircle, the arc <br>
//!   starting point UStart, the arc ending point UEnd, <br>
//!   and the direction aSens. <br>
  Standard_EXPORT   AIS_Circle(const Handle(Geom_Circle)& aCircle,const Standard_Real aUStart,const Standard_Real aUEnd,const Standard_Boolean aSens = Standard_True);
  //! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
  Standard_EXPORT   virtual  void Compute(const Handle(Prs3d_Projector)& aProjector,const Handle(Geom_Transformation)& aTrsf,const Handle(Prs3d_Presentation)& aPresentation) ;
  //! Returns index 6 by default. <br>
      virtual  Standard_Integer Signature() const;
  //! Indicates that the type of Interactive Object is a datum. <br>
      virtual  AIS_KindOfInteractive Type() const;
  //! Returns the circle component defined in SetCircle. <br>
       const Handle_Geom_Circle& Circle() const;
  
//! Constructs instances of the starting point and the end <br>
//! point parameters, u1 and u2. <br>
        void Parameters(Standard_Real& u1,Standard_Real& u2) const;
  //! Allows you to provide settings for the circle datum aCircle. <br>
        void SetCircle(const Handle(Geom_Circle)& aCircle) ;
  //! Allows you to set the parameter u for the starting point of an arc. <br>
        void SetFirstParam(const Standard_Real u) ;
  //! Allows you to provide the parameter u for the end point of an arc. <br>
        void SetLastParam(const Standard_Real u) ;
  //! Assigns the color aColor to the solid line boundary of the circle datum. <br>
  Standard_EXPORT     void SetColor(const Quantity_NameOfColor aColor) ;
  
  Standard_EXPORT     void SetColor(const Quantity_Color& aColor) ;
  //! Assigns the width aValue to the solid line boundary of the circle datum. <br>
  Standard_EXPORT     void SetWidth(const Standard_Real aValue) ;
  //! Removes color from the solid line boundary of the circle datum. <br>
  Standard_EXPORT     void UnsetColor() ;
  //! Removes width settings from the solid line boundary of the circle datum. <br>
  Standard_EXPORT     void UnsetWidth() ;




  DEFINE_STANDARD_RTTI(AIS_Circle)

protected:




private: 

  
  Standard_EXPORT     void Compute(const Handle(PrsMgr_PresentationManager3d)& aPresentationManager,const Handle(Prs3d_Presentation)& aPresentation,const Standard_Integer aMode = 0) ;
  
  Standard_EXPORT     void Compute(const Handle(Prs3d_Projector)& aProjector,const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeSelection(const Handle(SelectMgr_Selection)& aSelection,const Standard_Integer aMode) ;
  
  Standard_EXPORT     void ComputeCircle(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeArc(const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeCircleSelection(const Handle(SelectMgr_Selection)& aSelection) ;
  
  Standard_EXPORT     void ComputeArcSelection(const Handle(SelectMgr_Selection)& aSelection) ;

Handle_Geom_Circle myComponent;
Standard_Real myUStart;
Standard_Real myUEnd;
Standard_Boolean myCircleIsArc;
Standard_Boolean mySens;


};


#include <AIS_Circle.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
