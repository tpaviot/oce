// Created on: 2013-12-20
// Created by: Denis BOGOLEPOV
// Copyright (c) 2013-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

// =======================================================================
// function : BVH_ObjectSet
// purpose  :
// =======================================================================
template<class T, int N>
BVH_ObjectSet<T, N>::BVH_ObjectSet()
{
  //
}

// =======================================================================
// function : ~BVH_ObjectSet
// purpose  :
// =======================================================================
template<class T, int N>
BVH_ObjectSet<T, N>::~BVH_ObjectSet()
{
  //
}

// =======================================================================
// function : Clears all geometric objects
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_ObjectSet<T, N>::Clear()
{
  for (Standard_Integer anObjectIdx = 0; anObjectIdx < myObjects.Size(); ++anObjectIdx)
  {
    myObjects.ChangeValue (anObjectIdx).Nullify();
  }
  myObjects.Clear();
}

// =======================================================================
// function : Objects
// purpose  :
// =======================================================================
template<class T, int N>
typename BVH_ObjectSet<T, N>::BVH_ObjectList& BVH_ObjectSet<T, N>::Objects()
{
  return myObjects;
}

// =======================================================================
// function : Objects
// purpose  :
// =======================================================================
template<class T, int N>
const typename BVH_ObjectSet<T, N>::BVH_ObjectList& BVH_ObjectSet<T, N>::Objects() const
{
  return myObjects;
}

// =======================================================================
// function : Size
// purpose  :
// =======================================================================
template<class T, int N>
Standard_Integer BVH_ObjectSet<T, N>::Size() const
{
  return myObjects.Size();
}

// =======================================================================
// function : Box
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Box<T, N> BVH_ObjectSet<T, N>::Box (const Standard_Integer theIndex) const
{
  return myObjects.Value (theIndex)->Box();
}

// =======================================================================
// function : Center
// purpose  :
// =======================================================================
template<class T, int N>
T BVH_ObjectSet<T, N>::Center (const Standard_Integer theIndex,
                               const Standard_Integer theAxis) const
{
  // Note: general implementation, not optimal
  return BVH::CenterAxis<T, N>::Center (myObjects.Value (theIndex)->Box(), theAxis);
}

// =======================================================================
// function : Swap
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_ObjectSet<T, N>::Swap (const Standard_Integer theIndex1,
                                const Standard_Integer theIndex2)
{
  std::swap (myObjects.ChangeValue (theIndex1),
             myObjects.ChangeValue (theIndex2));
}
