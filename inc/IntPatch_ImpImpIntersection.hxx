// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IntPatch_ImpImpIntersection_HeaderFile
#define _IntPatch_ImpImpIntersection_HeaderFile

#include <Standard.hxx>
#include <Standard_DefineAlloc.hxx>
#include <Standard_Macro.hxx>

#include <Standard_Boolean.hxx>
#include <IntPatch_SequenceOfPoint.hxx>
#include <IntPatch_SequenceOfLine.hxx>
#include <IntPatch_TheSOnBounds.hxx>
#include <Handle_Adaptor3d_HSurface.hxx>
#include <Handle_Adaptor3d_TopolTool.hxx>
#include <Standard_Real.hxx>
#include <Standard_Integer.hxx>
#include <Handle_IntPatch_Line.hxx>
class StdFail_NotDone;
class Standard_OutOfRange;
class Standard_DomainError;
class Standard_ConstructionError;
class Adaptor3d_HSurface;
class Adaptor3d_TopolTool;
class IntPatch_Point;
class IntPatch_Line;


//! Implementation of the intersection between two
//! quadric patches : Plane, Cone, Cylinder or Sphere.
class IntPatch_ImpImpIntersection 
{
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT IntPatch_ImpImpIntersection();
  
  //! Flag theIsReqToKeepRLine has been enterred only for
  //! compatibility with TopOpeBRep package. It shall be deleted
  //! after deleting TopOpeBRep.
  //! When intersection result returns IntPatch_RLine and another
  //! IntPatch_Line (not restriction) we (in case of theIsReqToKeepRLine==TRUE)
  //! will always keep both lines even if they are coincided.
  Standard_EXPORT IntPatch_ImpImpIntersection(const Handle(Adaptor3d_HSurface)& S1, const Handle(Adaptor3d_TopolTool)& D1, const Handle(Adaptor3d_HSurface)& S2, const Handle(Adaptor3d_TopolTool)& D2, const Standard_Real TolArc, const Standard_Real TolTang, const Standard_Boolean theIsReqToKeepRLine = Standard_False);
  
  //! Flag theIsReqToKeepRLine has been enterred only for
  //! compatibility with TopOpeBRep package. It shall be deleted
  //! after deleting TopOpeBRep.
  //! When intersection result returns IntPatch_RLine and another
  //! IntPatch_Line (not restriction) we (in case of theIsReqToKeepRLine==TRUE)
  //! will always keep both lines even if they are coincided.
  Standard_EXPORT   void Perform (const Handle(Adaptor3d_HSurface)& S1, const Handle(Adaptor3d_TopolTool)& D1, const Handle(Adaptor3d_HSurface)& S2, const Handle(Adaptor3d_TopolTool)& D2, const Standard_Real TolArc, const Standard_Real TolTang, const Standard_Boolean isTheTrimmed = Standard_False, const Standard_Boolean theIsReqToKeepRLine = Standard_False) ;
  
  //! Returns True if the calculus was succesfull.
      Standard_Boolean IsDone()  const;
  
  //! Returns true if the is no intersection.
      Standard_Boolean IsEmpty()  const;
  
  //! Returns True if the two patches are considered as
  //! entierly tangent, i-e every restriction arc of one
  //! patch is inside the geometric base of the otehr patch.
      Standard_Boolean TangentFaces()  const;
  
  //! Returns True when the TangentFaces returns True and the
  //! normal vectors evaluated at a point on the first and the
  //! second surface are opposite.
  //! The exception DomainError is raised if TangentFaces
  //! returns False.
      Standard_Boolean OppositeFaces()  const;
  
  //! Returns the number of "single" points.
      Standard_Integer NbPnts()  const;
  
  //! Returns the point of range Index.
  //! An exception is raised if Index<=0 or Index>NbPnt.
     const  IntPatch_Point& Point (const Standard_Integer Index)  const;
  
  //! Returns the number of intersection lines.
      Standard_Integer NbLines()  const;
  
  //! Returns the line of range Index.
  //! An exception is raised if Index<=0 or Index>NbLine.
     const  Handle(IntPatch_Line)& Line (const Standard_Integer Index)  const;




protected:





private:



  Standard_Boolean done;
  Standard_Boolean empt;
  Standard_Boolean tgte;
  Standard_Boolean oppo;
  IntPatch_SequenceOfPoint spnt;
  IntPatch_SequenceOfLine slin;
  IntPatch_TheSOnBounds solrst;


};


#include <IntPatch_ImpImpIntersection.lxx>





#endif // _IntPatch_ImpImpIntersection_HeaderFile
