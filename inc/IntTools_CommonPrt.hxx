// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IntTools_CommonPrt_HeaderFile
#define _IntTools_CommonPrt_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TopoDS_Edge_HeaderFile
#include <TopoDS_Edge.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _IntTools_Range_HeaderFile
#include <IntTools_Range.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _IntTools_SequenceOfRanges_HeaderFile
#include <IntTools_SequenceOfRanges.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
class TopoDS_Edge;
class IntTools_Range;
class IntTools_SequenceOfRanges;
class gp_Pnt;


//! The class  is  to  describe a  common  part <br>
//!          between two edges in  3-d space. <br>
class IntTools_CommonPrt  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty constructor <br>
//! <br>
  Standard_EXPORT   IntTools_CommonPrt();
  
//! Copy  constructor <br>
//! <br>
  Standard_EXPORT   IntTools_CommonPrt(const IntTools_CommonPrt& aCPrt);
  
  Standard_EXPORT     IntTools_CommonPrt& Assign(const IntTools_CommonPrt& Other) ;
    IntTools_CommonPrt& operator =(const IntTools_CommonPrt& Other) 
{
  return Assign(Other);
}
  
//! Sets the first edge. <br>
//! <br>
  Standard_EXPORT     void SetEdge1(const TopoDS_Edge& anE) ;
  
//! Sets the second edge. <br>
//! <br>
  Standard_EXPORT     void SetEdge2(const TopoDS_Edge& anE) ;
  
//! Sets the type of  the common  part <br>
//! Vertex  or  Edge <br>
//! <br>
  Standard_EXPORT     void SetType(const TopAbs_ShapeEnum aType) ;
  
//! Sets the range of first edge. <br>
//! <br>
  Standard_EXPORT     void SetRange1(const IntTools_Range& aR) ;
  
//! Sets the range of first edge. <br>
//! <br>
  Standard_EXPORT     void SetRange1(const Standard_Real tf,const Standard_Real tl) ;
  
//! Appends the range of second edge. <br>
//! <br>
  Standard_EXPORT     void AppendRange2(const IntTools_Range& aR) ;
  
//! Appends the range of second edge. <br>
//! <br>
  Standard_EXPORT     void AppendRange2(const Standard_Real tf,const Standard_Real tl) ;
  
//! Sets a parameter of first vertex <br>
//! <br>
  Standard_EXPORT     void SetVertexParameter1(const Standard_Real tV) ;
  
//! Sets a parameter of second vertex <br>
//! <br>
  Standard_EXPORT     void SetVertexParameter2(const Standard_Real tV) ;
  
//! Returns the first edge. <br>
//! <br>
  Standard_EXPORT    const TopoDS_Edge& Edge1() const;
  
//! Returns the second edge <br>
//! <br>
  Standard_EXPORT    const TopoDS_Edge& Edge2() const;
  
//! Returns the type of  the common  part <br>
//! <br>
  Standard_EXPORT     TopAbs_ShapeEnum Type() const;
  
//! Returns the range of first edge <br>
//! <br>
  Standard_EXPORT    const IntTools_Range& Range1() const;
  
//! Returns the range of first edge. <br>
//! <br>
  Standard_EXPORT     void Range1(Standard_Real& tf,Standard_Real& tl) const;
  
//! Returns the  ranges of second edge. <br>
//! <br>
  Standard_EXPORT    const IntTools_SequenceOfRanges& Ranges2() const;
  
//! Returns the  ranges of second edge. <br>
//! <br>
  Standard_EXPORT     IntTools_SequenceOfRanges& ChangeRanges2() ;
  
//! Returns parameter of first vertex <br>
//! <br>
  Standard_EXPORT     Standard_Real VertexParameter1() const;
  
//! Returns parameter of second vertex <br>
//! <br>
  Standard_EXPORT     Standard_Real VertexParameter2() const;
  
//! Copies me to anOther <br>
//! <br>
  Standard_EXPORT     void Copy(IntTools_CommonPrt& anOther) const;
  
//! Modifier <br>
//! <br>
  Standard_EXPORT     Standard_Boolean AllNullFlag() const;
  
//! Selector <br>
//! <br>
  Standard_EXPORT     void SetAllNullFlag(const Standard_Boolean aFlag) ;
  
//! Modifier <br>
//! <br>
  Standard_EXPORT     void SetBoundingPoints(const gp_Pnt& aP1,const gp_Pnt& aP2) ;
  
//! Selector <br>
//! <br>
//! <br>
  Standard_EXPORT     void BoundingPoints(gp_Pnt& aP1,gp_Pnt& aP2) const;





protected:





private:



TopoDS_Edge myEdge1;
TopoDS_Edge myEdge2;
TopAbs_ShapeEnum myType;
IntTools_Range myRange1;
Standard_Real myVertPar1;
Standard_Real myVertPar2;
IntTools_SequenceOfRanges myRanges2;
Standard_Boolean myAllNullFlag;
gp_Pnt myPnt1;
gp_Pnt myPnt2;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
