// Created on: 2013-12-20
// Created by: Denis BOGOLEPOV
// Copyright (c) 2013-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <BVH_BinnedBuilder.hxx>

// =======================================================================
// function : BVH_PrimitiveSet
// purpose  :
// =======================================================================
template<class T, int N>
BVH_PrimitiveSet<T, N>::BVH_PrimitiveSet()
: myBVH (new BVH_Tree<T, N>())
{
  // Set default builder - binned SAH split
  myBuilder = new BVH_BinnedBuilder<T, N, 48> (5, 32);
}

// =======================================================================
// function : ~BVH_PrimitiveSet
// purpose  :
// =======================================================================
template<class T, int N>
BVH_PrimitiveSet<T, N>::~BVH_PrimitiveSet()
{
  myBVH.Nullify();
  myBuilder.Nullify();
}

// =======================================================================
// function : BVH
// purpose  :
// =======================================================================
template<class T, int N>
const NCollection_Handle<BVH_Tree<T, N> >& BVH_PrimitiveSet<T, N>::BVH()
{
  if (BVH_Object<T, N>::myIsDirty)
  {
    Update();
  }

  return myBVH;
}

// =======================================================================
// function : Box
// purpose  :
// =======================================================================
template<class T, int N>
BVH_Box<T, N> BVH_PrimitiveSet<T, N>::Box() const
{
  if (!BVH_Object<T, N>::myIsDirty)
  {
    return myBox;
  }

  myBox = BVH_Set<T, N>::Box();
  return myBox;
}

// =======================================================================
// function : Update
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_PrimitiveSet<T, N>::Update()
{
  if (!BVH_Object<T, N>::myIsDirty)
  {
    return;
  }

  myBuilder->Build (this, myBVH.operator->(), Box());
  BVH_Object<T, N>::myIsDirty = Standard_False;
}

// =======================================================================
// function : Builder
// purpose  :
// =======================================================================
template<class T, int N>
const NCollection_Handle<BVH_Builder<T, N> >& BVH_PrimitiveSet<T, N>::Builder() const
{
  return myBuilder;
}

// =======================================================================
// function : SetBuilder
// purpose  :
// =======================================================================
template<class T, int N>
void BVH_PrimitiveSet<T, N>::SetBuilder (NCollection_Handle<BVH_Builder<T, N> >& theBuilder)
{
  myBuilder = theBuilder;
}
