// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TopAbs_HeaderFile
#define _TopAbs_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _TopAbs_Orientation_HeaderFile
#include <TopAbs_Orientation.hxx>
#endif
#ifndef _Standard_OStream_HeaderFile
#include <Standard_OStream.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _TopAbs_State_HeaderFile
#include <TopAbs_State.hxx>
#endif



class TopAbs  {
public:

  DEFINE_STANDARD_ALLOC

  //! Compose  the Orientation    <Or1>  and  <Or2>.    This <br>
//!          composition is not symmetric (if  you switch <Or1> and <br>
//!          <Or2> the result  is different). It assumes that <Or1> <br>
//!          is the Orientation of a Shape S1 containing a Shape S2 <br>
//!          of Orientation   Or2.  The result    is the  cumulated <br>
//!          orientation of S2 in S1.  The composition law is : <br>
//! <br>
//!             \ Or2     FORWARD  REVERSED INTERNAL EXTERNAL <br>
//!           Or1       ------------------------------------- <br>
//!           FORWARD   | FORWARD  REVERSED INTERNAL EXTERNAL <br>
//!                     | <br>
//!           REVERSED  | REVERSED FORWARD  INTERNAL EXTERNAL <br>
//!                     | <br>
//!           INTERNAL  | INTERNAL INTERNAL INTERNAL INTERNAL <br>
//!                     | <br>
//!           EXTERNAL  | EXTERNAL EXTERNAL EXTERNAL EXTERNAL <br>
//!     Note: The top corner in the table is the most important <br>
//! for the purposes of Open CASCADE topology and shape sharing. <br>
  Standard_EXPORT   static  TopAbs_Orientation Compose(const TopAbs_Orientation Or1,const TopAbs_Orientation Or2) ;
  //! xchanges the interior/exterior status of the two <br>
//! sides. This is what happens when the sense of <br>
//! direction is reversed. The following rules apply: <br>
//! <br>
//!          FORWARD          REVERSED <br>
//!          REVERSED         FORWARD <br>
//!          INTERNAL         INTERNAL <br>
//!          EXTERNAL         EXTERNAL <br>
//! <br>
//!          Reverse exchange the material sides. <br>
//! <br>
  Standard_EXPORT   static  TopAbs_Orientation Reverse(const TopAbs_Orientation Or) ;
  //! Reverses the interior/exterior status of each side of <br>
//! the object. So, to take the complement of an object <br>
//! means to reverse the interior/exterior status of its <br>
//! boundary, i.e. inside becomes outside. <br>
//! The method returns the complementary orientation, <br>
//! following the rules in the table below: <br>
//!          FORWARD          REVERSED <br>
//!          REVERSED         FORWARD <br>
//!          INTERNAL         EXTERNAL <br>
//!          EXTERNAL         INTERNAL <br>
//! <br>
//!          Complement  complements   the  material  side.  Inside <br>
//!          becomes outside. <br>
//! <br>
  Standard_EXPORT   static  TopAbs_Orientation Complement(const TopAbs_Orientation Or) ;
  //! Prints the name  of Shape  <SEq>  as  a String  on the <br>
//!          Stream <S> and returns <S>. <br>
//! <br>
  Standard_EXPORT   static  Standard_OStream& Print(const TopAbs_ShapeEnum SE,Standard_OStream& S) ;
  //! Prints the name of the Orientation <Or> as a String on <br>
//!          the Stream <S> and returns <S>. <br>
//! <br>
  Standard_EXPORT   static  Standard_OStream& Print(const TopAbs_Orientation Or,Standard_OStream& S) ;
  //! Prints the name of the State <St> as a String on <br>
//!          the Stream <S> and returns <S>. <br>
//! <br>
  Standard_EXPORT   static  Standard_OStream& Print(const TopAbs_State St,Standard_OStream& S) ;





protected:





private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
