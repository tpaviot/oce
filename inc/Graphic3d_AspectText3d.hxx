// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Graphic3d_AspectText3d_HeaderFile
#define _Graphic3d_AspectText3d_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectText3d_HeaderFile
#include <Handle_Graphic3d_AspectText3d.hxx>
#endif

#ifndef _TCollection_AsciiString_HeaderFile
#include <TCollection_AsciiString.hxx>
#endif
#ifndef _Quantity_Color_HeaderFile
#include <Quantity_Color.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Aspect_TypeOfStyleText_HeaderFile
#include <Aspect_TypeOfStyleText.hxx>
#endif
#ifndef _Aspect_TypeOfDisplayText_HeaderFile
#include <Aspect_TypeOfDisplayText.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Font_FontAspect_HeaderFile
#include <Font_FontAspect.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
class Graphic3d_AspectTextDefinitionError;
class Quantity_Color;


//! Creates and updates a group of attributes for <br>
//!      text primitives. This group contains the colour, <br>
//!      font, expansion factor (height/width ratio), and <br>
//!      inter-character space. <br>
//! <br>
//!          NOTE: The font name is stored in the aspect instance <br>
//!          so it is safe to pass it as const char* to OpenGl package <br>
//!          without copying the string. However, the aspect should not <br>
//!          be deleted until the text drawn using this aspect is no longer <br>
//!          visible. The best practice is to keep the aspect in the object's drawer. <br>
class Graphic3d_AspectText3d : public MMgt_TShared {

public:

  //! Creates a context table for text primitives <br>
//!      defined with the following default values: <br>
//! <br>
//!      Colour                    : NOC_YELLOW <br>
//!      Font                      : NOF_ASCII_MONO <br>
//!      Expansion factor          : 1. <br>
//!      Space between characters  : 0. <br>
//!      The style                 : TOST_NORMAL <br>
//!      The display type          : TODT_NORMAL <br>
  Standard_EXPORT   Graphic3d_AspectText3d();
  //! Creates a context table for text primitives <br>
//!      defined with the specified values. <br>
//!          AFont may be to take means from User(example "Courier New") <br>
//!      or Font name defined in Font_NameOfFont(example Font_NOF_ASCII_MONO) <br>
//!      or use default font("Courier") <br>
//! <br>
  Standard_EXPORT   Graphic3d_AspectText3d(const Quantity_Color& AColor,const Standard_CString AFont,const Standard_Real AExpansionFactor,const Standard_Real ASpace,const Aspect_TypeOfStyleText AStyle = Aspect_TOST_NORMAL,const Aspect_TypeOfDisplayText ADisplayType = Aspect_TODT_NORMAL);
  //! Modifies the colour of <me>. <br>
  Standard_EXPORT     void SetColor(const Quantity_Color& AColor) ;
  //! Modifies the expansion factor (height/width ratio) <br>
//!  If the factor is less than 1, the characters will <br>
//!  be higher than they are wide. <br>
  Standard_EXPORT     void SetExpansionFactor(const Standard_Real AFactor) ;
  //! Modifies the font of <me>. <br>
  Standard_EXPORT     void SetFont(const Standard_CString AFont) ;
  //! Modifies the space between the characters. <br>
  Standard_EXPORT     void SetSpace(const Standard_Real ASpace) ;
  //! Modifies the style of the text. <br>
//!      TOST_NORMAL     Default text. The text is displayed like any other graphic object. <br>
//!              This text can be hidden by another object that is nearest from the <br>
//!              point of view. <br>
//!      TOST_ANNOTATION The text is always visible. The texte is displayed <br>
//!              over the other object according to the priority. <br>
  Standard_EXPORT     void SetStyle(const Aspect_TypeOfStyleText AStyle) ;
  //! Define the display type of the text. <br>
//! <br>
//!      TODT_NORMAL     Default display. Text only. <br>
//!      TODT_SUBTITLE   There is a subtitle under the text. <br>
//!      TODT_DEKALE     The text is displayed with a 3D style. <br>
//!      TODT_BLEND      The text is displayed in XOR. <br>
  Standard_EXPORT     void SetDisplayType(const Aspect_TypeOfDisplayText ADisplayType) ;
  //! Modifies the colour of the subtitle for the TODT_SUBTITLE TextDisplayType <br>
//!         and the colour of backgroubd for the TODT_DEKALE TextDisplayType. <br>
  Standard_EXPORT     void SetColorSubTitle(const Quantity_Color& AColor) ;
  //! Turns usage of text zoomable on/off <br>
  Standard_EXPORT     void SetTextZoomable(const Standard_Boolean AFlag) ;
  //! Returns TRUE when the Text Zoomable is on. <br>
  Standard_EXPORT     Standard_Boolean GetTextZoomable() const;
  //! Turns usage of text rotated <br>
  Standard_EXPORT     void SetTextAngle(const Standard_Real AAngle) ;
  //! Returns Angle of degree <br>
  Standard_EXPORT     Standard_Real GetTextAngle() const;
  //! Turns usage of Aspect text <br>
  Standard_EXPORT     void SetTextFontAspect(const Font_FontAspect AFontAspect) ;
  //! Returns text FontAspect <br>
  Standard_EXPORT     Font_FontAspect GetTextFontAspect() const;
  //! Returns the current values of the group <me>. <br>
  Standard_EXPORT     void Values(Quantity_Color& AColor,Standard_CString& AFont,Standard_Real& AnExpansionFactor,Standard_Real& ASpace) const;
  //! Returns the current values of the group <me>. <br>
  Standard_EXPORT     void Values(Quantity_Color& AColor,Standard_CString& AFont,Standard_Real& AnExpansionFactor,Standard_Real& ASpace,Aspect_TypeOfStyleText& AStyle,Aspect_TypeOfDisplayText& ADisplayType,Quantity_Color& AColorSubTitle) const;
  //! Returns the current values of the group <me>. <br>
  Standard_EXPORT     void Values(Quantity_Color& AColor,Standard_CString& AFont,Standard_Real& AnExpansionFactor,Standard_Real& ASpace,Aspect_TypeOfStyleText& AStyle,Aspect_TypeOfDisplayText& ADisplayType,Quantity_Color& AColorSubTitle,Standard_Boolean& ATextZoomable,Standard_Real& ATextAngle) const;
  //! Returns the current values of the group <me>. <br>
  Standard_EXPORT     void Values(Quantity_Color& AColor,Standard_CString& AFont,Standard_Real& AnExpansionFactor,Standard_Real& ASpace,Aspect_TypeOfStyleText& AStyle,Aspect_TypeOfDisplayText& ADisplayType,Quantity_Color& AColorSubTitle,Standard_Boolean& ATextZoomable,Standard_Real& ATextAngle,Font_FontAspect& ATextFontAspect) const;




  DEFINE_STANDARD_RTTI(Graphic3d_AspectText3d)

protected:




private: 


TCollection_AsciiString MyFont;
Quantity_Color MyColor;
Standard_Real MyFactor;
Standard_Real MySpace;
Aspect_TypeOfStyleText MyStyle;
Aspect_TypeOfDisplayText MyDisplayType;
Quantity_Color MyColorSubTitle;
Standard_Boolean MyTextZoomable;
Standard_Real MyTextAngle;
Font_FontAspect MyTextFontAspect;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
