// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _V3d_DirectionalLight_HeaderFile
#define _V3d_DirectionalLight_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_V3d_DirectionalLight_HeaderFile
#include <Handle_V3d_DirectionalLight.hxx>
#endif

#ifndef _Graphic3d_Vertex_HeaderFile
#include <Graphic3d_Vertex.hxx>
#endif
#ifndef _V3d_PositionLight_HeaderFile
#include <V3d_PositionLight.hxx>
#endif
#ifndef _Handle_V3d_Viewer_HeaderFile
#include <Handle_V3d_Viewer.hxx>
#endif
#ifndef _V3d_TypeOfOrientation_HeaderFile
#include <V3d_TypeOfOrientation.hxx>
#endif
#ifndef _Quantity_NameOfColor_HeaderFile
#include <Quantity_NameOfColor.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _V3d_Coordinate_HeaderFile
#include <V3d_Coordinate.hxx>
#endif
#ifndef _Quantity_Parameter_HeaderFile
#include <Quantity_Parameter.hxx>
#endif
#ifndef _Handle_V3d_View_HeaderFile
#include <Handle_V3d_View.hxx>
#endif
#ifndef _V3d_TypeOfRepresentation_HeaderFile
#include <V3d_TypeOfRepresentation.hxx>
#endif
#ifndef _Handle_Graphic3d_Group_HeaderFile
#include <Handle_Graphic3d_Group.hxx>
#endif
class V3d_BadValue;
class V3d_Viewer;
class V3d_View;
class Graphic3d_Group;


//! Create and modify a directional light source <br>
//!          in a viewer. <br>
class V3d_DirectionalLight : public V3d_PositionLight {

public:

  //! Creates a directional light source in the viewer. <br>
  Standard_EXPORT   V3d_DirectionalLight(const Handle(V3d_Viewer)& VM,const V3d_TypeOfOrientation Direction = V3d_XposYposZpos,const Quantity_NameOfColor Color = Quantity_NOC_WHITE,const Standard_Boolean Headlight = Standard_False);
  //! Creates a directional light source in the viewer. <br>
//!          Xt,Yt,Zt : Coordinate of light source Target. <br>
//!          Xp,Yp,Zp : Coordinate of light source Position. <br>
//!          The others parameters describe before. <br>
  Standard_EXPORT   V3d_DirectionalLight(const Handle(V3d_Viewer)& VM,const V3d_Coordinate Xt,const V3d_Coordinate Yt,const V3d_Coordinate Zt,const V3d_Coordinate Xp,const V3d_Coordinate Yp,const V3d_Coordinate Zp,const Quantity_NameOfColor Color = Quantity_NOC_WHITE,const Standard_Boolean Headlight = Standard_False);
  //! Defines the direction of the light source <br>
//!	     by a predefined orientation. <br>
  Standard_EXPORT     void SetDirection(const V3d_TypeOfOrientation Direction) ;
  //! Defines the direction of the light source by the predefined <br>
//! vector Xm,Ym,Zm. <br>
//!  Warning: raises  BadValue from V3d if the vector is null. <br>
  Standard_EXPORT     void SetDirection(const Quantity_Parameter Xm,const Quantity_Parameter Ym,const Quantity_Parameter Zm) ;
  //! Defines the point of light source representation. <br>
  Standard_EXPORT     void SetDisplayPosition(const V3d_Coordinate X,const V3d_Coordinate Y,const V3d_Coordinate Z) ;
  //! Calls SetDisplayPosition method. <br>
  Standard_EXPORT   virtual  void SetPosition(const V3d_Coordinate Xp,const V3d_Coordinate Yp,const V3d_Coordinate Zp) ;
  //! Display the graphic structure of light source <br>
//!          in the choosen view. We have three type of representation <br>
//!          - SIMPLE   : Only the light source is displayed. <br>
//!          - PARTIAL  : The light source and the light space are <br>
//!                       displayed. <br>
//!          - COMPLETE : The same representation as PARTIAL. <br>
//!          We can choose the "SAMELAST" as parameter of representation <br>
//!          In this case the graphic structure representation will be <br>
//!          the last displayed. <br>
  Standard_EXPORT     void Display(const Handle(V3d_View)& aView,const V3d_TypeOfRepresentation Representation) ;
  //! Calls DisplayPosition method. <br>
  Standard_EXPORT   virtual  void Position(V3d_Coordinate& X,V3d_Coordinate& Y,V3d_Coordinate& Z) const;
  //! Returns the choosen position to represent the light <br>
//!          source. <br>
  Standard_EXPORT     void DisplayPosition(V3d_Coordinate& X,V3d_Coordinate& Y,V3d_Coordinate& Z) const;
  //! Returns the Vx,Vy,Vz direction of the light source. <br>
  Standard_EXPORT     void Direction(Quantity_Parameter& Vx,Quantity_Parameter& Vy,Quantity_Parameter& Vz) const;




  DEFINE_STANDARD_RTTI(V3d_DirectionalLight)

protected:




private: 

  //! Defines the representation of the directional light source. <br>
  Standard_EXPORT     void Symbol(const Handle(Graphic3d_Group)& gsymbol,const Handle(V3d_View)& aView) const;

Graphic3d_Vertex MyDisplayPosition;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
