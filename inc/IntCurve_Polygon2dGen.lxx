// Created on: 1993-06-03
// Created by: Laurent BUCHARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_OutOfRange.hxx>

//======================================================================
inline Standard_Real IntCurve_Polygon2dGen::DeflectionOverEstimation() const {
  return(TheDeflection);
}//======================================================================
inline void IntCurve_Polygon2dGen::SetDeflectionOverEstimation
  (const Standard_Real x) {
  TheDeflection = x;
  myBox.Enlarge(TheDeflection);
}
//======================================================================
inline void IntCurve_Polygon2dGen::Closed(const Standard_Boolean flag) {
  ClosedPolygon = flag;
}
//======================================================================
inline Standard_Integer IntCurve_Polygon2dGen::NbSegments(void) const {
  return((ClosedPolygon)? NbPntIn : NbPntIn-1);
}
//======================================================================
inline Standard_Real IntCurve_Polygon2dGen::InfParameter() const {
  return(TheParams.Value(TheIndex(1)));
}
//======================================================================
inline Standard_Real IntCurve_Polygon2dGen::SupParameter() const {
  return(TheParams.Value(TheIndex(NbPntIn)));
}
//======================================================================

//======================================================================
inline  Standard_Integer IntCurve_Polygon2dGen::CalculRegion(const Standard_Real x,
				      const Standard_Real y,
				      const Standard_Real x1,
				      const Standard_Real x2,
				      const Standard_Real y1,
				      const Standard_Real y2) const {
  Standard_Integer r;
  if(x<x1) { r=1; }  else { if(x>x2) { r=2; } else { r=0; } }
  if(y<y1) { r|=4; } else { if(y>y2) { r|=8; } }
  return(r);
}
