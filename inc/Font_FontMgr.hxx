// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Font_FontMgr_HeaderFile
#define _Font_FontMgr_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Font_FontMgr_HeaderFile
#include <Handle_Font_FontMgr.hxx>
#endif

#ifndef _Font_NListOfSystemFont_HeaderFile
#include <Font_NListOfSystemFont.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_Font_SystemFont_HeaderFile
#include <Handle_Font_SystemFont.hxx>
#endif
#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Font_FontAspect_HeaderFile
#include <Font_FontAspect.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class TColStd_SequenceOfHAsciiString;
class Font_SystemFont;
class TCollection_HAsciiString;


//! Collects and provides information about available fonts in system. <br>
class Font_FontMgr : public MMgt_TShared {

public:

  
  Standard_EXPORT   static  Handle_Font_FontMgr GetInstance() ;
  
  Standard_EXPORT    const Font_NListOfSystemFont& GetAvailableFonts() const;
  //! Returns sequence of available fonts names <br>
  Standard_EXPORT     void GetAvailableFontsNames(TColStd_SequenceOfHAsciiString& theFontsNames) const;
  //! Returns font that match given parameters. <br>
//!         If theFontName is empty string returned font can have any FontName. <br>
//!         If theFontAspect is Font_FA_Undefined returned font can have any FontAspect. <br>
//!         If theFontSize is "-1" returned font can have any FontSize. <br>
  Standard_EXPORT     Handle_Font_SystemFont GetFont(const Handle(TCollection_HAsciiString)& theFontName,const Font_FontAspect theFontAspect,const Standard_Integer theFontSize) const;
  //! Tries to find font by given parameters. <br>
//!         If the specified font is not found tries to use font names mapping. <br>
//!         If the requested family name not found -> search for any font family <br>
//!         with given aspect and height. If the font is still not found, returns <br>
//!         any font available in the system. Returns NULL in case when the fonts <br>
//!         are not found in the system. <br>
  Standard_EXPORT     Handle_Font_SystemFont FindFont(const Handle(TCollection_HAsciiString)& theFontName,const Font_FontAspect theFontAspect,const Standard_Integer theFontSize) const;




  DEFINE_STANDARD_RTTI(Font_FontMgr)

protected:




private: 

  //! Creates empty font object <br>
  Standard_EXPORT   Font_FontMgr();
  //! Collects available fonts paths. <br>
  Standard_EXPORT     void InitFontDataBase() ;

Font_NListOfSystemFont myListOfFonts;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
