// Created by: Peter KURNEV
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <BOPDS_PassKey.hxx>
//=======================================================================
//function : InterfVV
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfVV& BOPDS_DS::InterfVV()
{
  return myInterfVV;
}
//=======================================================================
//function : InterfVE
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfVE& BOPDS_DS::InterfVE()
{
  return myInterfVE;
}
//=======================================================================
//function : InterfVF
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfVF& BOPDS_DS::InterfVF()
{
  return myInterfVF;
}//=======================================================================
//function : InterfEE
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfEE& BOPDS_DS::InterfEE()
{
  return myInterfEE;
}
//=======================================================================
//function : InterfEF
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfEF& BOPDS_DS::InterfEF()
{
  return myInterfEF;
}
//=======================================================================
//function : InterfFF
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfFF& BOPDS_DS::InterfFF()
{
  return myInterfFF;
}
//=======================================================================
//function : InterfVZ
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfVZ& BOPDS_DS::InterfVZ()
{
  return myInterfVZ;
}
//=======================================================================
//function : InterfEZ
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfEZ& BOPDS_DS::InterfEZ()
{
  return myInterfEZ;
}
//=======================================================================
//function : InterfFZ
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfFZ& BOPDS_DS::InterfFZ()
{
  return myInterfFZ;
}
//=======================================================================
//function : InterfZZ
//purpose  : 
//=======================================================================
inline BOPDS_VectorOfInterfZZ& BOPDS_DS::InterfZZ()
{
  return myInterfZZ;
}
//=======================================================================
//function : NbInterfTypes
//purpose  : 
//=======================================================================
inline Standard_Integer BOPDS_DS::NbInterfTypes()
{
  return 10;
}
//=======================================================================
//function : AddInterf
//purpose  : 
//=======================================================================
inline void BOPDS_DS::AddInterf(const Standard_Integer theI1,
                                const Standard_Integer theI2)
{
  BOPDS_PassKey aPK;
  //
  aPK.SetIds(theI1, theI2);
  myInterfTB.Add(aPK);
}
//=======================================================================
//function : HasInterf
//purpose  : 
//=======================================================================
inline Standard_Boolean BOPDS_DS::HasInterf
  (const Standard_Integer theI1,
   const Standard_Integer theI2)const
{
  BOPDS_PassKey aPK;
  //
  aPK.SetIds(theI1, theI2);
  return myInterfTB.Contains(aPK);
}
//=======================================================================
//function : Interferences
//purpose  : 
//=======================================================================
inline const BOPDS_MapOfPassKey& BOPDS_DS::Interferences()const
{
  return myInterfTB;
}
//=======================================================================
//function : SetFuzzyValue
//purpose  : 
//=======================================================================
inline void BOPDS_DS::SetFuzzyValue(const Standard_Real theFuzz)
{
  myFuzzyValue = (theFuzz < 0.) ? 0. : theFuzz;
}
//=======================================================================
//function : FuzzyValue
//purpose  : 
//=======================================================================
inline Standard_Real BOPDS_DS::FuzzyValue() const
{
  return myFuzzyValue;
}
