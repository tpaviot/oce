// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Extrema_ExtCC2d_HeaderFile
#define _Extrema_ExtCC2d_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Extrema_SequenceOfPOnCurv2d_HeaderFile
#include <Extrema_SequenceOfPOnCurv2d.hxx>
#endif
#ifndef _TColStd_SequenceOfReal_HeaderFile
#include <TColStd_SequenceOfReal.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _gp_Pnt2d_HeaderFile
#include <gp_Pnt2d.hxx>
#endif
#ifndef _Handle_Extrema_CCache2dOfExtCC2d_HeaderFile
#include <Handle_Extrema_CCache2dOfExtCC2d.hxx>
#endif
class StdFail_InfiniteSolutions;
class StdFail_NotDone;
class Standard_OutOfRange;
class Adaptor2d_Curve2d;
class Extrema_Curve2dTool;
class Extrema_CCache2dOfExtCC2d;
class Extrema_ECC2dOfExtCC2d;
class Extrema_CCFOfECC2dOfExtCC2d;
class Extrema_POnCurv2d;
class gp_Pnt2d;
class Extrema_ExtElC2d;



class Extrema_ExtCC2d  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   Extrema_ExtCC2d();
  
  Standard_EXPORT   Extrema_ExtCC2d(const Adaptor2d_Curve2d& C1,const Adaptor2d_Curve2d& C2,const Standard_Real TolC1 = 1.0e-10,const Standard_Real TolC2 = 1.0e-10);
  
  Standard_EXPORT   Extrema_ExtCC2d(const Adaptor2d_Curve2d& C1,const Adaptor2d_Curve2d& C2,const Standard_Real U1,const Standard_Real U2,const Standard_Real V1,const Standard_Real V2,const Standard_Real TolC1 = 1.0e-10,const Standard_Real TolC2 = 1.0e-10);
  
  Standard_EXPORT     void Initialize(const Adaptor2d_Curve2d& C2,const Standard_Real V1,const Standard_Real V2,const Standard_Real TolC1 = 1.0e-10,const Standard_Real TolC2 = 1.0e-10) ;
  
  Standard_EXPORT     void Perform(const Adaptor2d_Curve2d& C1,const Standard_Real U1,const Standard_Real U2) ;
  
  Standard_EXPORT     Standard_Boolean IsDone() const;
  
  Standard_EXPORT     Standard_Integer NbExt() const;
  
  Standard_EXPORT     Standard_Boolean IsParallel() const;
  
  Standard_EXPORT     Standard_Real SquareDistance(const Standard_Integer N = 1) const;
  
  Standard_EXPORT     void Points(const Standard_Integer N,Extrema_POnCurv2d& P1,Extrema_POnCurv2d& P2) const;
  
  Standard_EXPORT     void TrimmedSquareDistances(Standard_Real& dist11,Standard_Real& distP12,Standard_Real& distP21,Standard_Real& distP22,gp_Pnt2d& P11,gp_Pnt2d& P12,gp_Pnt2d& P21,gp_Pnt2d& P22) const;





protected:

  
  Standard_EXPORT     void Results(const Extrema_ExtElC2d& AlgExt,const Standard_Real Ut11,const Standard_Real Ut12,const Standard_Real Ut21,const Standard_Real Ut22,const Standard_Real Period1 = 0.0,const Standard_Real Period2 = 0.0) ;
  
  Standard_EXPORT     void Results(const Extrema_ECC2dOfExtCC2d& AlgExt,const Adaptor2d_Curve2d& C,const Standard_Real Ut11,const Standard_Real Ut12,const Standard_Real Ut21,const Standard_Real Ut22,const Standard_Real Period1 = 0.0,const Standard_Real Period2 = 0.0) ;




private:



Standard_Boolean myDone;
Standard_Boolean myIsPar;
Extrema_SequenceOfPOnCurv2d mypoints;
TColStd_SequenceOfReal mySqDist;
Standard_Integer mynbext;
Standard_Boolean inverse;
Standard_Address myC;
Standard_Real myu1;
Standard_Real myu2;
Standard_Real myv1;
Standard_Real myv2;
Standard_Real mytolc1;
Standard_Real mytolc2;
gp_Pnt2d P1f;
gp_Pnt2d P1l;
gp_Pnt2d P2f;
gp_Pnt2d P2l;
Standard_Real mydist11;
Standard_Real mydist12;
Standard_Real mydist21;
Standard_Real mydist22;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
