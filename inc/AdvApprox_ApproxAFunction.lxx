// Created on: 1995-05-31
// Created by: Xavier BENVENISTE
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_ConstructionError.hxx>
#include <TColStd_HArray1OfReal.hxx>
#include <TColStd_HArray1OfInteger.hxx>
//=======================================================================
//function : IsDone
//purpose  : 
//=======================================================================

inline Standard_Boolean AdvApprox_ApproxAFunction::HasResult() const 
{ return myHasResult ; } 
//=======================================================================
//function : IsDone
//purpose  : 
//=======================================================================

inline Standard_Boolean AdvApprox_ApproxAFunction::IsDone() const 
{ return myDone ; } 
//=======================================================================
//function : Poles1d
//purpose  : 
//=======================================================================
inline Handle(TColStd_HArray2OfReal) AdvApprox_ApproxAFunction::Poles1d() 
  const 
{ return my1DPoles ; } 
//=======================================================================
//function : Poles2d
//purpose  : 
//=======================================================================
inline Handle(TColgp_HArray2OfPnt2d) AdvApprox_ApproxAFunction::Poles2d()
  const 
{ return my2DPoles ; } 
//=======================================================================
//function : Poles
//purpose  : 
//=======================================================================
inline Handle(TColgp_HArray2OfPnt) AdvApprox_ApproxAFunction::Poles()
  const 
{ return  my3DPoles ; } 
//=======================================================================
//function : Degree
//purpose  : 
//=======================================================================

inline Standard_Integer AdvApprox_ApproxAFunction::Degree() const
{ return myDegree ; }
//=======================================================================
//function : NbKnots
//purpose  : 
//=======================================================================

inline Standard_Integer AdvApprox_ApproxAFunction::NbKnots() const
{ return myKnots->Length()  ; }
//=======================================================================
//function : Knots
//purpose  : 
//=======================================================================

inline Handle(TColStd_HArray1OfReal) AdvApprox_ApproxAFunction::Knots() const 
               
{ return myKnots ; } 
//=======================================================================
//function : Multiplicities
//purpose  : 
//=======================================================================

inline Handle(TColStd_HArray1OfInteger) 
AdvApprox_ApproxAFunction::Multiplicities() const 

{ return myMults ;} 

//=======================================================================
//function : NumSubSpaces
//purpose  : 
//=======================================================================

inline Standard_Integer AdvApprox_ApproxAFunction::NumSubSpaces(const Standard_Integer Dimension)  const 
{ if (Dimension < 1 || Dimension > 3) Standard_ConstructionError::Raise()  ;
  return myNumSubSpaces[Dimension-1] ; }
