// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _OSD_Real2String_HeaderFile
#define _OSD_Real2String_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_PCharacter_HeaderFile
#include <Standard_PCharacter.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif


//!  Convertion of CString to Real and reciprocally <br>
class OSD_Real2String  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   OSD_Real2String();
  
//!  Converts aReal into aCstring in exponential format with maximum <br>
//!  17 digits. The size of the destination string must be sufficient (at least 23 characters) <br>
//!  The decimal separator account for locale setting, but <br>
//!  neither thousand separator nor grouping of digits in the output string. <br>
//! <br>
  Standard_EXPORT     Standard_Boolean RealToCString(const Standard_Real aReal,Standard_PCharacter& aString) const;
  
//!  Converts aCstring representing a real. The first occurence of the decimal separator <br>
//!  (comma or period) defines it values for further readings. <br>
//!  Neither thousand separator nor grouping of digits are allowed in the CString <br>
  Standard_EXPORT     Standard_Boolean CStringToReal(const Standard_CString aString,Standard_Real& aReal) ;





protected:





private:



Standard_Character myReadDecimalPoint;
Standard_Character myLocalDecimalPoint;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
