// Created on: 1996-02-05
// Created by: Philippe MANGIN
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_NegativeValue.hxx>

inline Standard_OStream& operator<< (Standard_OStream& o, 
				     const FairCurve_Batten& Bat) 
{
  Bat.Dump(o);
  return o;
}

inline void FairCurve_Batten::SetFreeSliding(const Standard_Boolean FreeSliding)
{
  NewFreeSliding = FreeSliding;
}

inline void FairCurve_Batten::SetConstraintOrder1(const Standard_Integer ConstraintOrder)
{
  NewConstraintOrder1 = ConstraintOrder;
}

inline void FairCurve_Batten::SetConstraintOrder2(const Standard_Integer ConstraintOrder)
{
  NewConstraintOrder2 = ConstraintOrder;
}

inline void FairCurve_Batten::SetAngle1(const Standard_Real Angle1)
{
  NewAngle1 = Angle1;
}

inline void FairCurve_Batten::SetAngle2(const Standard_Real Angle2)
{
  NewAngle2 = Angle2;
}

 inline void FairCurve_Batten::SetHeight(const Standard_Real Height)
{
  if (Height <= 0) 
    Standard_NegativeValue::Raise("FairCurve : Height is no positive");  
  NewHeight = Height;
}

inline void FairCurve_Batten::SetSlope(const Standard_Real Slope)
{
  NewSlope = Slope;
}

inline void FairCurve_Batten::SetSlidingFactor(const Standard_Real SlidingFactor)
{
  NewSlidingFactor = SlidingFactor;
}

inline Standard_Boolean FairCurve_Batten::GetFreeSliding() const 
{
  return OldFreeSliding;
}

inline Standard_Integer FairCurve_Batten::GetConstraintOrder1() const 
{
  return OldConstraintOrder1;
}

inline Standard_Integer FairCurve_Batten::GetConstraintOrder2() const 
{
  return OldConstraintOrder2;
}

inline const gp_Pnt2d& FairCurve_Batten::GetP1() const 
{
  return OldP1;
}

inline const gp_Pnt2d& FairCurve_Batten::GetP2() const 
{
  return OldP2;
}

inline Standard_Real FairCurve_Batten::GetAngle1() const 
{
  return OldAngle1;
}

inline Standard_Real FairCurve_Batten::GetAngle2() const 
{
  return OldAngle2;
}

inline Standard_Real FairCurve_Batten::GetHeight() const 
{
  return OldHeight;
}

inline Standard_Real FairCurve_Batten::GetSlope() const 
{
  return OldSlope;
}

inline Standard_Real FairCurve_Batten::GetSlidingFactor() const 
{
  return OldSlidingFactor;
}

