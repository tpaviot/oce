// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPInt_Context_HeaderFile
#define _BOPInt_Context_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_BOPInt_Context_HeaderFile
#include <Handle_BOPInt_Context.hxx>
#endif

#ifndef _BOPCol_BaseAllocator_HeaderFile
#include <BOPCol_BaseAllocator.hxx>
#endif
#ifndef _BOPCol_DataMapOfShapeAddress_HeaderFile
#include <BOPCol_DataMapOfShapeAddress.hxx>
#endif
#ifndef _BOPCol_DataMapOfTransientAddress_HeaderFile
#include <BOPCol_DataMapOfTransientAddress.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_Geom_Curve_HeaderFile
#include <Handle_Geom_Curve.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _TopAbs_State_HeaderFile
#include <TopAbs_State.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class IntTools_FClass2d;
class TopoDS_Face;
class GeomAPI_ProjectPointOnSurf;
class GeomAPI_ProjectPointOnCurve;
class TopoDS_Edge;
class Geom_Curve;
class IntTools_SurfaceRangeLocalizeData;
class BRepClass3d_SolidClassifier;
class TopoDS_Solid;
class Geom2dHatch_Hatcher;
class gp_Pnt;
class TopoDS_Vertex;
class gp_Pnt2d;
class IntTools_Curve;



//!  The intersection Context contains geometrical <br>
//!  and topological toolkit (classifiers, projectors, etc). <br>
//!  The intersection Context is for caching the tools <br>
//!  to increase the performance. <br>
class BOPInt_Context : public MMgt_TShared {

public:

  
  Standard_EXPORT   BOPInt_Context();
Standard_EXPORT virtual  ~BOPInt_Context();
  
  Standard_EXPORT   BOPInt_Context(const BOPCol_BaseAllocator& theAllocator);
  
//! Returns a reference to point classifier <br>
//! for given face <br>
//! <br>
  Standard_EXPORT     IntTools_FClass2d& FClass2d(const TopoDS_Face& aF) ;
  
//! Returns a reference to point projector <br>
//! for given face <br>
//! <br>
  Standard_EXPORT     GeomAPI_ProjectPointOnSurf& ProjPS(const TopoDS_Face& aF) ;
  
//! Returns a reference to point projector <br>
//! for given edge <br>
//! <br>
  Standard_EXPORT     GeomAPI_ProjectPointOnCurve& ProjPC(const TopoDS_Edge& aE) ;
  
//! Returns a reference to point projector <br>
//! for given curve <br>
//! <br>
  Standard_EXPORT     GeomAPI_ProjectPointOnCurve& ProjPT(const Handle(Geom_Curve)& aC) ;
  
//! Returns a reference to surface localization data <br>
//! for given face <br>
  Standard_EXPORT     IntTools_SurfaceRangeLocalizeData& SurfaceData(const TopoDS_Face& aF) ;
  
//! Returns a reference to solid classifier <br>
//! for given solid <br>
//! <br>
  Standard_EXPORT     BRepClass3d_SolidClassifier& SolidClassifier(const TopoDS_Solid& aSolid) ;
  
//! Returns a reference to 2D hatcher <br>
//! for given face <br>
//! <br>
  Standard_EXPORT     Geom2dHatch_Hatcher& Hatcher(const TopoDS_Face& aF) ;
  
//! Computes parameter of the Point theP on <br>
//! the edge aE. <br>
//! Returns zero if the distance between point <br>
//! and edge is less than sum of tolerance value of edge and theTopP, <br>
//! otherwise and for following conditions returns <br>
//! negative value <br>
//! 1. the edge is degenerated (-1) <br>
//! 2. the edge does not contain 3d curve and pcurves (-2) <br>
//! 3. projection algorithm failed (-3) <br>
//! <br>
  Standard_EXPORT     Standard_Integer ComputePE(const gp_Pnt& theP,const Standard_Real theTolP,const TopoDS_Edge& theE,Standard_Real& theT) ;
  
//! Computes parameter of the vertex aV on <br>
//! the edge aE. <br>
//! Returns zero if the distance between vertex <br>
//! and edge is less than sum of tolerances, <br>
//! otherwise and for following conditions returns <br>
//! negative value <br>
//! 1. the edge is degenerated (-1) <br>
//! 2. the edge does not contain 3d curve and pcurves (-2) <br>
//! 3. projection algorithm failed (-3) <br>
//! <br>
//! Computes parameter aT of the vertex aV on <br>
//! the edge aE. <br>
//! Returns zero if the distance between vertex <br>
//! and edge is less than sum of tolerances, <br>
//! otherwise and for following conditions returns <br>
//! negative value <br>
//! 1. the edge is degenerated (-1) <br>
//! 2. the edge does not contain 3d curve and pcurves (-2) <br>
//! 3. projection algorithm failed (-3) <br>
//! <br>
//! Output parameters <br>
//! bToUpdateVertex - the flag that indicates whether the <br>
//! vertex tolerance should be modified or not <br>
//! aDist - the value of the distance between the vertex <br>
//! and the edge <br>
  Standard_EXPORT     Standard_Integer ComputeVE(const TopoDS_Vertex& aV,const TopoDS_Edge& aE,Standard_Real& aT) ;
  
//! Computes UV parameters of the vertex aV on face aF <br>
//! Returns zero if the distance between vertex and face is <br>
//! less than or equal the sum of tolerances and the projection <br>
//! point lays inside boundaries of the face. <br>
//! For following conditions returns negative value <br>
//! 1. projection algorithm failed (-1) <br>
//! 2. distance is more than sum of tolerances (-2) <br>
//! 3. projection point out or on the boundaries of face (-3) <br>
//! <br>
  Standard_EXPORT     Standard_Integer ComputeVF(const TopoDS_Vertex& aV,const TopoDS_Face& aF,Standard_Real& U,Standard_Real& V) ;
  
//! Returns the state of the point aP2D <br>
//! relative to face aF <br>
//! <br>
  Standard_EXPORT     TopAbs_State StatePointFace(const TopoDS_Face& aF,const gp_Pnt2d& aP2D) ;
  
//! Returns true if the point aP2D is <br>
//! inside the boundaries of the face aF, <br>
//! otherwise returns false <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsPointInFace(const TopoDS_Face& aF,const gp_Pnt2d& aP2D) ;
  
//! Returns true if the point aP2D is <br>
//! inside or on the boundaries of aF <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsPointInOnFace(const TopoDS_Face& aF,const gp_Pnt2d& aP2D) ;
  
//! Returns true if the distance between point aP3D <br>
//! and face aF is less or equal to tolerance aTol <br>
//! and projection point is inside or on the boundaries <br>
//! of the face aF <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsValidPointForFace(const gp_Pnt& aP3D,const TopoDS_Face& aF,const Standard_Real aTol) ;
  
//! Returns true if IsValidPointForFace returns true <br>
//! for both face aF1 and aF2 <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsValidPointForFaces(const gp_Pnt& aP3D,const TopoDS_Face& aF1,const TopoDS_Face& aF2,const Standard_Real aTol) ;
  
//! Returns true if IsValidPointForFace returns true <br>
//! for some 3d point that lay on the curve aIC bounded by <br>
//! parameters aT1 and aT2 <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsValidBlockForFace(const Standard_Real aT1,const Standard_Real aT2,const IntTools_Curve& aIC,const TopoDS_Face& aF,const Standard_Real aTol) ;
  
//! Returns true if IsValidBlockForFace returns true <br>
//! for both faces aF1 and aF2 <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsValidBlockForFaces(const Standard_Real aT1,const Standard_Real aT2,const IntTools_Curve& aIC,const TopoDS_Face& aF1,const TopoDS_Face& aF2,const Standard_Real aTol) ;
  
//! Computes parameter of the vertex aV on <br>
//! the curve aIC. <br>
//! Returns true if the distance between vertex and <br>
//! curve is less than sum of tolerance of aV and aTolC, <br>
//! otherwise or if projection algorithm failed <br>
//! returns false (in this case aT isn't significant) <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsVertexOnLine(const TopoDS_Vertex& aV,const IntTools_Curve& aIC,const Standard_Real aTolC,Standard_Real& aT) ;
  
//! Computes parameter of the vertex aV on <br>
//! the curve aIC. <br>
//! Returns true if the distance between vertex and <br>
//! curve is less than sum of tolerance of aV and aTolC, <br>
//! otherwise or if projection algorithm failed <br>
//! returns false (in this case aT isn't significant) <br>
//! <br>
  Standard_EXPORT     Standard_Boolean IsVertexOnLine(const TopoDS_Vertex& aV,const Standard_Real aTolV,const IntTools_Curve& aIC,const Standard_Real aTolC,Standard_Real& aT) ;
  
//! Computes parameter of the point aP on <br>
//! the edge aE. <br>
//! Returns false if projection algorithm failed <br>
//! other wiese returns true. <br>
//! <br>
  Standard_EXPORT     Standard_Boolean ProjectPointOnEdge(const gp_Pnt& aP,const TopoDS_Edge& aE,Standard_Real& aT) ;




  DEFINE_STANDARD_RTTI(BOPInt_Context)

protected:


BOPCol_BaseAllocator myAllocator;
BOPCol_DataMapOfShapeAddress myFClass2dMap;
BOPCol_DataMapOfShapeAddress myProjPSMap;
BOPCol_DataMapOfShapeAddress myProjPCMap;
BOPCol_DataMapOfShapeAddress mySClassMap;
BOPCol_DataMapOfTransientAddress myProjPTMap;
BOPCol_DataMapOfShapeAddress myHatcherMap;
BOPCol_DataMapOfShapeAddress myProjSDataMap;
Standard_Integer myCreateFlag;


private: 




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
