// Created on: 1992-01-20
// Created by: Remi GILET
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <gp_Vec2d.hxx>
#include <gp_Pnt2d.hxx>

GccIter_FunctionTanObl::
  GccIter_FunctionTanObl(const TheCurve& C      ,
			const gp_Dir2d& Dir    ) {
  TheCurv = C;
  TheDirection = Dir;
 }


Standard_Boolean GccIter_FunctionTanObl::
  Value (const Standard_Real  X    ,
	       Standard_Real& Fval ) {
  gp_Pnt2d Point;
  gp_Vec2d Vect;
  TheCurveTool::D1(TheCurv,X,Point,Vect);
  Standard_Real NormeD1 = Vect.Magnitude();
  Fval = TheDirection.XY().Crossed(Vect.XY())/NormeD1;
  return Standard_True;
}

Standard_Boolean GccIter_FunctionTanObl::
  Derivative (const Standard_Real  X     ,
	            Standard_Real& Deriv ) {
  gp_Pnt2d Point;
  gp_Vec2d Vec1;
  gp_Vec2d Vec2;
  TheCurveTool::D2(TheCurv,X,Point,Vec1,Vec2);
  Standard_Real NormeD1 = Vec1.Magnitude();
  Deriv = TheDirection.XY().Crossed(Vec2.XY())/NormeD1-
      Vec1.XY().Dot(Vec2.XY())*TheDirection.XY().Crossed(Vec1.XY())/NormeD1;
  return Standard_True;
}

Standard_Boolean GccIter_FunctionTanObl::
  Values (const Standard_Real  X     ,
	        Standard_Real& Fval  ,
	        Standard_Real& Deriv ) {
  gp_Pnt2d Point;
  gp_Vec2d Vec1;
  gp_Vec2d Vec2;
  TheCurveTool::D2(TheCurv,X,Point,Vec1,Vec2);
  Standard_Real NormeD1 = Vec1.Magnitude();
  Fval = TheDirection.XY().Crossed(Vec1.XY())/NormeD1;
  Deriv = TheDirection.XY().Crossed(Vec2.XY())/NormeD1-
      Vec1.XY().Dot(Vec2.XY())*TheDirection.XY().Crossed(Vec1.XY())/NormeD1;
  return Standard_True;
}

