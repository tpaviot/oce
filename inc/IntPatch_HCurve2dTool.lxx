// Created on: 1992-10-22
// Created by: Laurent BUCHARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <GeomAbs_CurveType.hxx>
#include <GeomAbs_Shape.hxx>

#include <gp_Vec2d.hxx>
#include <gp_Lin2d.hxx>
#include <gp_Circ2d.hxx>
#include <gp_Elips2d.hxx>
#include <gp_Parab2d.hxx>
#include <gp_Hypr2d.hxx>

#include <Handle_Geom2d_BezierCurve.hxx>
#include <Handle_Geom2d_BSplineCurve.hxx>

#include <TColStd_Array1OfReal.hxx>

#include <Adaptor2d_HCurve2d.hxx>


//============================================================
inline Standard_Real IntPatch_HCurve2dTool::FirstParameter (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->FirstParameter());
}
//============================================================
inline Standard_Real IntPatch_HCurve2dTool::LastParameter (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->LastParameter());
}
//============================================================
inline GeomAbs_Shape IntPatch_HCurve2dTool::Continuity (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Continuity());
}
//============================================================
inline Standard_Integer IntPatch_HCurve2dTool::NbIntervals(const Handle(Adaptor2d_HCurve2d)& C,const GeomAbs_Shape Sh) {
  return(C->NbIntervals(Sh));
}
//============================================================
inline void IntPatch_HCurve2dTool::Intervals(const Handle(Adaptor2d_HCurve2d)& C,
                                             TColStd_Array1OfReal& Tab,
                                             const GeomAbs_Shape Sh) {
  C->Intervals(Tab,Sh);
}
//============================================================
inline Standard_Boolean IntPatch_HCurve2dTool::IsClosed(const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->IsClosed());
}
//============================================================
inline Standard_Boolean IntPatch_HCurve2dTool::IsPeriodic(const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->IsPeriodic());
}
//============================================================
inline Standard_Real IntPatch_HCurve2dTool::Period(const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Period());
}
//============================================================
inline gp_Pnt2d IntPatch_HCurve2dTool::Value (const Handle(Adaptor2d_HCurve2d)& C,
                                              const Standard_Real U) {
  return(C->Value(U));
}
//============================================================
inline void IntPatch_HCurve2dTool::D0(const Handle(Adaptor2d_HCurve2d)& C,
                                      const Standard_Real U,
                                      gp_Pnt2d& P) {
  C->D0(U,P);
}
//============================================================
inline void IntPatch_HCurve2dTool::D1 (const Handle(Adaptor2d_HCurve2d)& C,
                                       const Standard_Real U,
                                       gp_Pnt2d& P,
                                       gp_Vec2d& T) {
  C->D1(U,P,T);
}
//============================================================
inline void IntPatch_HCurve2dTool::D2 (const Handle(Adaptor2d_HCurve2d)& C,
                                       const Standard_Real U,
                                       gp_Pnt2d& P,
                                       gp_Vec2d& T,
                                       gp_Vec2d& N) {
  C->D2(U,P,T,N);
}
//============================================================
inline void IntPatch_HCurve2dTool::D3 (const Handle(Adaptor2d_HCurve2d)& C,
                                       const Standard_Real U,
                                       gp_Pnt2d& P,
                                       gp_Vec2d& V1,
                                       gp_Vec2d& V2,
                                       gp_Vec2d& V3) {
  C->D3(U,P,V1,V2,V3);
}
//============================================================
inline gp_Vec2d IntPatch_HCurve2dTool::DN (const Handle(Adaptor2d_HCurve2d)& C,
                                           const Standard_Real U,
                                           const Standard_Integer N) {
  return(C->DN(U,N));
}
//============================================================
inline Standard_Real IntPatch_HCurve2dTool::Resolution(const Handle(Adaptor2d_HCurve2d)& C,
                                                       const Standard_Real R3d) {
  return(C->Resolution(R3d));
}
//============================================================
inline GeomAbs_CurveType IntPatch_HCurve2dTool::GetType(const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->GetType());
}
//============================================================
inline gp_Lin2d IntPatch_HCurve2dTool::Line (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Line());
}
//============================================================
inline gp_Circ2d IntPatch_HCurve2dTool::Circle (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Circle());
}
//============================================================
inline gp_Elips2d IntPatch_HCurve2dTool::Ellipse (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Ellipse());
}
//============================================================
inline gp_Parab2d IntPatch_HCurve2dTool::Parabola (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Parabola());
}
//============================================================
inline gp_Hypr2d IntPatch_HCurve2dTool::Hyperbola (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Hyperbola());
}
//============================================================
inline Handle(Geom2d_BezierCurve) IntPatch_HCurve2dTool::Bezier (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->Bezier());
}
//============================================================
inline Handle(Geom2d_BSplineCurve) IntPatch_HCurve2dTool::BSpline (const Handle(Adaptor2d_HCurve2d)& C) {
  return(C->BSpline());
}
//============================================================
