// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Message_ProgressScale.hxx>
#include <TCollection_HAsciiString.hxx>

//=======================================================================
//function : SetName
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetName (const Standard_CString name)
{
  if (name != 0)
    myScopes.ChangeValue(1).SetName ( name );
}
	
//=======================================================================
//function : SetName
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetName (const Handle(TCollection_HAsciiString) &name)
{
  if (!name.IsNull())
    myScopes.ChangeValue(1).SetName ( name );
}
	
//=======================================================================
//function : SetRange
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetRange (const Standard_Real min, 
                                                  const Standard_Real max)
{
  myScopes.ChangeValue(1).SetRange ( min, max );
}
	
//=======================================================================
//function : SetStep
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetStep (const Standard_Real step)
{
  myScopes.ChangeValue(1).SetStep ( step );
}
	
//=======================================================================
//function : SetInfinite
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetInfinite (const Standard_Boolean isInf)
{
  myScopes.ChangeValue(1).SetInfinite ( isInf );
}
    
//=======================================================================
//function : SetScale
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetScale (const Standard_CString name,
						  const Standard_Real min, 
						  const Standard_Real max, 
						  const Standard_Real step,
						  const Standard_Boolean isInf)
{
  SetName ( name );
  SetScale ( min, max, step, isInf );
}

//=======================================================================
//function : Increment
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::Increment ()
{
  Increment ( myScopes(1).GetStep() );
}

//=======================================================================
//function : Increment
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::Increment (const Standard_Real step)
{
  SetValue ( GetValue() + step );
}
    
//=======================================================================
//function : NewScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NewScope (const Standard_CString name)
{
  return NewScope ( name ? new TCollection_HAsciiString ( name ) : 0 );
}

//=======================================================================
//function : NewScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NewScope (const Handle(TCollection_HAsciiString) &name)
{
  return NewScope ( myScopes(1).GetStep(), name );
}

//=======================================================================
//function : NewScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NewScope (const Standard_Real span,
                                                              const Standard_CString name)
{
  return NewScope ( span, name ? new TCollection_HAsciiString ( name ) : 0 );
}

//=======================================================================
//function : NextScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NextScope (const Standard_CString name) 
{
  return NextScope ( myScopes.Length() >1 ? myScopes(1).GetStep() : 1., name );
}

//=======================================================================
//function : GetPosition
//purpose  : 
//=======================================================================

inline Standard_Real Message_ProgressIndicator::GetPosition () const
{
  return myPosition;
}
	
//=======================================================================
//function : GetNbScopes
//purpose  : 
//=======================================================================

inline Standard_Integer Message_ProgressIndicator::GetNbScopes () const
{
  return myScopes.Length();
}
    
//=======================================================================
//function : GetScope
//purpose  : 
//=======================================================================

inline const Message_ProgressScale &Message_ProgressIndicator::GetScope (const Standard_Integer index) const
{
  return myScopes(index);
}
