// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <Message_ProgressScale.hxx>
#include <TCollection_HAsciiString.hxx>

//=======================================================================
//function : SetName
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetName (const Standard_CString name)
{
  if (name != 0)
    myScopes.ChangeValue(1).SetName ( name );
}
	
//=======================================================================
//function : SetName
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetName (const Handle(TCollection_HAsciiString) &name)
{
  if (!name.IsNull())
    myScopes.ChangeValue(1).SetName ( name );
}
	
//=======================================================================
//function : SetRange
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetRange (const Standard_Real min, 
                                                  const Standard_Real max)
{
  myScopes.ChangeValue(1).SetRange ( min, max );
}
	
//=======================================================================
//function : SetStep
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetStep (const Standard_Real step)
{
  myScopes.ChangeValue(1).SetStep ( step );
}
	
//=======================================================================
//function : SetInfinite
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetInfinite (const Standard_Boolean isInf)
{
  myScopes.ChangeValue(1).SetInfinite ( isInf );
}
    
//=======================================================================
//function : SetScale
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::SetScale (const Standard_CString name,
						  const Standard_Real min, 
						  const Standard_Real max, 
						  const Standard_Real step,
						  const Standard_Boolean isInf)
{
  SetName ( name );
  SetScale ( min, max, step, isInf );
}

//=======================================================================
//function : Increment
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::Increment ()
{
  Increment ( myScopes(1).GetStep() );
}

//=======================================================================
//function : Increment
//purpose  : 
//=======================================================================

inline void Message_ProgressIndicator::Increment (const Standard_Real step)
{
  SetValue ( GetValue() + step );
}
    
//=======================================================================
//function : NewScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NewScope (const Standard_CString name)
{
  return NewScope ( name ? new TCollection_HAsciiString ( name ) : 0 );
}

//=======================================================================
//function : NewScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NewScope (const Handle(TCollection_HAsciiString) &name)
{
  return NewScope ( myScopes(1).GetStep(), name );
}

//=======================================================================
//function : NewScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NewScope (const Standard_Real span,
                                                              const Standard_CString name)
{
  return NewScope ( span, name ? new TCollection_HAsciiString ( name ) : 0 );
}

//=======================================================================
//function : NextScope
//purpose  : 
//=======================================================================

inline Standard_Boolean Message_ProgressIndicator::NextScope (const Standard_CString name) 
{
  return NextScope ( myScopes.Length() >1 ? myScopes(1).GetStep() : 1., name );
}

//=======================================================================
//function : GetPosition
//purpose  : 
//=======================================================================

inline Standard_Real Message_ProgressIndicator::GetPosition () const
{
  return myPosition;
}
	
//=======================================================================
//function : GetNbScopes
//purpose  : 
//=======================================================================

inline Standard_Integer Message_ProgressIndicator::GetNbScopes () const
{
  return myScopes.Length();
}
    
//=======================================================================
//function : GetScope
//purpose  : 
//=======================================================================

inline const Message_ProgressScale &Message_ProgressIndicator::GetScope (const Standard_Integer index) const
{
  return myScopes(index);
}
