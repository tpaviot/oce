// Created on: 1996-06-03
// Created by: Laurent BUCHARD
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//  Modified by skv - Wed Sep  3 15:33:17 2003 OCC578

#include <IntCurveSurface_IntersectionPoint.hxx>
#include <TopAbs_State.hxx>

//============================================================================
inline Standard_Boolean IntCurvesFace_Intersector::IsDone() const { 
  return(done);
}
//============================================================================
inline Standard_Integer IntCurvesFace_Intersector::NbPnt() const { 
  return(nbpnt);
}
//============================================================================
inline const gp_Pnt& IntCurvesFace_Intersector::Pnt(const Standard_Integer i ) const { 
  return(SeqPnt.Value(i).Pnt()); 
}
//============================================================================
inline Standard_Real IntCurvesFace_Intersector::UParameter(const Standard_Integer i) const { 
  return(SeqPnt.Value(i).U()); 
}
//============================================================================
inline Standard_Real IntCurvesFace_Intersector::VParameter(const Standard_Integer i) const { 
  return(SeqPnt.Value(i).V()); 
}
//============================================================================
inline Standard_Real IntCurvesFace_Intersector::WParameter(const Standard_Integer i) const { 
  return(SeqPnt.Value(i).W()); 
}
//============================================================================
inline IntCurveSurface_TransitionOnCurve IntCurvesFace_Intersector::Transition(const Standard_Integer i) const { 
  return(SeqPnt.Value(i).Transition()); 
}
//============================================================================
//  Modified by skv - Wed Sep  3 15:34:18 2003 OCC578 Begin
//  //inline TopAbs_State IntCurvesFace_Intersector::State(const Standard_Integer i) const { 
// inline TopAbs_State IntCurvesFace_Intersector::State(const Standard_Integer ) const { 
//   return(TopAbs_IN);
// }
inline TopAbs_State IntCurvesFace_Intersector::State(const Standard_Integer i) const { 
  return (mySeqState.Value(i) == 0) ? TopAbs_IN : TopAbs_ON;
}
//  Modified by skv - Wed Sep  3 15:34:20 2003 OCC578 End
//============================================================================
inline const TopoDS_Face&  IntCurvesFace_Intersector::Face() const { 
  return(face);
}
//============================================================================

