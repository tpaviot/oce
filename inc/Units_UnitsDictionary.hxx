// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Units_UnitsDictionary_HeaderFile
#define _Units_UnitsDictionary_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Units_UnitsDictionary_HeaderFile
#include <Handle_Units_UnitsDictionary.hxx>
#endif

#ifndef _Handle_TCollection_HAsciiString_HeaderFile
#include <Handle_TCollection_HAsciiString.hxx>
#endif
#ifndef _Standard_Time_HeaderFile
#include <Standard_Time.hxx>
#endif
#ifndef _Handle_Units_QuantitiesSequence_HeaderFile
#include <Handle_Units_QuantitiesSequence.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Units_Dimensions_HeaderFile
#include <Handle_Units_Dimensions.hxx>
#endif
class TCollection_HAsciiString;
class Units_QuantitiesSequence;
class TCollection_AsciiString;
class Units_Dimensions;


//! This class creates  a dictionary of all  the units <br>
//!          you want to know. <br>
class Units_UnitsDictionary : public MMgt_TShared {

public:

  //! Returns an empty instance of UnitsDictionary. <br>
  Standard_EXPORT   Units_UnitsDictionary();
  //! Returns a  UnitsDictionary object  which  contains the <br>
//!          sequence  of all   the  units  you want to   consider, <br>
//!          physical quantity by physical quantity. <br>
  Standard_EXPORT     void Creates(const Standard_CString afilename) ;
  //! Returns   the  head   of   the  sequence  of  physical <br>
//!          quantities. <br>
        Handle_Units_QuantitiesSequence Sequence() const;
  //! Returns true if there has been no  modification of the <br>
//!          file Units.dat  since the   creation of the dictionary <br>
//!          object, false otherwise. <br>
  Standard_EXPORT     Standard_Boolean UpToDate() const;
  //! Returns for <aquantity> the active unit. <br>
  Standard_EXPORT     TCollection_AsciiString ActiveUnit(const Standard_CString aquantity) const;
  //! Dumps only  the sequence   of  quantities without  the <br>
//!          units  if  <alevel> is  equal  to zero,  and  for each <br>
//!          quantity all the units stored if <alevel>  is equal to <br>
//!          one. <br>
        void Dump(const Standard_Integer alevel) const;
  //! Dumps  for a     designated  physical       dimensions <br>
//!          <adimensions> all the previously stored units. <br>
        void Dump(const Handle(Units_Dimensions)& adimensions) const;




  DEFINE_STANDARD_RTTI(Units_UnitsDictionary)

protected:




private: 


Handle_TCollection_HAsciiString thefilename;
Standard_Time thetime;
Handle_Units_QuantitiesSequence thequantitiessequence;


};


#include <Units_UnitsDictionary.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
