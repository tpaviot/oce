// Created on: 1995-10-21
// Created by: Andre LIEUTIER
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <gp_XY.hxx>
#include <gp_XYZ.hxx>

inline Standard_Real Plate_Plate::Polm(const gp_XY& point2d, const Standard_Integer iu, const Standard_Integer iv,
					const Standard_Integer idu, const Standard_Integer idv) const 
{
  if(idu>iu) return 0;
  if(idv>iv) return 0;
  Standard_Real u = point2d.X();
  Standard_Real v = point2d.Y();

  Standard_Real value = 1;

  Standard_Integer degu = iu - idu;
  Standard_Integer i ;
  for( i=0;i<degu;i++) value *= u;
  for(i=iu;i>degu;i--) value *= i;
    
  
  Standard_Integer degv = iv - idv;
  for(i=0;i<degv;i++) value *= v;
  for(i=iv;i>degv;i--) value *= i;


  // le produit par ddu[iu]*ddv[iv] n'est pas indispensable !! (il change
  // les valeurs claculles pour la partie coef polynomiaux de Sol
  // de telle facon que les methodes Evaluate et EvaluateDerivative donnent 
  //en theorie les memes valeurs. Toutefois, il nous semble que ce produit
  // ameliore le conditionnmenet de la matrice
  return value*ddu[iu]*ddv[iv];
  //return value; 
}

 inline Standard_Integer& Plate_Plate::Deru(const Standard_Integer index) const 
{
  return ((Standard_Integer *)deru)[index];
}

 inline Standard_Integer& Plate_Plate::Derv(const Standard_Integer index) const 
{
  return ((Standard_Integer *)derv)[index];
}

 inline gp_XYZ& Plate_Plate::Solution(const Standard_Integer index) const 
{
  return ((gp_XYZ *)solution)[index];
}

 inline gp_XY& Plate_Plate::Points(const Standard_Integer index) const 
{
  return ((gp_XY *)points)[index];
}


