// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _math_HeaderFile
#define _math_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
class math_Vector;
class math_Vector;
class math_IntegerVector;
class math_Matrix;
class math_Function;
class math_FunctionWithDerivative;
class math_MultipleVarFunction;
class math_MultipleVarFunctionWithGradient;
class math_MultipleVarFunctionWithHessian;
class math_FunctionSet;
class math_FunctionSetWithDerivatives;
class math_IntegerRandom;
class math_Gauss;
class math_GaussLeastSquare;
class math_SVD;
class math_DirectPolynomialRoots;
class math_FunctionRoots;
class math_BissecNewton;
class math_FunctionRoot;
class math_NewtonFunctionRoot;
class math_BracketedRoot;
class math_FunctionSetRoot;
class math_NewtonFunctionSetRoot;
class math_BracketMinimum;
class math_BrentMinimum;
class math_Powell;
class math_FRPR;
class math_BFGS;
class math_NewtonMinimum;
class math_Jacobi;
class math_GaussSingleIntegration;
class math_GaussMultipleIntegration;
class math_GaussSetIntegration;
class math_RealRandom;
class math_FunctionSample;
class math_FunctionAllRoots;
class math_Householder;
class math_Crout;
class math_Uzawa;
class math_TrigonometricFunctionRoots;
class math_KronrodSingleIntegration;
class math_EigenValuesSearcher;
class math_ComputeGaussPointsAndWeights;
class math_ComputeKronrodPointsAndWeights;
class math_ValueAndWeight;
class math_Array1OfValueAndWeight;
class math_CompareOfValueAndWeight;
class math_QuickSortOfValueAndWeight;
class math_SingleTab;
class math_DoubleTab;
class math_SingleTabOfReal;
class math_SingleTabOfInteger;
class math_DoubleTabOfReal;



class math  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   static  Standard_Integer GaussPointsMax() ;
  
  Standard_EXPORT   static  void GaussPoints(const Standard_Integer Index,math_Vector& Points) ;
  
  Standard_EXPORT   static  void GaussWeights(const Standard_Integer Index,math_Vector& Weights) ;
  //! Returns the maximal number of points for that the values <br>
//!          are stored in the table. If the number is greater then <br>
//!          KronrodPointsMax, the points will be computed. <br>
  Standard_EXPORT   static  Standard_Integer KronrodPointsMax() ;
  //! Returns a vector of Gauss points and a vector of their weights. <br>
//!          The difference with the <br>
//!          method GaussPoints is the following: <br>
//!            - the points are returned in increasing order. <br>
//!            - if Index is greater then GaussPointsMax, the points are <br>
//!              computed. <br>
//!          Returns Standard_True if Index is positive, Points' and Weights' <br>
//!          length is equal to Index, Points and Weights are successfully computed. <br>
  Standard_EXPORT   static  Standard_Boolean OrderedGaussPointsAndWeights(const Standard_Integer Index,math_Vector& Points,math_Vector& Weights) ;
  //! Returns a vector of Kronrod points and a vector of their <br>
//!          weights for Gauss-Kronrod computation method. <br>
//!          Index should be odd and greater then or equal to 3, <br>
//!          as the number of Kronrod points is equal to 2*N + 1, <br>
//!          where N is a number of Gauss points. Points and Weights should <br>
//!          have the size equal to Index. Each even element of Points <br>
//!          represents a Gauss point value of N-th Gauss quadrature. <br>
//!          The values from Index equal to 3 to 123 are stored in a <br>
//!          table (see the file math_Kronrod.cxx). If Index is greater, <br>
//!          then points and weights will be computed. Returns Standard_True <br>
//!          if Index is odd, it is equal to the size of Points and Weights <br>
//!          and the computation of Points and Weights is performed successfully. <br>
//!          Otherwise this method returns Standard_False. <br>
  Standard_EXPORT   static  Standard_Boolean KronrodPointsAndWeights(const Standard_Integer Index,math_Vector& Points,math_Vector& Weights) ;





protected:





private:




friend class math_Vector;
friend class math_IntegerVector;
friend class math_Matrix;
friend class math_Function;
friend class math_FunctionWithDerivative;
friend class math_MultipleVarFunction;
friend class math_MultipleVarFunctionWithGradient;
friend class math_MultipleVarFunctionWithHessian;
friend class math_FunctionSet;
friend class math_FunctionSetWithDerivatives;
friend class math_IntegerRandom;
friend class math_Gauss;
friend class math_GaussLeastSquare;
friend class math_SVD;
friend class math_DirectPolynomialRoots;
friend class math_FunctionRoots;
friend class math_BissecNewton;
friend class math_FunctionRoot;
friend class math_NewtonFunctionRoot;
friend class math_BracketedRoot;
friend class math_FunctionSetRoot;
friend class math_NewtonFunctionSetRoot;
friend class math_BracketMinimum;
friend class math_BrentMinimum;
friend class math_Powell;
friend class math_FRPR;
friend class math_BFGS;
friend class math_NewtonMinimum;
friend class math_Jacobi;
friend class math_GaussSingleIntegration;
friend class math_GaussMultipleIntegration;
friend class math_GaussSetIntegration;
friend class math_RealRandom;
friend class math_FunctionSample;
friend class math_FunctionAllRoots;
friend class math_Householder;
friend class math_Crout;
friend class math_Uzawa;
friend class math_TrigonometricFunctionRoots;
friend class math_KronrodSingleIntegration;
friend class math_EigenValuesSearcher;
friend class math_ComputeGaussPointsAndWeights;
friend class math_ComputeKronrodPointsAndWeights;
friend class math_ValueAndWeight;
friend class math_Array1OfValueAndWeight;
friend class math_CompareOfValueAndWeight;
friend class math_QuickSortOfValueAndWeight;
friend class math_SingleTab;
friend class math_DoubleTab;
friend class math_SingleTabOfReal;
friend class math_SingleTabOfInteger;
friend class math_DoubleTabOfReal;

};





// other Inline functions and methods (like "C++: function call" methods)


#endif
