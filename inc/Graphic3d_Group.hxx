// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Graphic3d_Group_HeaderFile
#define _Graphic3d_Group_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_Graphic3d_Group_HeaderFile
#include <Handle_Graphic3d_Group.hxx>
#endif

#ifndef _Graphic3d_CGroup_HeaderFile
#include <Graphic3d_CGroup.hxx>
#endif
#ifndef _Handle_Graphic3d_GraphicDriver_HeaderFile
#include <Handle_Graphic3d_GraphicDriver.hxx>
#endif
#ifndef _Graphic3d_CBitFields4_HeaderFile
#include <Graphic3d_CBitFields4.hxx>
#endif
#ifndef _Standard_Address_HeaderFile
#include <Standard_Address.hxx>
#endif
#ifndef _Graphic3d_CBounds_HeaderFile
#include <Graphic3d_CBounds.hxx>
#endif
#ifndef _Graphic3d_ListOfPArray_HeaderFile
#include <Graphic3d_ListOfPArray.hxx>
#endif
#ifndef _Graphic3d_ListIteratorOfListOfPArray_HeaderFile
#include <Graphic3d_ListIteratorOfListOfPArray.hxx>
#endif
#ifndef _Handle_TColStd_HArray1OfByte_HeaderFile
#include <Handle_TColStd_HArray1OfByte.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _MMgt_TShared_HeaderFile
#include <MMgt_TShared.hxx>
#endif
#ifndef _Handle_Graphic3d_Group_HeaderFile
#include <Handle_Graphic3d_Group.hxx>
#endif
#ifndef _Graphic3d_Structure_HeaderFile
#include <Graphic3d_Structure.hxx>
#endif
#ifndef _Handle_Graphic3d_Structure_HeaderFile
#include <Handle_Graphic3d_Structure.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectLine3d_HeaderFile
#include <Handle_Graphic3d_AspectLine3d.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectFillArea3d_HeaderFile
#include <Handle_Graphic3d_AspectFillArea3d.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectText3d_HeaderFile
#include <Handle_Graphic3d_AspectText3d.hxx>
#endif
#ifndef _Handle_Graphic3d_AspectMarker3d_HeaderFile
#include <Handle_Graphic3d_AspectMarker3d.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Graphic3d_TypeOfPolygon_HeaderFile
#include <Graphic3d_TypeOfPolygon.hxx>
#endif
#ifndef _Standard_CString_HeaderFile
#include <Standard_CString.hxx>
#endif
#ifndef _Quantity_PlaneAngle_HeaderFile
#include <Quantity_PlaneAngle.hxx>
#endif
#ifndef _Graphic3d_TextPath_HeaderFile
#include <Graphic3d_TextPath.hxx>
#endif
#ifndef _Graphic3d_HorizontalTextAlignment_HeaderFile
#include <Graphic3d_HorizontalTextAlignment.hxx>
#endif
#ifndef _Graphic3d_VerticalTextAlignment_HeaderFile
#include <Graphic3d_VerticalTextAlignment.hxx>
#endif
#ifndef _Handle_Graphic3d_ArrayOfPrimitives_HeaderFile
#include <Handle_Graphic3d_ArrayOfPrimitives.hxx>
#endif
#ifndef _Graphic3d_GroupAspect_HeaderFile
#include <Graphic3d_GroupAspect.hxx>
#endif
class Graphic3d_GraphicDriver;
class TColStd_HArray1OfByte;
class Graphic3d_GroupDefinitionError;
class Graphic3d_PickIdDefinitionError;
class Standard_OutOfRange;
class Graphic3d_Structure;
class Graphic3d_AspectLine3d;
class Graphic3d_AspectFillArea3d;
class Graphic3d_AspectText3d;
class Graphic3d_AspectMarker3d;
class Graphic3d_Vertex;
class Graphic3d_Array1OfVertex;
class Graphic3d_Vector;
class Graphic3d_Array1OfVertexN;
class Graphic3d_Array1OfVertexNT;
class TColStd_Array1OfInteger;
class Graphic3d_Array1OfVertexC;
class Graphic3d_Array2OfVertex;
class Graphic3d_Array2OfVertexN;
class Graphic3d_Array2OfVertexNT;
class Aspect_Array1OfEdge;
class Graphic3d_Array1OfVertexNC;
class TCollection_ExtendedString;
class Graphic3d_ArrayOfPrimitives;
class TColStd_Array1OfReal;


//! This class allows the definition of groups <br>
//!     of primitives inside of graphic objects (presentations). <br>
//!     A group contains the primitives and attributes <br>
//!     for which the range is limited to this group. <br>
//!     The primitives of a group can be globally suppressed. <br>
class Graphic3d_Group : public MMgt_TShared {

public:

  //! Creates a group in the structure <AStructure>. <br>
  Standard_EXPORT   Graphic3d_Group(const Handle(Graphic3d_Structure)& AStructure);
  //! Supress all primitives and attributes of <me>. <br>
  Standard_EXPORT     void Clear() ;
  //! Supress the group <me> in the structure. <br>
  Standard_EXPORT     void Destroy() ;
~Graphic3d_Group()
{
  Destroy();
}
  //! Supress the group <me> in the structure. <br>
//!  Warning: No more graphic operations in <me> after this call. <br>//! Modifies the current modelling transform persistence (pan, zoom or rotate) <br>//! Get the current modelling transform persistence (pan, zoom or rotate) <br>
  Standard_EXPORT     void Remove() ;
  //! Removes the context for all the line primitives <br>
//!      of the group. <br>
  Standard_EXPORT     void SetGroupPrimitivesAspect() ;
  //! Modifies the context for all the line primitives <br>
//!      of the group. <br>
  Standard_EXPORT     void SetGroupPrimitivesAspect(const Handle(Graphic3d_AspectLine3d)& CTX) ;
  //! Modifies the context for all the face primitives <br>
//!      of the group. <br>
  Standard_EXPORT     void SetGroupPrimitivesAspect(const Handle(Graphic3d_AspectFillArea3d)& CTX) ;
  //! Modifies the context for all the text primitives <br>
//!      of the group. <br>
  Standard_EXPORT     void SetGroupPrimitivesAspect(const Handle(Graphic3d_AspectText3d)& CTX) ;
  //! Modifies the context for all the marker primitives <br>
//!      of the group. <br>
  Standard_EXPORT     void SetGroupPrimitivesAspect(const Handle(Graphic3d_AspectMarker3d)& CTX) ;
  //! Modifies the current context of the group to give <br>
//!      another aspect for all the line primitives created <br>
//!      after this call in the group. <br>
  Standard_EXPORT     void SetPrimitivesAspect(const Handle(Graphic3d_AspectLine3d)& CTX) ;
  //! Modifies the current context of the group to give <br>
//!      another aspect for all the face primitives created <br>
//!      after this call in the group. <br>
  Standard_EXPORT     void SetPrimitivesAspect(const Handle(Graphic3d_AspectFillArea3d)& CTX) ;
  //! Modifies the current context of the group to give <br>
//!      another aspect for all the text primitives created <br>
//!      after this call in the group. <br>
  Standard_EXPORT     void SetPrimitivesAspect(const Handle(Graphic3d_AspectText3d)& CTX) ;
  //! Modifies the current context of the group to give <br>
//!      another aspect for all the marker primitives created <br>
//!      after this call in the group. <br>
  Standard_EXPORT     void SetPrimitivesAspect(const Handle(Graphic3d_AspectMarker3d)& CTX) ;
  //! Sets the coordinates of the boundary box of the <br>
//!      group <me>. <br>
  Standard_EXPORT     void SetMinMaxValues(const Standard_Real XMin,const Standard_Real YMin,const Standard_Real ZMin,const Standard_Real XMax,const Standard_Real YMax,const Standard_Real ZMax) ;
  //! Returns the pick identifier of the group <me>. <br>
//!  Category: Methods to manage the pick identifier <br>
//!  Warning: Returns 0 if the pick identifier is not defined. <br>
  Standard_EXPORT     Standard_Integer PickId() const;
  //! Removes the pick identifier of the group <me>. <br>
//!  Category: Methods to manage the pick identifier <br>
//!  Warning: Now the Pick Identifier is null. <br>
  Standard_EXPORT     void RemovePickId() ;
  //! Places a pick identifier in the group <me>. <br>
//!  Category: Methods to manage the pick identifier <br>
//!  Warning: A Pick Identifier is an integer greater than zero. <br>
//!     Raises PickIdDefinitionError if <Id> is a negative value. <br>
  Standard_EXPORT     void SetPickId(const Standard_Integer Id) ;
  //! Creates a marker in position <APoint> which will be drawn <br>
//!      with the current attribute (AspectMarker). <br>
  Standard_EXPORT     void Marker(const Graphic3d_Vertex& APoint,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of markers defined by a table of <br>
//!     vertices. <br>
  Standard_EXPORT     void MarkerSet(const Graphic3d_Array1OfVertex& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a face drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
  Standard_EXPORT     void Polygon(const Graphic3d_Array1OfVertex& ListVertex,const Graphic3d_TypeOfPolygon AType = Graphic3d_TOP_CONVEX,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a face drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      The normal to the polygon is defined normalised. <br>
  Standard_EXPORT     void Polygon(const Graphic3d_Array1OfVertex& ListVertex,const Graphic3d_Vector& Normal,const Graphic3d_TypeOfPolygon AType = Graphic3d_TOP_CONVEX,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a face drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      The normal is defined and normalised for each vertex. <br>
  Standard_EXPORT     void Polygon(const Graphic3d_Array1OfVertexN& ListVertex,const Graphic3d_TypeOfPolygon AType = Graphic3d_TOP_CONVEX,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a face drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      The normal is defined for each vertex. <br>
//!      The normal to the polygon is defined normalised. <br>
  Standard_EXPORT     void Polygon(const Graphic3d_Array1OfVertexN& ListVertex,const Graphic3d_Vector& Normal,const Graphic3d_TypeOfPolygon AType = Graphic3d_TOP_CONVEX,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a face drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicated. <br>
//!      The normal is defined and normalised for each vertex. <br>
//!          The texture coordinate is defined for each vertex. <br>
  Standard_EXPORT     void Polygon(const Graphic3d_Array1OfVertexNT& ListVertex,const Graphic3d_TypeOfPolygon AType = Graphic3d_TOP_CONVEX,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a face with holes. <br>
//!      The face is described by the total number <br>
//!      of vertices on the external contour and around the holes, <br>
//!      and by the list of vertices. <br>
//!      The face will be drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      Bounds : total number of interior and exterior vertices <br>
//!      ListVertex : a list of the interior and exterior vertices <br>
  Standard_EXPORT     void Polygon(const TColStd_Array1OfInteger& Bounds,const Graphic3d_Array1OfVertex& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a face with holes. <br>
//!      The face is described by the total number <br>
//!      of vertices on the external contour and around the holes, <br>
//!      and by the list of vertices. <br>
//!      The face will be drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      The normal to the polygon is normalised. <br>
//!      Bounds : total number of interior and exterior vertices <br>
//!      ListVertex : a list of the interior and exterior vertices <br>
  Standard_EXPORT     void Polygon(const TColStd_Array1OfInteger& Bounds,const Graphic3d_Array1OfVertex& ListVertex,const Graphic3d_Vector& Normal,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a face with holes. <br>
//!      The face is described by the total number <br>
//!      of vertices on the external contour and around the holes, <br>
//!      and by the list of vertices. <br>
//!      The face will be drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      Bounds : total number of interior and exterior vertices <br>
//!      ListVertex : a list of the interior and exterior vertices <br>
  Standard_EXPORT     void Polygon(const TColStd_Array1OfInteger& Bounds,const Graphic3d_Array1OfVertexN& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a face with holes. <br>
//!      The face is described by the total number <br>
//!      of vertices on the external contour and around the holes, <br>
//!      and by the list of vertices. <br>
//!      The face will be drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
//!      The normal to the polygon is normalised. <br>
//!      Bounds : total number of interior and exterior vertices <br>
//!      ListVertex : a list of the interior and exterior vertices <br>
  Standard_EXPORT     void Polygon(const TColStd_Array1OfInteger& Bounds,const Graphic3d_Array1OfVertexN& ListVertex,const Graphic3d_Vector& Normal,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a set of face drawn <br>
//!      using the current fill attributes (AspectFillArea3d)) <br>
//!      The first and last points are not duplicates. <br>
  Standard_EXPORT     void PolygonSet(const TColStd_Array1OfInteger& Bounds,const Graphic3d_Array1OfVertex& ListVertex,const Graphic3d_TypeOfPolygon AType = Graphic3d_TOP_CONVEX,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a line drawn <br>
//!      using the current line attributes (AspectLine) <br>
  Standard_EXPORT     void Polyline(const Graphic3d_Vertex& APT1,const Graphic3d_Vertex& APT2,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a line drawn <br>
//!      using the current line attributes (AspectLine) <br>
  Standard_EXPORT     void Polyline(const Graphic3d_Array1OfVertex& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Links up points to create a line drawn <br>
//!      using the current line attributes (AspectLine) <br>
//!      except for the colour which is defined <br>
//!      for each vertex. <br>
  Standard_EXPORT     void Polyline(const Graphic3d_Array1OfVertexC& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrilaterals from a list of <br>
//!      points, such that their vertices are: <br>
//!      Ki,j; Ki,j+1; Ki+1,j+1; Ki+1,j. <br>
//!      The quadrilaterals will be drawn according to the <br>
//!      current attributes (AspectFillArea3d). <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points. <br>
  Standard_EXPORT     void QuadrangleMesh(const Graphic3d_Array2OfVertex& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrilaterals from a list of <br>
//!      points, such that their vertices are: <br>
//!      Ki,j; Ki,j+1; Ki+1,j+1; Ki+1,j. <br>
//!      The quadrilaterals will be drawn according to the <br>
//!      current attributes (AspectFillArea3d). <br>
//!      For each vertex the normal is given. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points. <br>
  Standard_EXPORT     void QuadrangleMesh(const Graphic3d_Array2OfVertexN& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrilaterals from a list of <br>
//!      points, such that their vertices are: <br>
//!      Ki,j; Ki,j+1; Ki+1,j+1; Ki+1,j. <br>
//!      The quadrilaterals will be drawn according to the <br>
//!      current attributes (AspectFillArea3d). <br>
//!      For each vertex the normal is given. <br>
//!      For each vertex a texture coordinate is given. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points. <br>
  Standard_EXPORT     void QuadrangleMesh(const Graphic3d_Array2OfVertexNT& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points or if <ListEdge> contains <br>
//!      less than four edges. <br>
  Standard_EXPORT     void QuadrangleSet(const Graphic3d_Array1OfVertex& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the normal is given. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points or if <ListEdge> contains <br>
//!      less than four edges. <br>
  Standard_EXPORT     void QuadrangleSet(const Graphic3d_Array1OfVertexN& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the normal is given. <br>
//!      For each vertex a texture coordinate is given. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points or if <ListEdge> contains <br>
//!      less than four edges. <br>
  Standard_EXPORT     void QuadrangleSet(const Graphic3d_Array1OfVertexNT& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the color is given. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points or if <ListEdge> contains <br>
//!      less than four edges. <br>
  Standard_EXPORT     void QuadrangleSet(const Graphic3d_Array1OfVertexC& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of quadrangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the normal and the color are given. <br>
//!  Category: Methods to create Quadrangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than four points or if <ListEdge> contains <br>
//!      less than four edges. <br>
  Standard_EXPORT     void QuadrangleSet(const Graphic3d_Array1OfVertexNC& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates the string <AText> at position <APoint>. <br>
//!      The 3D point of attachment is projected. The text is <br>
//!      written in the plane of projection. <br>
//!      The attributes are given with respect to the plane of <br>
//!      projection. <br>
//!      AHeight : Height of text. <br>
//!            (Relative to the Normalized Projection <br>
//!              Coordinates (NPC) Space). <br>
//!      AAngle  : Orientation of the text <br>
//!            (with respect to the horizontal). <br>
  Standard_EXPORT     void Text(const Standard_CString AText,const Graphic3d_Vertex& APoint,const Standard_Real AHeight,const Quantity_PlaneAngle AAngle,const Graphic3d_TextPath ATp,const Graphic3d_HorizontalTextAlignment AHta,const Graphic3d_VerticalTextAlignment AVta,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates the string <AText> at position <APoint>. <br>
//!      The 3D point of attachment is projected. The text is <br>
//!      written in the plane of projection. <br>
//!      The attributes are given with respect to the plane of <br>
//!      projection. <br>
//!      AHeight : Height of text. <br>
//!            (Relative to the Normalized Projection <br>
//!              Coordinates (NPC) Space). <br>
//!      The other attributes have the following default values: <br>
//!      AAngle  : PI / 2. <br>
//!      ATp     : TP_RIGHT <br>
//!      AHta    : HTA_LEFT <br>
//!      AVta    : VTA_BOTTOM <br>
  Standard_EXPORT     void Text(const Standard_CString AText,const Graphic3d_Vertex& APoint,const Standard_Real AHeight,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates the string <AText> at position <APoint>. <br>
//!      The 3D point of attachment is projected. The text is <br>
//!      written in the plane of projection. <br>
//!      The attributes are given with respect to the plane of <br>
//!      projection. <br>
//!      AHeight : Height of text. <br>
//!            (Relative to the Normalized Projection <br>
//!              Coordinates (NPC) Space). <br>
//!      AAngle  : Orientation of the text <br>
//!            (with respect to the horizontal). <br>
  Standard_EXPORT     void Text(const TCollection_ExtendedString& AText,const Graphic3d_Vertex& APoint,const Standard_Real AHeight,const Quantity_PlaneAngle AAngle,const Graphic3d_TextPath ATp,const Graphic3d_HorizontalTextAlignment AHta,const Graphic3d_VerticalTextAlignment AVta,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates the string <AText> at position <APoint>. <br>
//!      The 3D point of attachment is projected. The text is <br>
//!      written in the plane of projection. <br>
//!      The attributes are given with respect to the plane of <br>
//!      projection. <br>
//!      AHeight : Height of text. <br>
//!            (Relative to the Normalized Projection <br>
//!              Coordinates (NPC) Space). <br>
//!      The other attributes have the following default values: <br>
//!      AAngle  : PI / 2. <br>
//!      ATp     : TP_RIGHT <br>
//!      AHta    : HTA_LEFT <br>
//!      AVta    : VTA_BOTTOM <br>
  Standard_EXPORT     void Text(const TCollection_ExtendedString& AText,const Graphic3d_Vertex& APoint,const Standard_Real AHeight,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates triangles from an array of points such that <br>
//!      the Kth triangle contains the vertices K, K+1, K+2. <br>
//!      The triangle will be drawn using the current fill <br>
//!      attributes (AspectFillArea3d) <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points. <br>
  Standard_EXPORT     void TriangleMesh(const Graphic3d_Array1OfVertex& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates triangles from an array of points such that <br>
//!      the Kth triangle contains the vertices K, K+1, K+2. <br>
//!      The triangle will be drawn using the current fill <br>
//!      attributes (AspectFillArea3d) <br>
//!      The normal is given for each vertex. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points. <br>
  Standard_EXPORT     void TriangleMesh(const Graphic3d_Array1OfVertexN& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates triangles from an array of points such that <br>
//!      the Kth triangle contains the vertices K, K+1, K+2. <br>
//!      The triangle will be drawn using the current fill <br>
//!      attributes (AspectFillArea3d) <br>
//!      The normal is given for each vertex. <br>
//!      A texture coordinate is given for each vertex. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points. <br>
  Standard_EXPORT     void TriangleMesh(const Graphic3d_Array1OfVertexNT& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of triangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points or if <ListEdge> contains <br>
//!      less than three edges. <br>
  Standard_EXPORT     void TriangleSet(const Graphic3d_Array1OfVertex& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of triangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the normal is given. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points or if <ListEdge> contains <br>
//!      less than three edges. <br>
  Standard_EXPORT     void TriangleSet(const Graphic3d_Array1OfVertexN& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of triangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the normal is given. <br>
//!      For each vertex a texture coordinate is given. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points or if <ListEdge> contains <br>
//!      less than three edges. <br>
  Standard_EXPORT     void TriangleSet(const Graphic3d_Array1OfVertexNT& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of triangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the color is given. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points or if <ListEdge> contains <br>
//!      less than three edges. <br>
  Standard_EXPORT     void TriangleSet(const Graphic3d_Array1OfVertexC& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a group of triangles defined by a table of <br>
//!      vertices and a table of edges, visible or not. <br>
//!      For each vertex the normal and the color are given. <br>
//!  Category: Methods to create Triangle <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than three points or if <ListEdge> contains <br>
//!      less than three edges. <br>
  Standard_EXPORT     void TriangleSet(const Graphic3d_Array1OfVertexNC& ListVertex,const Aspect_Array1OfEdge& ListEdge,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Adds an array of primitives for display <br>
  Standard_EXPORT     void AddPrimitiveArray(const Handle(Graphic3d_ArrayOfPrimitives)& elem,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Remove the array of primitives of rank <aRank> <br>
  Standard_EXPORT     void RemovePrimitiveArray(const Standard_Integer aRank) ;
  //! Remove all array of primitives <br>
  Standard_EXPORT     void RemovePrimitiveArrays() ;
  //! Creates an UserDraw primitive <br>
//!  Category: Methods to create UserDraw <br>
//!  Warning: Raises GroupDefinitionError if ... <br>
  Standard_EXPORT     void UserDraw(const Standard_Address AnObject,const Standard_Boolean EvalMinMax = Standard_True,const Standard_Boolean ContainsFacet = Standard_False) ;
  //! Returns the number of primitive array added in this group <br>
  Standard_EXPORT     Standard_Integer ArrayNumber() const;
  //! Initialize the array list iterator. <br>
  Standard_EXPORT     void InitDefinedArray() ;
  //! Increments the array list iterator. <br>
  Standard_EXPORT     void NextDefinedArray() ;
  //! Returns TRUE if more array exists in the list. <br>
  Standard_EXPORT     Standard_Boolean MoreDefinedArray() ;
  //! Returns the current array of primitives according <br>
//! to the array list iterator value. <br>
  Standard_EXPORT     Handle_Graphic3d_ArrayOfPrimitives DefinedArray() const;
  //! Returns TRUE if aspect is set for the group. <br>
  Standard_EXPORT     Standard_Boolean IsGroupPrimitivesAspectSet(const Graphic3d_GroupAspect theAspect) const;
  //! Returns the context of all the primitives of the group. <br>
  Standard_EXPORT     void GroupPrimitivesAspect(const Handle(Graphic3d_AspectLine3d)& CTXL,const Handle(Graphic3d_AspectText3d)& CTXT,const Handle(Graphic3d_AspectMarker3d)& CTXM,const Handle(Graphic3d_AspectFillArea3d)& CTXF) const;
  //! Returns the last inserted context in the group <me> <br>
//!	    foreach kind of primitives. <br>
  Standard_EXPORT     void PrimitivesAspect(const Handle(Graphic3d_AspectLine3d)& CTXL,const Handle(Graphic3d_AspectText3d)& CTXT,const Handle(Graphic3d_AspectMarker3d)& CTXM,const Handle(Graphic3d_AspectFillArea3d)& CTXF) const;
  //! Returns Standard_True if the group <me> contains <br>
//!      Polygons, Triangles or Quadrangles. <br>
  Standard_EXPORT     Standard_Boolean ContainsFacet() const;
  //! Returns Standard_True if the group <me> is deleted. <br>
//!      <me> is deleted after the call Remove (me) or the <br>
//!      associated structure is deleted. <br>
  Standard_EXPORT     Standard_Boolean IsDeleted() const;
  //! Returns Standard_True if the group <me> is empty. <br>
  Standard_EXPORT     Standard_Boolean IsEmpty() const;
  //! Returns the coordinates of the boundary box of the <br>
//!      group <me>. <br>
  Standard_EXPORT     void MinMaxValues(Standard_Real& XMin,Standard_Real& YMin,Standard_Real& ZMin,Standard_Real& XMax,Standard_Real& YMax,Standard_Real& ZMax) const;
  //! Returns the structure containing the group <me>. <br>
  Standard_EXPORT     Handle_Graphic3d_Structure Structure() const;
  //! Prints informations about the group <me>. <br>
  Standard_EXPORT     void Exploration() const;
  
  Standard_EXPORT     void BeginPrimitives() ;
  
  Standard_EXPORT     void EndPrimitives() ;
  //! Creates a non rational Bezier curve with a set of poles : <br>
//!      ListVertex. The weights are defaulted to all being 1. <br>
//!  Category: Methods to create Curve <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than two points. <br>
  Standard_EXPORT     void Bezier(const Graphic3d_Array1OfVertex& ListVertex,const Standard_Boolean EvalMinMax = Standard_True) ;
  //! Creates a non rational Bezier curve with a set of poles : <br>
//!      ListVertex and the set of weights ListWeight. <br>
//!      If all the weights are identical the curve is considered <br>
//!      as non rational. <br>
//!  Category: Methods to create Curve <br>
//!  Warning: Raises GroupDefinitionError if <ListVertex> contains <br>
//!      less than two points or <ListVertex> and <ListWeight> <br>
//!      have not the same length or one weight value is lower <br>
//!      or equal to Resolution from package gp. <br>
  Standard_EXPORT     void Bezier(const Graphic3d_Array1OfVertex& ListVertex,const TColStd_Array1OfReal& ListWeight,const Standard_Boolean EvalMinMax = Standard_True) ;

friend   //! Suppress in the structure <me>, the group <AGroup>. <br>
//!	    It will be erased at the next screen update. <br>
  Standard_EXPORT   void Graphic3d_Structure::Remove(const Handle(Graphic3d_Group)& AGroup) ;


  DEFINE_STANDARD_RTTI(Graphic3d_Group)

protected:




private: 

  //! Returns the position of the group in the structure. <br>
  Standard_EXPORT     void Labels(Standard_Integer& LB,Standard_Integer& LE) const;
  //! Returns the extreme coordinates found in the group. <br>
  Standard_EXPORT     void MinMaxCoord(Standard_Real& XMin,Standard_Real& YMin,Standard_Real& ZMin,Standard_Real& XMax,Standard_Real& YMax,Standard_Real& ZMax) const;
  //! Calls the Update method of the StructureManager which <br>
//!      contains the associated Structure of the Group <me>. <br>
  Standard_EXPORT     void Update() const;

Graphic3d_CGroup MyCGroup;
Handle_Graphic3d_GraphicDriver MyGraphicDriver;
Graphic3d_CBitFields4 MyCBitFields;
Standard_Address MyPtrStructure;
Graphic3d_CBounds MyBounds;
Graphic3d_ListOfPArray MyListOfPArray;
Graphic3d_ListIteratorOfListOfPArray MyListOfPArrayIterator;
Handle_TColStd_HArray1OfByte MyMarkArray;
Standard_Integer MyMarkWidth;
Standard_Integer MyMarkHeight;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
