// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _TopOpeBRep_FaceEdgeFiller_HeaderFile
#define _TopOpeBRep_FaceEdgeFiller_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_TopOpeBRepDS_HDataStructure_HeaderFile
#include <Handle_TopOpeBRepDS_HDataStructure.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_TopOpeBRepDS_Interference_HeaderFile
#include <Handle_TopOpeBRepDS_Interference.hxx>
#endif
class TopoDS_Shape;
class TopOpeBRep_FaceEdgeIntersector;
class TopOpeBRepDS_HDataStructure;
class TopOpeBRepDS_ListIteratorOfListOfInterference;
class TopOpeBRepDS_Point;
class TopOpeBRepDS_DataStructure;
class TopOpeBRepDS_ListOfInterference;
class TopOpeBRepDS_Interference;



class TopOpeBRep_FaceEdgeFiller  {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   TopOpeBRep_FaceEdgeFiller();
  
  Standard_EXPORT     void Insert(const TopoDS_Shape& F,const TopoDS_Shape& E,TopOpeBRep_FaceEdgeIntersector& FEINT,const Handle(TopOpeBRepDS_HDataStructure)& HDS) ;





protected:





private:

  
//! Search, among a list of interferences accessed by the iterator <br>
//! <IT>, a geometry <G> whose 3D point is identical to the 3D point <br>
//! of the TheDSPoint <DSP>. <br>
//! returns True if such an interference has been found, False else. <br>
//! if True, iterator It points (by the Value() method) on the first <br>
//! interference accessing an identical 3D point. <br>
  Standard_EXPORT     Standard_Boolean ScanInterfList(TopOpeBRepDS_ListIteratorOfListOfInterference& IT,const TopOpeBRepDS_Point& DSP,const TopOpeBRepDS_DataStructure& BDS) const;
  
//! Search for an interference in list <IT> which 3D geometry <br>
//! equals 3D geometry of the current intersection of <EI>. <br>
//! The search is performed by ScanInterfList. <br>
//! if found, set <G> to the geometry of the interference found. <br>
//! returns found. <br>
  Standard_EXPORT     Standard_Boolean GetGeometry(TopOpeBRepDS_ListIteratorOfListOfInterference& IT,const TopOpeBRep_FaceEdgeIntersector& EI,Standard_Integer& G,const TopOpeBRepDS_DataStructure& DS) const;
  
  Standard_EXPORT     Standard_Integer MakeGeometry(TopOpeBRep_FaceEdgeIntersector& EI,TopOpeBRepDS_DataStructure& DS) const;
  
//! Get the geometry of a DS point <DSP>. <br>
//! First, search it with ScanInterfList (previous method). <br>
//! if found, set <G> to the geometry of the interference found. <br>
//! else, add the point <DSP> in the <DS> and set <G> to the <br>
//! value of the new geometry such created. <br>
//! <br>
//! returns the value of ScanInterfList(). <br>
  Standard_EXPORT     Standard_Boolean GetGeometry(const TopOpeBRepDS_ListOfInterference& L,const TopOpeBRepDS_Point& DSP,Standard_Integer& G,TopOpeBRepDS_DataStructure& DS) const;
  
//! Add interference <I> to list <LI>. <br>
//! Add <I> to the interference list of <I> geometry (via <BDS>). <br>
  Standard_EXPORT     void StoreInterference(const Handle(TopOpeBRepDS_Interference)& I,TopOpeBRepDS_ListOfInterference& LI,TopOpeBRepDS_DataStructure& BDS) const;




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
