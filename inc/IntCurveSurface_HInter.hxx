// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _IntCurveSurface_HInter_HeaderFile
#define _IntCurveSurface_HInter_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _IntCurveSurface_Intersection_HeaderFile
#include <IntCurveSurface_Intersection.hxx>
#endif
#ifndef _Handle_Adaptor3d_HCurve_HeaderFile
#include <Handle_Adaptor3d_HCurve.hxx>
#endif
#ifndef _Handle_Adaptor3d_HSurface_HeaderFile
#include <Handle_Adaptor3d_HSurface.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class Adaptor3d_HCurve;
class IntCurveSurface_TheHCurveTool;
class Adaptor3d_HSurface;
class Adaptor3d_HSurfaceTool;
class IntCurveSurface_ThePolygonOfHInter;
class IntCurveSurface_ThePolygonToolOfHInter;
class IntCurveSurface_ThePolyhedronOfHInter;
class IntCurveSurface_ThePolyhedronToolOfHInter;
class IntCurveSurface_TheInterferenceOfHInter;
class IntCurveSurface_TheCSFunctionOfHInter;
class IntCurveSurface_TheExactHInter;
class IntCurveSurface_TheQuadCurvExactHInter;
class IntCurveSurface_TheQuadCurvFuncOfTheQuadCurvExactHInter;
class Bnd_BoundSortBox;
class gp_Lin;
class gp_Circ;
class gp_Elips;
class gp_Parab;
class gp_Hypr;
class IntAna_IntConicQuad;
class TColgp_Array2OfPnt;
class Bnd_Box;
class TColStd_Array1OfReal;



class IntCurveSurface_HInter  : public IntCurveSurface_Intersection {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   IntCurveSurface_HInter();
  
  Standard_EXPORT     void Perform(const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface) ;
  
  Standard_EXPORT     void Perform(const Handle(Adaptor3d_HCurve)& Curve,const IntCurveSurface_ThePolygonOfHInter& Polygon,const Handle(Adaptor3d_HSurface)& Surface) ;
  
  Standard_EXPORT     void Perform(const Handle(Adaptor3d_HCurve)& Curve,const IntCurveSurface_ThePolygonOfHInter& ThePolygon,const Handle(Adaptor3d_HSurface)& Surface,const IntCurveSurface_ThePolyhedronOfHInter& Polyhedron) ;
  
  Standard_EXPORT     void Perform(const Handle(Adaptor3d_HCurve)& Curve,const IntCurveSurface_ThePolygonOfHInter& ThePolygon,const Handle(Adaptor3d_HSurface)& Surface,const IntCurveSurface_ThePolyhedronOfHInter& Polyhedron,Bnd_BoundSortBox& BndBSB) ;
  
  Standard_EXPORT     void Perform(const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const IntCurveSurface_ThePolyhedronOfHInter& Polyhedron) ;





protected:

  
  Standard_EXPORT     void Perform(const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U0,const Standard_Real V0,const Standard_Real U1,const Standard_Real V1) ;
  
  Standard_EXPORT     void InternalPerformCurveQuadric(const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface) ;
  
  Standard_EXPORT     void InternalPerform(const Handle(Adaptor3d_HCurve)& Curve,const IntCurveSurface_ThePolygonOfHInter& Polygon,const Handle(Adaptor3d_HSurface)& Surface,const IntCurveSurface_ThePolyhedronOfHInter& Polyhedron,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void InternalPerform(const Handle(Adaptor3d_HCurve)& Curve,const IntCurveSurface_ThePolygonOfHInter& Polygon,const Handle(Adaptor3d_HSurface)& Surface,const IntCurveSurface_ThePolyhedronOfHInter& Polyhedron,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2,Bnd_BoundSortBox& BSB) ;
  
  Standard_EXPORT     void InternalPerform(const Handle(Adaptor3d_HCurve)& Curve,const IntCurveSurface_ThePolygonOfHInter& Polygon,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void PerformConicSurf(const gp_Lin& Line,const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void PerformConicSurf(const gp_Circ& Circle,const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void PerformConicSurf(const gp_Elips& Ellipse,const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void PerformConicSurf(const gp_Parab& Parab,const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void PerformConicSurf(const gp_Hypr& Hyper,const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real U1,const Standard_Real V1,const Standard_Real U2,const Standard_Real V2) ;
  
  Standard_EXPORT     void AppendIntAna(const Handle(Adaptor3d_HCurve)& Curve,const Handle(Adaptor3d_HSurface)& Surface,const IntAna_IntConicQuad& InterAna) ;
  
  Standard_EXPORT     void AppendPoint(const Handle(Adaptor3d_HCurve)& Curve,const Standard_Real w,const Handle(Adaptor3d_HSurface)& Surface,const Standard_Real u,const Standard_Real v) ;
  
  Standard_EXPORT     void AppendSegment(const Handle(Adaptor3d_HCurve)& Curve,const Standard_Real u0,const Standard_Real u1,const Handle(Adaptor3d_HSurface)& Surface) ;




private:

  
  Standard_EXPORT     void DoSurface(const Handle(Adaptor3d_HSurface)& surface,const Standard_Real u0,const Standard_Real u1,const Standard_Real v0,const Standard_Real v1,TColgp_Array2OfPnt& pntsOnSurface,Bnd_Box& boxSurface,Standard_Real& gap) ;
  
  Standard_EXPORT     void DoNewBounds(const Handle(Adaptor3d_HSurface)& surface,const Standard_Real u0,const Standard_Real u1,const Standard_Real v0,const Standard_Real v1,const TColgp_Array2OfPnt& pntsOnSurface,const TColStd_Array1OfReal& X,const TColStd_Array1OfReal& Y,const TColStd_Array1OfReal& Z,TColStd_Array1OfReal& Bounds) ;




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
