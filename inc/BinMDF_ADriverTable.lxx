// Created on: 2002-10-29
// Created by: Michael SAZONOV
// Copyright (c) 2002-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


//=======================================================================
//function : AssignId
//purpose  : Assigns the ID to the driver of the Type
//=======================================================================

inline void BinMDF_ADriverTable::AssignId
		(const Handle(Standard_Type)& theType,
		 const Standard_Integer theId)
{
  myMapId.Bind (theType, theId);
}

//=======================================================================
//function : GetDriver
//purpose  : Gets a driver <theDriver> according to <theType>.
//           Returns Type ID if the driver was assigned an ID; 0 otherwise.
//=======================================================================

inline Standard_Integer BinMDF_ADriverTable::GetDriver
                (const Handle(Standard_Type)&	theType,
		 Handle(BinMDF_ADriver)&	theDriver) const
{
  Standard_Integer anId = 0;
  if (myMap.IsBound(theType)) {
    theDriver = myMap (theType);
    if (myMapId.IsBound1(theType))
      anId = myMapId.Find1 (theType);
  }
  return anId;
}

//=======================================================================
//function : GetDriver
//purpose  : Returns a driver according to <theTypeId>.
//           Returns null handle if a driver is not found
//=======================================================================

inline Handle(BinMDF_ADriver) BinMDF_ADriverTable::GetDriver
                (const Standard_Integer theTypeId) const
{
  Handle(BinMDF_ADriver) aDriver;
  if (myMapId.IsBound2(theTypeId)) {
    const Handle(Standard_Type)& aType = myMapId.Find2 (theTypeId);
    aDriver = myMap (aType);
  }
  return aDriver;
}
