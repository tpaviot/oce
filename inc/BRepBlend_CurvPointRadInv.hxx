// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BRepBlend_CurvPointRadInv_HeaderFile
#define _BRepBlend_CurvPointRadInv_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Handle_Adaptor3d_HCurve_HeaderFile
#include <Handle_Adaptor3d_HCurve.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Blend_CurvPointFuncInv_HeaderFile
#include <Blend_CurvPointFuncInv.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class Adaptor3d_HCurve;
class math_Vector;
class math_Matrix;
class gp_Pnt;


//! This function  is used  to find a  solution on  a done <br>
//!          point   of   the curve 1 when   using  RstRstConsRad or <br>
//!          CSConstRad... <br>
//!          The vector <X>  used in Value, Values and  Derivatives <br>
//!          methods  has  to   be the  vector   of the  parametric <br>
//!          coordinates w, U where w is  the parameter  on the <br>
//!          guide line, U   are the parametric coordinates of  a <br>
//!          point on the partner curve 2. <br>
class BRepBlend_CurvPointRadInv  : public Blend_CurvPointFuncInv {
public:

  DEFINE_STANDARD_ALLOC

  
  Standard_EXPORT   BRepBlend_CurvPointRadInv(const Handle(Adaptor3d_HCurve)& C1,const Handle(Adaptor3d_HCurve)& C2);
  
  Standard_EXPORT     void Set(const Standard_Integer Choix) ;
  //! returns 2. <br>
  Standard_EXPORT     Standard_Integer NbEquations() const;
  //! computes the values <F> of the Functions for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
  Standard_EXPORT     Standard_Boolean Value(const math_Vector& X,math_Vector& F) ;
  //! returns the values <D> of the derivatives for the <br>
//!          variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
  Standard_EXPORT     Standard_Boolean Derivatives(const math_Vector& X,math_Matrix& D) ;
  //! returns the values <F> of the functions and the derivatives <br>
//!          <D> for the variable <X>. <br>
//!          Returns True if the computation was done successfully, <br>
//!          False otherwise. <br>
  Standard_EXPORT     Standard_Boolean Values(const math_Vector& X,math_Vector& F,math_Matrix& D) ;
  //! Set the Point on which a solution has to be found. <br>
  Standard_EXPORT     void Set(const gp_Pnt& P) ;
  //! Returns in the vector Tolerance the parametric tolerance <br>
//!          for each of the 3 variables; <br>
//!          Tol is the tolerance used in 3d space. <br>
  Standard_EXPORT     void GetTolerance(math_Vector& Tolerance,const Standard_Real Tol) const;
  //! Returns in the vector InfBound the lowest values allowed <br>
//!          for each of the 3 variables. <br>
//!          Returns in the vector SupBound the greatest values allowed <br>
//!          for each of the 3 variables. <br>
  Standard_EXPORT     void GetBounds(math_Vector& InfBound,math_Vector& SupBound) const;
  //! Returns Standard_True if Sol is a zero of the function. <br>
//!          Tol is the tolerance used in 3d space. <br>
  Standard_EXPORT     Standard_Boolean IsSolution(const math_Vector& Sol,const Standard_Real Tol) ;





protected:





private:



Handle_Adaptor3d_HCurve curv1;
Handle_Adaptor3d_HCurve curv2;
gp_Pnt point;
Standard_Integer choix;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
