// Created on: 1993-06-03
// Created by: Jacques GOUSSARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


// jag 940616 #define Tolpetit 1.e-16


#include <gp.hxx>


Contap_SurfFunction::Contap_SurfFunction ():
       myMean(1.),
       myType(Contap_ContourStd),
       myDir(0.,0.,1.),
       myCosAng(0.), // PI/2 - Angle de depouille
       tol(1.e-6),
       computed(Standard_False),
       derived(Standard_False)
{}

void Contap_SurfFunction::Set(const TheSurface& S)
{
  mySurf = S;
  Standard_Integer i;
  Standard_Integer nbs = TheContTool::NbSamplePoints(S);
  Standard_Real U,V;
  gp_Vec norm;
  if (nbs > 0) {
    myMean = 0.;
    for (i = 1; i <= nbs; i++) {
      TheContTool::SamplePoint(S,i,U,V);
//      TheSurfaceTool::D1(S,U,V,solpt,d1u,d1v);
//      myMean = myMean + d1u.Crossed(d1v).Magnitude();
      TheSurfProps::Normale(S,U,V,solpt,norm);
      myMean = myMean + norm.Magnitude();
    }
    myMean = myMean / ((Standard_Real)nbs);
  }
  computed = Standard_False;
  derived = Standard_False;
}


Standard_Integer Contap_SurfFunction::NbVariables () const
{
  return 2;
}

Standard_Integer Contap_SurfFunction::NbEquations () const
{
  return 1;
}


Standard_Boolean Contap_SurfFunction::Value(const math_Vector& X,
					    math_Vector& F)
{
  Usol = X(1); Vsol = X(2);
//  TheSurfaceTool::D1(mySurf,Usol,Vsol,solpt,d1u,d1v);
//  gp_Vec norm(d1u.Crossed(d1v));
  gp_Vec norm;
  TheSurfProps::Normale(mySurf,Usol,Vsol,solpt,norm);
  switch (myType) {
  case Contap_ContourStd:
    {
      F(1) = valf = (norm.Dot(myDir))/myMean;
    }
    break;
  case Contap_ContourPrs:
    {
      F(1) = valf = (norm.Dot(gp_Vec(myEye,solpt)))/myMean;
    }
    break;
  case Contap_DraftStd:
    {
      F(1) = valf = (norm.Dot(myDir)-myCosAng*norm.Magnitude())/myMean;
    }
    break;
  default:
    {
    }
  }
  computed = Standard_False;
  derived = Standard_False;
  return Standard_True;
}


Standard_Boolean Contap_SurfFunction::Derivatives(const math_Vector& X,
						  math_Matrix& Grad)
{
//  gp_Vec d2u,d2v,d2uv;
  Usol = X(1); Vsol = X(2);
//  TheSurfaceTool::D2(mySurf,Usol,Vsol,solpt,d1u,d1v,d2u,d2v,d2uv);

  gp_Vec norm,dnu,dnv;
  TheSurfProps::NormAndDn(mySurf,Usol,Vsol,solpt,norm,dnu,dnv);

  switch (myType) {
  case Contap_ContourStd:
    {
//      Grad(1,1) = ((d2u.Crossed(d1v) + d1u.Crossed(d2uv)).Dot(myDir))/myMean;
//      Grad(1,2) = ((d2uv.Crossed(d1v) + d1u.Crossed(d2v)).Dot(myDir))/myMean;
      Grad(1,1) = (dnu.Dot(myDir))/myMean;
      Grad(1,2) = (dnv.Dot(myDir))/myMean;
    }
    break;
  case Contap_ContourPrs:
    {
      gp_Vec Ep(myEye,solpt);
      Grad(1,1) = (dnu.Dot(Ep))/myMean;
      Grad(1,2) = (dnv.Dot(Ep))/myMean;
    }
    break;
  case Contap_DraftStd:
    {
//      gp_Vec norm(d1u.Crossed(d1v).Normalized());
//      gp_Vec dnorm(d2u.Crossed(d1v) + d1u.Crossed(d2uv));
//      Grad(1,1) = (dnorm.Dot(myDir)-myCosAng*dnorm.Dot(norm))/myMean;
//      dnorm = d2uv.Crossed(d1v) + d1u.Crossed(d2v);
//      Grad(1,2) = (dnorm.Dot(myDir)-myCosAng*dnorm.Dot(norm))/myMean;
      norm.Normalize();
      Grad(1,1) = (dnu.Dot(myDir)-myCosAng*dnu.Dot(norm))/myMean;
      Grad(1,2) = (dnv.Dot(myDir)-myCosAng*dnv.Dot(norm))/myMean;
    }
    break;
  case Contap_DraftPrs:
  default:
    {
    }
  }
  Fpu = Grad(1,1); Fpv = Grad(1,2);
  computed = Standard_False;
  derived = Standard_True;
  return Standard_True;
}


Standard_Boolean Contap_SurfFunction::Values (const math_Vector& X,
					      math_Vector& F,
					      math_Matrix& Grad)
{
//  gp_Vec d2u,d2v,d2uv;

  Usol = X(1); Vsol = X(2);
//  TheSurfaceTool::D2(mySurf,Usol,Vsol,solpt,d1u,d1v,d2u,d2v,d2uv);
//  gp_Vec norm(d1u.Crossed(d1v));
  gp_Vec norm,dnu,dnv;
  TheSurfProps::NormAndDn(mySurf,Usol,Vsol,solpt,norm,dnu,dnv);

  switch (myType) {

  case Contap_ContourStd:
    {
      F(1)      = (norm.Dot(myDir))/myMean;
//      Grad(1,1) = ((d2u.Crossed(d1v) + d1u.Crossed(d2uv)).Dot(myDir))/myMean;
//      Grad(1,2) = ((d2uv.Crossed(d1v) + d1u.Crossed(d2v)).Dot(myDir))/myMean;
      Grad(1,1) = (dnu.Dot(myDir))/myMean;
      Grad(1,2) = (dnv.Dot(myDir))/myMean;
    }
    break;
  case Contap_ContourPrs:
    {
      gp_Vec Ep(myEye,solpt);
      F(1)      = (norm.Dot(Ep))/myMean;
//      Grad(1,1) = ((d2u.Crossed(d1v) + d1u.Crossed(d2uv)).Dot(Ep))/myMean;
//      Grad(1,2) = ((d2uv.Crossed(d1v) + d1u.Crossed(d2v)).Dot(Ep))/myMean;
      Grad(1,1) = (dnu.Dot(Ep))/myMean;
      Grad(1,2) = (dnv.Dot(Ep))/myMean;
    }
    break;
  case Contap_DraftStd:
    {
      F(1) = (norm.Dot(myDir)-myCosAng*norm.Magnitude())/myMean;
      norm.Normalize();
/*
      gp_Vec dnorm(d2u.Crossed(d1v) + d1u.Crossed(d2uv));
      Grad(1,1) = (dnorm.Dot(myDir)-myCosAng*dnorm.Dot(norm))/myMean;
      dnorm = d2uv.Crossed(d1v) + d1u.Crossed(d2v);
      Grad(1,2) = (dnorm.Dot(myDir)-myCosAng*dnorm.Dot(norm))/myMean;
*/
      Grad(1,1) = (dnu.Dot(myDir)-myCosAng*dnu.Dot(norm))/myMean;
      Grad(1,2) = (dnv.Dot(myDir)-myCosAng*dnv.Dot(norm))/myMean;
    }
    break;
  case Contap_DraftPrs:
  default:
    {
    }
  }
  valf = F(1);
  Fpu = Grad(1,1); Fpv = Grad(1,2);
  computed = Standard_False;
  derived = Standard_True;
  return Standard_True;
}


Standard_Boolean Contap_SurfFunction::IsTangent ()
{
  if (!computed) {
    computed = Standard_True;
    if(!derived) {
//      gp_Vec d2u,d2v,d2uv;
//      TheSurfaceTool::D2(mySurf, Usol, Vsol, solpt, d1u, d1v, d2u, d2v, d2uv);
      gp_Vec norm,dnu,dnv;
      TheSurfProps::NormAndDn(mySurf,Usol,Vsol,solpt,norm,dnu,dnv);

      switch (myType) {
      case Contap_ContourStd:
	{
//	  Fpu = ((d2u.Crossed(d1v) + d1u.Crossed(d2uv)).Dot(myDir))/myMean;
//	  Fpv = ((d2uv.Crossed(d1v) + d1u.Crossed(d2v)).Dot(myDir))/myMean;
	  Fpu = (dnu.Dot(myDir))/myMean;
	  Fpv = (dnv.Dot(myDir))/myMean;
	}
	break;
      case Contap_ContourPrs:
	{
	  gp_Vec Ep(myEye,solpt);
//	  Fpu = ((d2u.Crossed(d1v) + d1u.Crossed(d2uv)).Dot(Ep))/myMean;
//	  Fpv = ((d2uv.Crossed(d1v) + d1u.Crossed(d2v)).Dot(Ep))/myMean;
	  Fpu = (dnu.Dot(Ep))/myMean;
	  Fpv = (dnv.Dot(Ep))/myMean;
	}
	break;
      case Contap_DraftStd:
	{
/*
	  gp_Vec norm(d1u.Crossed(d1v).Normalized());
	  gp_Vec dnorm(d2u.Crossed(d1v) + d1u.Crossed(d2uv));
	  Fpu = (dnorm.Dot(myDir)-myCosAng*dnorm.Dot(norm))/myMean;
	  dnorm = d2uv.Crossed(d1v) + d1u.Crossed(d2v);
	  Fpv = (dnorm.Dot(myDir)-myCosAng*dnorm.Dot(norm))/myMean;
*/
	  norm.Normalize();
	  Fpu = (dnu.Dot(myDir)-myCosAng*dnu.Dot(norm))/myMean;
	  Fpv = (dnv.Dot(myDir)-myCosAng*dnv.Dot(norm))/myMean;
	}
	break;
      case Contap_DraftPrs:
      default:
	{
	}
      }
      derived = Standard_True;
    }
    tangent = Standard_False;
    Standard_Real D = Sqrt (Fpu * Fpu + Fpv * Fpv);

    if (D <= gp::Resolution()) {
      tangent = Standard_True;
    }
    else {
      d2d = gp_Dir2d(-Fpv,Fpu);
      gp_Vec d1u,d1v;
      TheSurfaceTool::D1(mySurf, Usol, Vsol, solpt, d1u, d1v); // ajout jag 02.95

      gp_XYZ d3dxyz(-Fpv*d1u.XYZ());
      d3dxyz.Add(Fpu*d1v.XYZ());
      d3d.SetXYZ(d3dxyz);
    
      //jag 940616    if (d3d.Magnitude() <= Tolpetit) {
      if (d3d.Magnitude() <= tol) {
	tangent = Standard_True;
      }
    }
  }
  return tangent;
}
