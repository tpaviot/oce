// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPTools_Pave_HeaderFile
#define _BOPTools_Pave_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _BooleanOperations_KindOfInterference_HeaderFile
#include <BooleanOperations_KindOfInterference.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif



//!  Class for storing info about a vertex on an edge <br>
class BOPTools_Pave  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty constructor <br>
  Standard_EXPORT   BOPTools_Pave();
  
//! Constructor <br>
//! Index  - DS-index of the vertex <br>
//! aParam - value of the parameter of the vertex on an edge <br>
//! aType  - the type of interference from which the pave comes from <br>
  Standard_EXPORT   BOPTools_Pave(const Standard_Integer Index,const Standard_Real aParam,const BooleanOperations_KindOfInterference aType = BooleanOperations_UnknownInterference);
  
//! Modifier <br>
  Standard_EXPORT     void SetParam(const Standard_Real aParam) ;
  
//! Modifier <br>
  Standard_EXPORT     void SetIndex(const Standard_Integer Index) ;
  
//! Modifier <br>
  Standard_EXPORT     void SetType(const BooleanOperations_KindOfInterference aType) ;
  
//! Modifier <br>
//! Sets the index of the interference in corresponding table <br>
  Standard_EXPORT     void SetInterference(const Standard_Integer Index) ;
  
//! Selector <br>
  Standard_EXPORT     Standard_Real Param() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Index() const;
  
//! Selector <br>
  Standard_EXPORT     BooleanOperations_KindOfInterference Type() const;
  
//! Selector <br>
  Standard_EXPORT     Standard_Integer Interference() const;
  
//! Returns TRUE if  <Other>==me <br>
  Standard_EXPORT     Standard_Boolean IsEqual(const BOPTools_Pave& Other) const;





protected:





private:



Standard_Real myParam;
Standard_Integer myIndex;
BooleanOperations_KindOfInterference myType;
Standard_Integer myInterf;


};





// other Inline functions and methods (like "C++: function call" methods)


#endif
