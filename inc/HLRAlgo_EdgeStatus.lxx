// Created on: 1992-02-18
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#define EMaskAllHidden    0x01u
#define EMaskAllVisible   0x02u

//=======================================================================
//function : Bounds
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::Bounds 
( Standard_Real& Start, Standard_ShortReal& TolStart,
  Standard_Real& End  , Standard_ShortReal& TolEnd  ) const
{
  Start    = myStart;
  TolStart = myTolStart;
  End      = myEnd;
  TolEnd   = myTolEnd;
}

//=======================================================================
//function : HideAll
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::HideAll()
{
  AllVisible(Standard_False);
  AllHidden (Standard_True);
}

//=======================================================================
//function : ShowAll
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::ShowAll()
{
  AllVisible(Standard_True);
  AllHidden (Standard_False);
}

//=======================================================================
//function : AllHidden
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeStatus::AllHidden () const
{ return (myFlags & EMaskAllHidden) != 0; }

//=======================================================================
//function : AllHidden
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::AllHidden (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskAllHidden;
  else   myFlags &= ~EMaskAllHidden;
}

//=======================================================================
//function : AllVisible
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeStatus::AllVisible () const
{ return (myFlags & EMaskAllVisible) != 0; }

//=======================================================================
//function : AllVisible
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgeStatus::AllVisible (const Standard_Boolean B)
{
  if (B) myFlags |=  EMaskAllVisible;
  else   myFlags &= ~EMaskAllVisible;
}
