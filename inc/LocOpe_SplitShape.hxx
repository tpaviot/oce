// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _LocOpe_SplitShape_HeaderFile
#define _LocOpe_SplitShape_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _TopTools_DataMapOfShapeListOfShape_HeaderFile
#include <TopTools_DataMapOfShapeListOfShape.hxx>
#endif
#ifndef _TopTools_MapOfShape_HeaderFile
#include <TopTools_MapOfShape.hxx>
#endif
#ifndef _TopTools_ListOfShape_HeaderFile
#include <TopTools_ListOfShape.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class StdFail_NotDone;
class Standard_ConstructionError;
class Standard_NoSuchObject;
class TopoDS_Shape;
class TopoDS_Edge;
class TopoDS_Vertex;
class TopoDS_Wire;
class TopoDS_Face;
class TopTools_ListOfShape;


//! Provides a tool to cut  : <br>
//!          - edges with a vertices, <br>
//!          - faces with wires, <br>
//!          and  rebuilds  the shape containing the edges and <br>
//!          the faces. <br>
class LocOpe_SplitShape  {
public:

  DEFINE_STANDARD_ALLOC

  //! Empty constructor. <br>
      LocOpe_SplitShape();
  //! Creates the process  with the shape <S>. <br>
      LocOpe_SplitShape(const TopoDS_Shape& S);
  //! Initializes the process on the shape <S>. <br>
  Standard_EXPORT     void Init(const TopoDS_Shape& S) ;
  //! Tests if it is possible to split the edge <E>. <br>
  Standard_EXPORT     Standard_Boolean CanSplit(const TopoDS_Edge& E) const;
  //! Adds the vertex <V> on the edge <E>, at parameter <P>. <br>
  Standard_EXPORT     void Add(const TopoDS_Vertex& V,const Standard_Real P,const TopoDS_Edge& E) ;
  //! Adds the wire <W> on the face <F>. <br>
  Standard_EXPORT     void Add(const TopoDS_Wire& W,const TopoDS_Face& F) ;
  //! Adds the list of wires <Lwires> on the face <F>. <br>
  Standard_EXPORT     void Add(const TopTools_ListOfShape& Lwires,const TopoDS_Face& F) ;
  //! Returns the "original" shape. <br>
       const TopoDS_Shape& Shape() const;
  //! Returns the list of descendant shapes of <S>. <br>
  Standard_EXPORT    const TopTools_ListOfShape& DescendantShapes(const TopoDS_Shape& S) ;
  //! Returns the "left" part defined by the wire <W> on <br>
//!          the face <F>.   The  returned list of shape  is in <br>
//!          fact  a list of faces. The  face <F> is considered <br>
//!          with its topological  orientation  in the original <br>
//!          shape.  <W> is considered with its orientation. <br>
  Standard_EXPORT    const TopTools_ListOfShape& LeftOf(const TopoDS_Wire& W,const TopoDS_Face& F) ;





protected:





private:

  
  Standard_EXPORT     void AddOpenWire(const TopoDS_Wire& W,const TopoDS_Face& F) ;
  
  Standard_EXPORT     void AddClosedWire(const TopoDS_Wire& W,const TopoDS_Face& F) ;
  
  Standard_EXPORT     void Put(const TopoDS_Shape& S) ;
  
  Standard_EXPORT     Standard_Boolean Rebuild(const TopoDS_Shape& S) ;


Standard_Boolean myDone;
TopoDS_Shape myShape;
TopTools_DataMapOfShapeListOfShape myMap;
TopTools_MapOfShape myDblE;
TopTools_ListOfShape myLeft;


};


#include <LocOpe_SplitShape.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
