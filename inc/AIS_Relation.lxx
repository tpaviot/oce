// Created on: 1996-12-05
// Created by: Odile Olivier
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : FirstShape
//purpose  : 
//=======================================================================

inline const TopoDS_Shape& AIS_Relation::FirstShape() const 
{
  return myFShape;
}


//=======================================================================
//function : SecondShape
//purpose  : 
//=======================================================================

inline const TopoDS_Shape& AIS_Relation::SecondShape() const 
{
  return mySShape;
}


//=======================================================================
//function : SetBndBox
//purpose  : 
//=======================================================================

inline void AIS_Relation::SetBndBox( const Standard_Real Xmin,
				     const Standard_Real Ymin,
				     const Standard_Real Zmin,
				     const Standard_Real Xmax,
				     const Standard_Real Ymax,
				     const Standard_Real Zmax )
{
  myBndBox.Update( Xmin, Ymin, Zmin, Xmax, Ymax, Zmax );
  myIsSetBndBox = Standard_True;
}				    

inline void AIS_Relation::UnsetBndBox()
{
  myIsSetBndBox = Standard_False;
}

//=======================================================================
//function : :Plane
//purpose  : 
//=======================================================================

inline const Handle(Geom_Plane)& AIS_Relation::Plane() const 
{
  return myPlane;
}

//=======================================================================
//function : SetPlane
//purpose  : 
//=======================================================================

inline void AIS_Relation::SetPlane(const Handle(Geom_Plane)& aPlane)
{
  myPlane = aPlane;
}

//=======================================================================
//function : Value
//purpose  : 
//=======================================================================

inline Standard_Real AIS_Relation::Value() const 
{
  return myVal;
}

//=======================================================================
//function : SetValue
//purpose  : 
//=======================================================================

inline void AIS_Relation::SetValue(const Standard_Real aVal)
{
  myVal = aVal;
}

//=======================================================================
//function : Position
//purpose  : 
//=======================================================================

inline const gp_Pnt& AIS_Relation::Position() const 
{
  return myPosition;
}


//=======================================================================
//function : SetPosition
//purpose  : 
//=======================================================================

inline void AIS_Relation::SetPosition(const gp_Pnt& aPosition)
{
  myPosition = aPosition;
  myAutomaticPosition = Standard_False;
}

//=======================================================================
//function : Text
//purpose  : 
//=======================================================================

inline const TCollection_ExtendedString& AIS_Relation::Text() const 
{
  return myText;
}

//=======================================================================
//function : SetText
//purpose  : 
//=======================================================================

inline void AIS_Relation::SetText(const TCollection_ExtendedString& aText)
{
  myText = aText;
}

//=======================================================================
//function : ArrowSize
//purpose  : 
//=======================================================================

inline Standard_Real AIS_Relation::ArrowSize() const 
{
  return myArrowSize;
}

//=======================================================================
//function : SetArrowSize
//purpose  : 
//=======================================================================

inline void AIS_Relation::SetArrowSize(const Standard_Real anArrowSize)
{
  myArrowSize = anArrowSize;
  myArrowSizeIsDefined = Standard_True;
}

//=======================================================================
//function : SymbolPrs
//purpose  : 
//=======================================================================

inline DsgPrs_ArrowSide AIS_Relation::SymbolPrs() const 
{
  return mySymbolPrs;
}

//=======================================================================
//function : SetSymbolPrs
//purpose  : 
//=======================================================================
inline void AIS_Relation::SetSymbolPrs(const DsgPrs_ArrowSide aSymbolPrs)
{
  mySymbolPrs = aSymbolPrs;
}



//=======================================================================
//function : KindOfInteractive
//purpose  : 
//=======================================================================
inline AIS_KindOfInteractive AIS_Relation::Type() const 
{return AIS_KOI_Relation;}


//=======================================================================
//function : SetExtShape
//purpose  : 
//=======================================================================
inline void AIS_Relation::SetExtShape(const Standard_Integer ExtSh) 
{myExtShape = ExtSh;}


//=======================================================================
//function : ExtShape
//purpose  : 
//=======================================================================
inline Standard_Integer AIS_Relation::ExtShape() const
{return myExtShape;}


//=======================================================================
//function : SetAutomaticPosition
//purpose  : 
//=======================================================================
inline void AIS_Relation::SetAutomaticPosition ( const Standard_Boolean aStatus ) 
{
  myAutomaticPosition = aStatus ;
}

//=======================================================================
//function : AutomaticPosition
//purpose  : 
//=======================================================================
inline Standard_Boolean AIS_Relation::AutomaticPosition () const
{
  return myAutomaticPosition;
}
