// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <gp_Vec2d.hxx>



IntImpParGen_ImpParTool::IntImpParGen_ImpParTool(const ImpTool& ITool,
						 const ParCurve& PC):
	 TheImpTool(ITool) 
{  
  TheParCurve = (Standard_Address)(&PC);
}


Standard_Boolean IntImpParGen_ImpParTool::Value(const Standard_Real Param,
				   Standard_Real& ApproxDistance) {
  
  ApproxDistance = TheImpTool.Distance(ParTool::Value((*((ParCurve *)(TheParCurve))),Param));
  return(Standard_True);
}

Standard_Boolean IntImpParGen_ImpParTool::Derivative(const Standard_Real Param,
					Standard_Real& D_ApproxDistance_DV) {
  
  gp_Pnt2d Pt;
  gp_Vec2d TanParCurve;
  gp_Vec2d Grad=TheImpTool.GradDistance(ParTool::Value((*((ParCurve *)(TheParCurve))),Param));
  ParTool::D1((*((ParCurve *)(TheParCurve))),Param,Pt,TanParCurve);
  D_ApproxDistance_DV = Grad.Dot(TanParCurve);
  return(Standard_True);
}


Standard_Boolean IntImpParGen_ImpParTool::Values(const Standard_Real Param,
				    Standard_Real& ApproxDistance,
				    Standard_Real& Deriv) {
  
  this->Value(Param,ApproxDistance);
  this->Derivative(Param,Deriv);
  return(Standard_True);
}



