// Created on: 2005-12-21
// Created by: Sergey KHROMOV
// Copyright (c) 2005-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.



//=======================================================================
//function : SetNbKronrodPoints
//purpose  : 
//=======================================================================

inline void GProp_TFunction::SetNbKronrodPoints
                   (const Standard_Integer theNbPoints)
{
  myNbPntOuter = (theNbPoints%2 == 0) ? theNbPoints + 1 : theNbPoints;
}
 
//=======================================================================
//function : SetValueType
//purpose  : 
//=======================================================================

inline void GProp_TFunction::SetValueType(const GProp_ValueType theType)
{
  myValueType = theType;
  myUFunction.SetValueType(myValueType);
}

//=======================================================================
//function : SetTolerance
//purpose  : 
//=======================================================================

inline void GProp_TFunction::SetTolerance(const Standard_Real theTolerance)
{
  myTolerance = theTolerance;
}

//=======================================================================
//function : TolReached
//purpose  : 
//=======================================================================

inline Standard_Real GProp_TFunction::ErrorReached() const
{
  return myErrReached;
}

//=======================================================================
//function : ErrorReached
//purpose  : 
//=======================================================================

inline Standard_Real GProp_TFunction::AbsolutError() const
{
  return myAbsError;
}
