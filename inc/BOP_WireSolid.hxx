// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOP_WireSolid_HeaderFile
#define _BOP_WireSolid_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _BOP_WireShape_HeaderFile
#include <BOP_WireShape.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _TopAbs_ShapeEnum_HeaderFile
#include <TopAbs_ShapeEnum.hxx>
#endif
#ifndef _BOP_Operation_HeaderFile
#include <BOP_Operation.hxx>
#endif
#ifndef _Handle_BOP_HistoryCollector_HeaderFile
#include <Handle_BOP_HistoryCollector.hxx>
#endif
class BOPTools_DSFiller;
class BOP_HistoryCollector;



//!  The class is to perform a Boolean Operations (BO) <br>
//!  Common,Cut,Fuse  between arguments when one of them is <br>
//!  a wire and other argument is a solid <br>
//! <br>
class BOP_WireSolid  : public BOP_WireShape {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty constructor; <br>
  Standard_EXPORT   BOP_WireSolid();
  
//! (See base classes, please) <br>
  Standard_EXPORT   virtual  void Do() ;
  
//! (See base classes, please) <br>
  Standard_EXPORT   virtual  void DoWithFiller(const BOPTools_DSFiller& aDSF) ;
  
//! Destructor <br>
  Standard_EXPORT   virtual  void Destroy() ;
Standard_EXPORT virtual ~BOP_WireSolid(){Destroy();}
  
//! (See base classes, please) <br>
  Standard_EXPORT   virtual  void BuildResult() ;
  
//! Check the types of arguments. <br>
//! Returns  FALSE if types of arguments <br>
//! are non-valid to be  treated by the <br>
//! agorithm <br>
  Standard_EXPORT   static  Standard_Boolean CheckArgTypes(const TopAbs_ShapeEnum theType1,const TopAbs_ShapeEnum theType2,const BOP_Operation theOperation) ;
  
  Standard_EXPORT   virtual  void SetHistoryCollector(const Handle(BOP_HistoryCollector)& theHistory) ;





protected:





private:

  
//! Internal  usage <br>
  Standard_EXPORT     Standard_Boolean CheckArgTypes() const;
  
//! Internal  usage <br>
  Standard_EXPORT     void AddSplitParts() ;




};





// other Inline functions and methods (like "C++: function call" methods)


#endif
