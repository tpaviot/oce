// Created on: 1992-12-22
// Created by: Remi LEQUETTE
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : Empty constructor
//purpose  : 
//=======================================================================

inline TCollection_Sequence::TCollection_Sequence()
{
}

//=======================================================================
//function : Copy constructor
//purpose  : 
//=======================================================================

inline TCollection_Sequence::TCollection_Sequence(const TCollection_Sequence& theOther)
{
  Assign(theOther);
}

//=======================================================================
//function : Append 
//purpose  : Appends a Sequence to myself
//=======================================================================
inline void  TCollection_Sequence::Append (TCollection_Sequence& S)
{
  if (FirstItem == S.FirstItem) Assign(S);
  PAppend (S);
}

//=======================================================================
//function : Prepend 
//purpose  : Prepends a Sequence to myself
//=======================================================================
inline void TCollection_Sequence::Prepend (TCollection_Sequence& S)
{
  if (FirstItem == S.FirstItem) Assign(S);
  PPrepend (S);
}
//=======================================================================
//function : InsertBefore
//purpose  : Inserts an item before an index
//=======================================================================
inline void TCollection_Sequence::InsertBefore (const Standard_Integer Index,
						const SeqItem& I)
{
  InsertAfter(Index-1,I);
}

//=======================================================================
//function : InsertBefore
//purpose  : Inserts a Sequence before an index
//=======================================================================
inline void TCollection_Sequence::InsertBefore (const Standard_Integer Index,
					         TCollection_Sequence& S)
{
  InsertAfter(Index-1,S);
}

//=======================================================================
//function : InsertAfter
//purpose  : Inserts a Sequence after an index
//=======================================================================
inline void TCollection_Sequence::InsertAfter (const Standard_Integer Index,
					       TCollection_Sequence& S)
{
  PInsertAfter(Index,S);
}

//=======================================================================
//function : Split
//purpose  : Cuts a Sequence into two
//=======================================================================
inline void TCollection_Sequence::Split (const Standard_Integer Index,
					  TCollection_Sequence& S)
{
  S.Clear();
  PSplit(Index,S);
}







