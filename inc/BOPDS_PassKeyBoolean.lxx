// Created by: Peter KURNEV
// Copyright (c) 2010-2014 OPEN CASCADE SAS
// Copyright (c) 2007-2010 CEA/DEN, EDF R&D, OPEN CASCADE
// Copyright (c) 2003-2007 OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN, CEDRAT,
//                         EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : 
//purpose  : 
//=======================================================================
  inline BOPDS_PassKeyBoolean::BOPDS_PassKeyBoolean()
:
  BOPDS_PassKey(),
  myFlag(Standard_False)
{
}
//=======================================================================
//function :
//purpose  : 
//=======================================================================
  inline BOPDS_PassKeyBoolean::BOPDS_PassKeyBoolean
     (const Handle(NCollection_BaseAllocator)& theAllocator)
:
  BOPDS_PassKey(theAllocator),
  myFlag(Standard_False)
{
}
//=======================================================================
//function :
//purpose  : 
//=======================================================================
  inline BOPDS_PassKeyBoolean::BOPDS_PassKeyBoolean(const BOPDS_PassKeyBoolean& theOther)
:
  BOPDS_PassKey(theOther)
{
  myFlag = theOther.myFlag;
}
//=======================================================================
//function :~
//purpose  : 
//=======================================================================
  inline BOPDS_PassKeyBoolean::~BOPDS_PassKeyBoolean()
{
}
//=======================================================================
//function :operator =
//purpose  : 
//=======================================================================
  inline BOPDS_PassKeyBoolean& BOPDS_PassKeyBoolean::operator =(const BOPDS_PassKeyBoolean& aOther)
{
  BOPDS_PassKey::operator =(aOther);
  myFlag=aOther.myFlag;
  return *this;
}
//=======================================================================
//function :SetFlag
//purpose  : 
//=======================================================================
  inline void BOPDS_PassKeyBoolean::SetFlag(const Standard_Boolean aFlag)
{
  myFlag=aFlag;
}
//=======================================================================
//function :Flag
//purpose  : 
//=======================================================================
  inline Standard_Boolean BOPDS_PassKeyBoolean::Flag()const
{
  return myFlag;
}
