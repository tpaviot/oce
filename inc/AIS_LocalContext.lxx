// Created on: 1997-01-17
// Created by: Robert COUBLANC
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <SelectMgr_AndFilter.hxx>

#include <SelectMgr_OrFilter.hxx>

inline const TCollection_AsciiString& AIS_LocalContext::
SelectionName() const 
{return mySelName;}

inline void AIS_LocalContext::SetAutomaticHilight(const Standard_Boolean aStatus)
{myAutoHilight = aStatus;}

inline Standard_Boolean AIS_LocalContext::AutomaticHilight() const 
{return myAutoHilight;}

inline const TColStd_ListOfInteger& 
AIS_LocalContext::StandardModes() const 
{return myListOfStandardMode;}

inline const SelectMgr_ListOfFilter& AIS_LocalContext::ListOfFilter() const 
{return myFilters->StoredFilters();}

inline const Handle(SelectMgr_OrFilter)& AIS_LocalContext::Filter() const 
{return myFilters;}


inline void AIS_LocalContext::AcceptErase(const Standard_Boolean aStatus)
{myAcceptErase = aStatus;}

inline Standard_Boolean AIS_LocalContext::AcceptErase() const
{return myAcceptErase;}

inline const Handle(StdSelect_ViewerSelector3d)& 
AIS_LocalContext::MainSelector() const
{return myMainVS;}

inline Standard_Boolean AIS_LocalContext::HasDetected() const 
{return mylastindex!=0;}

inline Standard_Integer AIS_LocalContext::DetectedIndex()
{
  return mylastindex;
}

inline Standard_Boolean AIS_LocalContext::HasNextDetected() const
{return myCurDetected<myDetectedSeq.Length();}

inline Standard_Boolean AIS_LocalContext::IsValidIndex(const Standard_Integer indx) const
{ return (indx>0 && indx<=myMapOfOwner.Extent());}
