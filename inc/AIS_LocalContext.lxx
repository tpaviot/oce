// Created on: 1997-01-17
// Created by: Robert COUBLANC
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <SelectMgr_AndFilter.hxx>

#include <SelectMgr_OrFilter.hxx>

inline const TCollection_AsciiString& AIS_LocalContext::
SelectionName() const 
{return mySelName;}

inline void AIS_LocalContext::SetAutomaticHilight(const Standard_Boolean aStatus)
{myAutoHilight = aStatus;}

inline Standard_Boolean AIS_LocalContext::AutomaticHilight() const 
{return myAutoHilight;}

inline const TColStd_ListOfInteger& 
AIS_LocalContext::StandardModes() const 
{return myListOfStandardMode;}

inline const SelectMgr_ListOfFilter& AIS_LocalContext::ListOfFilter() const 
{return myFilters->StoredFilters();}

inline const Handle(SelectMgr_OrFilter)& AIS_LocalContext::Filter() const 
{return myFilters;}


inline void AIS_LocalContext::AcceptErase(const Standard_Boolean aStatus)
{myAcceptErase = aStatus;}

inline Standard_Boolean AIS_LocalContext::AcceptErase() const
{return myAcceptErase;}

inline const Handle(StdSelect_ViewerSelector3d)& 
AIS_LocalContext::MainSelector() const
{return myMainVS;}

inline Standard_Boolean AIS_LocalContext::HasDetected() const 
{return mylastindex!=0;}

inline Standard_Integer AIS_LocalContext::DetectedIndex()
{
  return mylastindex;
}

inline Standard_Boolean AIS_LocalContext::HasNextDetected() const
{return myCurDetected<myDetectedSeq.Length();}

inline Standard_Boolean AIS_LocalContext::IsValidIndex(const Standard_Integer indx) const
{ return (indx>0 && indx<=myMapOfOwner->Extent());}
