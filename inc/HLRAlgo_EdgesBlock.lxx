// Created on: 1995-04-20
// Created by: Christophe MARION
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#define EMaskOrient    0x0fu
#define EMaskOutLine   0x10u
#define EMaskInternal  0x20u
#define EMaskDouble    0x40u
#define EMaskIsoLine   0x80u

//=======================================================================
//function : NbEdges
//purpose  : 
//=======================================================================

inline Standard_Integer HLRAlgo_EdgesBlock::NbEdges() const
{
  return myEdges.Upper();
}

//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgesBlock::Edge (const Standard_Integer I,
				      const Standard_Integer EI)
{
  myEdges(I) = EI;
}

//=======================================================================
//function : Edge
//purpose  : 
//=======================================================================

inline Standard_Integer
HLRAlgo_EdgesBlock::Edge (const Standard_Integer I) const
{
  return myEdges(I);
}

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline TopAbs_Orientation 
HLRAlgo_EdgesBlock::Orientation (const Standard_Integer I) const
{
  return ((TopAbs_Orientation)(myFlags(I) & EMaskOrient));
}

//=======================================================================
//function : Orientation
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgesBlock::Orientation (const Standard_Integer I,
				 const TopAbs_Orientation Or)
{
  myFlags(I) &= ~EMaskOrient;
  myFlags(I) |= (0 != (Or & EMaskOrient));
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::OutLine (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskOutLine) != 0;
}

//=======================================================================
//function : OutLine
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_EdgesBlock::OutLine (const Standard_Integer I,
			     const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskOutLine;
  else   myFlags(I) &= ~EMaskOutLine;
}

//=======================================================================
//function : Internal
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::Internal (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskInternal) != 0;
}

//=======================================================================
//function : Internal
//purpose  : 
//=======================================================================

inline void
HLRAlgo_EdgesBlock::Internal (const Standard_Integer I,
			      const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskInternal;
  else   myFlags(I) &= ~EMaskInternal;
}

//=======================================================================
//function : Double
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::Double (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskDouble) != 0;
}

//=======================================================================
//function : Double
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgesBlock::Double (const Standard_Integer I,
					const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskDouble;
  else   myFlags(I) &= ~EMaskDouble;
}

//=======================================================================
//function : IsoLine
//purpose  : 
//=======================================================================

inline Standard_Boolean
HLRAlgo_EdgesBlock::IsoLine (const Standard_Integer I) const
{
  return (myFlags(I) & EMaskIsoLine) != 0;
}

//=======================================================================
//function : IsoLine
//purpose  : 
//=======================================================================

inline void HLRAlgo_EdgesBlock::IsoLine (const Standard_Integer I,
					 const Standard_Boolean B)
{
  if (B) myFlags(I) |=  EMaskIsoLine;
  else   myFlags(I) &= ~EMaskIsoLine;
}

//=======================================================================
//function : MinMax
//purpose  : 
//=======================================================================

inline Standard_Address HLRAlgo_EdgesBlock::MinMax () const
{ return (Standard_Address)&myMinMax; }
