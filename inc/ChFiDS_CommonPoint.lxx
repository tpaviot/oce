// Created on: 1993-11-30
// Created by: Isabelle GRIGNON
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
//function : SetVertex
//purpose  : 
//=======================================================================

inline void  ChFiDS_CommonPoint::SetVertex(const TopoDS_Vertex& V)
{
  isvtx = Standard_True;
  vtx = V;
}


//=======================================================================
//function : SetPoint
//purpose  : 
//=======================================================================

 inline void  ChFiDS_CommonPoint::SetPoint(const gp_Pnt& Point)
{
  point = Point;
}

//=======================================================================
//function : SetVector
//purpose  : 
//=======================================================================

 inline void  ChFiDS_CommonPoint::SetVector(const gp_Vec& Vector)
{
  hasvector = Standard_True;
  vector = Vector;
}

//=======================================================================
//function : SetTolerance
//purpose  : 
// PMN : 30/09/1997 : On se contente d'updater la tolerance.
//=======================================================================

 inline void  ChFiDS_CommonPoint::SetTolerance(const Standard_Real Tol)
{
  if (Tol>tol) tol = Tol;
}


//=======================================================================
//function : Tolerance
//purpose  : 
//=======================================================================

 inline Standard_Real  ChFiDS_CommonPoint::Tolerance()const 
{
  return tol;
}


//=======================================================================
//function : IsVertex
//purpose  : 
//=======================================================================

 inline Standard_Boolean  ChFiDS_CommonPoint::IsVertex()const 
{
  return isvtx;
}


//=======================================================================
//function : Vertex
//purpose  : 
//=======================================================================

 inline const TopoDS_Vertex&  ChFiDS_CommonPoint::Vertex()const 
{
  if (!isvtx) {Standard_DomainError::Raise();}
  return vtx;
}

//=======================================================================
//function : Point
//purpose  : 
//=======================================================================

 inline const gp_Pnt&  ChFiDS_CommonPoint::Point()const 
{
  return point;
}

//=======================================================================
//function : HasVector
//purpose  : 
//=======================================================================

 inline Standard_Boolean  ChFiDS_CommonPoint::HasVector()const 
{
  return hasvector;
}

//=======================================================================
//function : Vector
//purpose  : 
//=======================================================================

 inline const gp_Vec&  ChFiDS_CommonPoint::Vector()const 
{
  if (!hasvector) {
    Standard_DomainError::Raise("ChFiDS_CommonPoint::Vector");
  }
  return vector;
}

//=======================================================================
//function : IsOnArc
//purpose  : 
//=======================================================================

 inline Standard_Boolean  ChFiDS_CommonPoint::IsOnArc()const 
{
  return isonarc;
}




