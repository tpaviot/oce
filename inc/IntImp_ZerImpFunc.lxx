// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

#include <StdFail_UndefinedDerivative.hxx>

inline void IntImp_ZerImpFunc::Set (const ThePSurface& PS)
{
  surf =  (Standard_Address)(&PS);
}

inline void IntImp_ZerImpFunc::SetImplicitSurface (const TheISurface& IS)
{
  func =  (Standard_Address)(&IS);
}

inline void IntImp_ZerImpFunc::Set (const Standard_Real Tol)
{
  tol = Tol;
}

inline Standard_Real IntImp_ZerImpFunc::Root() const 
{ 
  return valf;
}

inline Standard_Real IntImp_ZerImpFunc::Tolerance() const 
{ 
  return tol;
}

inline const gp_Pnt& IntImp_ZerImpFunc::Point() const 
{
  return pntsol;
}

inline const gp_Vec& IntImp_ZerImpFunc::Direction3d()
{
  if (IsTangent()) StdFail_UndefinedDerivative::Raise();       
  return d3d;
}

inline const gp_Dir2d& IntImp_ZerImpFunc::Direction2d()
{
  if (IsTangent()) StdFail_UndefinedDerivative::Raise();       
  return d2d;
}

inline const ThePSurface& IntImp_ZerImpFunc::PSurface() const 
{
  return  (*((ThePSurface *)(surf)));
}

inline const TheISurface& IntImp_ZerImpFunc::ISurface() const 
{ 
  return  (*((TheISurface *)(func)));
}

