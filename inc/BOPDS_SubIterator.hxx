// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _BOPDS_SubIterator_HeaderFile
#define _BOPDS_SubIterator_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineAlloc_HeaderFile
#include <Standard_DefineAlloc.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#ifndef _BOPCol_BaseAllocator_HeaderFile
#include <BOPCol_BaseAllocator.hxx>
#endif
#ifndef _BOPDS_PDS_HeaderFile
#include <BOPDS_PDS.hxx>
#endif
#ifndef _BOPDS_ListOfPassKeyBoolean_HeaderFile
#include <BOPDS_ListOfPassKeyBoolean.hxx>
#endif
#ifndef _BOPDS_ListIteratorOfListOfPassKeyBoolean_HeaderFile
#include <BOPDS_ListIteratorOfListOfPassKeyBoolean.hxx>
#endif
#ifndef _BOPCol_PListOfInteger_HeaderFile
#include <BOPCol_PListOfInteger.hxx>
#endif
#ifndef _BOPCol_ListOfInteger_HeaderFile
#include <BOPCol_ListOfInteger.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
class BOPDS_DS;



//! The class BOPDS_SubIterator is <br>
//!  1.to compute intersections between two sub-sets of <br>
//!    BRep sub-shapes <br>
//!    of arguments of an operation (see the class BOPDS_DS) <br>
//!    in terms of theirs bounding boxes <br>
//!  2.provides interface to iterare the pairs of <br>
//!    intersected sub-shapes of given type <br>
class BOPDS_SubIterator  {
public:

  DEFINE_STANDARD_ALLOC

  
//! Empty contructor <br>
//! <br>
  Standard_EXPORT   BOPDS_SubIterator();
Standard_EXPORT virtual ~BOPDS_SubIterator();
  
//!  Contructor <br>
//!  theAllocator - the allocator to manage the memory <br>
//! <br>
  Standard_EXPORT   BOPDS_SubIterator(const BOPCol_BaseAllocator& theAllocator);
  
//! Modifier <br>
//! Sets the data structure <pDS> to process <br>
  Standard_EXPORT     void SetDS(const BOPDS_PDS& pDS) ;
  
//! Selector <br>
//! Returns the data structure <br>
  Standard_EXPORT    const BOPDS_DS& DS() const;
  
//! Modifier <br>
//! Sets the first set of indices  <theLI> to process <br>
  Standard_EXPORT     void SetSubSet1(const BOPCol_ListOfInteger& theLI) ;
  
//! Selector <br>
//! Returns the first set of indices to process <br>
  Standard_EXPORT    const BOPCol_ListOfInteger& SubSet1() const;
  
//! Modifier <br>
//! Sets the second set of indices  <theLI> to process <br>
  Standard_EXPORT     void SetSubSet2(const BOPCol_ListOfInteger& theLI) ;
  
//! Selector <br>
//! Returns the second set of indices to process <br>
  Standard_EXPORT    const BOPCol_ListOfInteger& SubSet2() const;
  
//! Initializes the  iterator <br>
  Standard_EXPORT     void Initialize() ;
  
//! Returns  true if still there are pairs <br>
//!  of intersected shapes <br>
  Standard_EXPORT     Standard_Boolean More() const;
  
//! Moves iterations ahead <br>
  Standard_EXPORT     void Next() ;
  
//! Returns indices (DS) of intersected shapes <br>
//! theIndex1 - the index of the first shape <br>
//! theIndex2 - the index of the second shape <br>
  Standard_EXPORT     void Value(Standard_Integer& theIndex1,Standard_Integer& theIndex2) const;
  
//! Perform the intersection algorithm and prepare <br>
//! the results to be used <br>
  Standard_EXPORT   virtual  void Prepare() ;





protected:

  
  Standard_EXPORT   virtual  void Intersect() ;


BOPCol_BaseAllocator myAllocator;
BOPDS_PDS myDS;
BOPDS_ListOfPassKeyBoolean myList;
BOPDS_ListIteratorOfListOfPassKeyBoolean myIterator;
BOPCol_PListOfInteger mySubSet1;
BOPCol_PListOfInteger mySubSet2;


private:





};





// other Inline functions and methods (like "C++: function call" methods)


#endif
