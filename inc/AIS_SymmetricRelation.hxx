// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _AIS_SymmetricRelation_HeaderFile
#define _AIS_SymmetricRelation_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_DefineHandle_HeaderFile
#include <Standard_DefineHandle.hxx>
#endif
#ifndef _Handle_AIS_SymmetricRelation_HeaderFile
#include <Handle_AIS_SymmetricRelation.hxx>
#endif

#ifndef _TopoDS_Shape_HeaderFile
#include <TopoDS_Shape.hxx>
#endif
#ifndef _gp_Pnt_HeaderFile
#include <gp_Pnt.hxx>
#endif
#ifndef _gp_Dir_HeaderFile
#include <gp_Dir.hxx>
#endif
#ifndef _AIS_Relation_HeaderFile
#include <AIS_Relation.hxx>
#endif
#ifndef _Handle_Geom_Plane_HeaderFile
#include <Handle_Geom_Plane.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Handle_PrsMgr_PresentationManager3d_HeaderFile
#include <Handle_PrsMgr_PresentationManager3d.hxx>
#endif
#ifndef _Handle_Prs3d_Presentation_HeaderFile
#include <Handle_Prs3d_Presentation.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Handle_Prs3d_Projector_HeaderFile
#include <Handle_Prs3d_Projector.hxx>
#endif
#ifndef _Handle_Geom_Transformation_HeaderFile
#include <Handle_Geom_Transformation.hxx>
#endif
#ifndef _Handle_SelectMgr_Selection_HeaderFile
#include <Handle_SelectMgr_Selection.hxx>
#endif
class TopoDS_Shape;
class Geom_Plane;
class PrsMgr_PresentationManager3d;
class Prs3d_Presentation;
class Prs3d_Projector;
class Geom_Transformation;
class SelectMgr_Selection;


//! A framework to display constraints of symmetricity <br>
//! between two or more datum Interactive Objects. <br>
//! A plane serves as the axis of symmetry between the <br>
//! shapes of which the datums are parts. <br>
class AIS_SymmetricRelation : public AIS_Relation {

public:

  //! Constructs an object to display constraints of symmetricity. <br>
//! This object is defined by a tool aSymmTool, a first <br>
//! shape FirstShape, a second shape SecondShape, and a plane aPlane. <br>
//! aPlane serves as the axis of symmetry. <br>
//! aSymmTool is the shape composed of FirstShape <br>
//! SecondShape and aPlane. It may be queried and <br>
//! edited using the functions GetTool and SetTool. <br>
//! The two shapes are typically two edges, two vertices or two points. <br>
  Standard_EXPORT   AIS_SymmetricRelation(const TopoDS_Shape& aSymmTool,const TopoDS_Shape& FirstShape,const TopoDS_Shape& SecondShape,const Handle(Geom_Plane)& aPlane);
  //! Returns true if the symmetric constraint display is movable. <br>
      virtual  Standard_Boolean IsMovable() const;
  //! Sets the tool aSymmetricTool composed of a first <br>
//! shape, a second shape, and a plane. <br>
//! This tool is initially created at construction time. <br>
        void SetTool(const TopoDS_Shape& aSymmetricTool) ;
  //! Returns the tool composed of a first shape, a second <br>
//! shape, and a plane. This tool is created at construction time. <br>
       const TopoDS_Shape& GetTool() const;
  //! computes the presentation according to a point of view <br>
//!          given by <aProjector>. <br>
//!          To be Used when the associated degenerated Presentations <br>
//!          have been transformed by <aTrsf> which is not a Pure <br>
//!          Translation. The HLR Prs can't be deducted automatically <br>
//!          WARNING :<aTrsf> must be applied <br>
//!           to the object to display before computation  !!! <br>
  Standard_EXPORT   virtual  void Compute(const Handle(Prs3d_Projector)& aProjector,const Handle(Geom_Transformation)& aTrsf,const Handle(Prs3d_Presentation)& aPresentation) ;




  DEFINE_STANDARD_RTTI(AIS_SymmetricRelation)

protected:




private: 

  
  Standard_EXPORT     void Compute(const Handle(PrsMgr_PresentationManager3d)& aPresentationManager,const Handle(Prs3d_Presentation)& aPresentation,const Standard_Integer aMode = 0) ;
  
  Standard_EXPORT     void Compute(const Handle(Prs3d_Projector)& aProjector,const Handle(Prs3d_Presentation)& aPresentation) ;
  
  Standard_EXPORT     void ComputeSelection(const Handle(SelectMgr_Selection)& aSelection,const Standard_Integer aMode) ;
  
  Standard_EXPORT     void ComputeTwoFacesSymmetric(const Handle(Prs3d_Presentation)& aprs) ;
  
  Standard_EXPORT     void ComputeTwoEdgesSymmetric(const Handle(Prs3d_Presentation)& aprs) ;
  
  Standard_EXPORT     void ComputeTwoVerticesSymmetric(const Handle(Prs3d_Presentation)& aprs) ;

TopoDS_Shape myTool;
gp_Pnt myFAttach;
gp_Pnt mySAttach;
gp_Dir myFDirAttach;
gp_Dir myAxisDirAttach;


};


#include <AIS_SymmetricRelation.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
