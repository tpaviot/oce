// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

inline const Handle(V3d_Viewer)& AIS_InteractiveContext::CurrentViewer() const 
{
  return myMainVwr;
}

inline Quantity_NameOfColor AIS_InteractiveContext::HilightColor() const 
{ 
  return myHilightColor;
}

inline Quantity_NameOfColor AIS_InteractiveContext::SelectionColor() const 
{
  return mySelectionColor;
}

inline Quantity_NameOfColor AIS_InteractiveContext::PreSelectionColor() const 
{
  return  myPreselectionColor;
}

inline Quantity_NameOfColor AIS_InteractiveContext::DefaultColor() const 
{  return myDefaultColor;
}

inline Quantity_NameOfColor AIS_InteractiveContext::SubIntensityColor() const 
{
  return  mySubIntensity;
}
inline void AIS_InteractiveContext::SetHilightColor(const Quantity_NameOfColor aHiCol)
{
  myHilightColor = aHiCol;
}

inline void AIS_InteractiveContext::SelectionColor(const Quantity_NameOfColor aCol)
{
  mySelectionColor = aCol;
}

inline void AIS_InteractiveContext::SetPreselectionColor(const Quantity_NameOfColor aCol)
{
  myPreselectionColor = aCol;
}

inline void AIS_InteractiveContext::SetSubIntensityColor(const Quantity_NameOfColor aCol)
{
  mySubIntensity = aCol;
}

inline Standard_Integer AIS_InteractiveContext::DisplayMode() const 
{
  return myDisplayMode;
}

inline const Handle(Prs3d_Drawer)& AIS_InteractiveContext::DefaultDrawer() const 
{return myDefaultDrawer;}
inline const Handle(SelectMgr_SelectionManager)& AIS_InteractiveContext::SelectionManager() const 
{return mgrSelector ;}

inline const Handle(PrsMgr_PresentationManager3d)& AIS_InteractiveContext::MainPrsMgr() const 
{return myMainPM  ;}

inline Standard_Boolean AIS_InteractiveContext::HasOpenedContext() const 
{return myCurLocalIndex != 0;}

inline Handle(AIS_LocalContext) AIS_InteractiveContext::LocalContext() const
{ return (myCurLocalIndex > 0) ? myLocalContexts(myCurLocalIndex) : (Handle_AIS_LocalContext) NULL; }

inline const TCollection_AsciiString& AIS_InteractiveContext::CurrentName() const 
{return myCurrentName;} 

inline  Standard_Boolean AIS_InteractiveContext::WasCurrentTouched() const 
{return myCurrentTouched;}

inline void  AIS_InteractiveContext::SetOkCurrent()
{myCurrentTouched= Standard_False;}


inline const Handle(StdSelect_ViewerSelector3d)& AIS_InteractiveContext::MainSelector() const 
{return myMainSel;}

inline void AIS_InteractiveContext::SetToHilightSelected(const Standard_Boolean toHilight)
{
  myToHilightSelected = toHilight;
}

inline Standard_Boolean AIS_InteractiveContext::ToHilightSelected() const
{
  return myToHilightSelected;
}














