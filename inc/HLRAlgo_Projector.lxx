// Created on: 1992-07-09
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <Standard_NoSuchObject.hxx>
#include <gp_Vec.hxx>
#include <gp_Pnt.hxx>

//=======================================================================
//function : Directions
//purpose  : 
//=======================================================================

inline void 
HLRAlgo_Projector::Directions (gp_Vec2d& D1,
			       gp_Vec2d& D2,
			       gp_Vec2d& D3) const
{
  D1 = myD1;
  D2 = myD2;
  D3 = myD3;
}

//=======================================================================
//function : Perspective
//purpose  : 
//=======================================================================

inline Standard_Boolean HLRAlgo_Projector::Perspective() const
{ return myPersp; }
/*
//=======================================================================
//function : Transformation
//purpose  : 
//=======================================================================

inline const gp_Trsf & HLRAlgo_Projector::Transformation() const
{ return myTrsf; }
*/
//=======================================================================
//function : InvertedTransformation
//purpose  : 
//=======================================================================

inline const gp_Trsf & HLRAlgo_Projector::InvertedTransformation() const
{ return myInvTrsf; }

//=======================================================================
//function : FullTransformation
//purpose  : 
//=======================================================================

inline const gp_Trsf & HLRAlgo_Projector::FullTransformation() const
{ return myScaledTrsf; }

//=======================================================================
//function : Focus
//purpose  : 
//=======================================================================

inline Standard_Real HLRAlgo_Projector::Focus() const
{
  Standard_NoSuchObject_Raise_if
    (!myPersp,"HLRAlgo_Projector::Not a Perspective");
  return myFocus;
}

//=======================================================================
//function : Transform
//purpose  : 
//=======================================================================

inline void HLRAlgo_Projector::Transform (gp_Vec& D) const
{ D.Transform(myTrsf); }

//=======================================================================
//function : Transform
//purpose  : 
//=======================================================================

inline void HLRAlgo_Projector::Transform (gp_Pnt& Pnt) const
{ Pnt.Transform(myTrsf); }
